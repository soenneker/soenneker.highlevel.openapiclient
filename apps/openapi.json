{
  "openapi": "3.0.4",
  "info": {
    "title": "Merged HL APIs",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://services.leadconnectorhq.com"
    },
    {
      "url": "https://api.msgsndr.com"
    }
  ],
  "paths": {
    "/store/store/shipping-zone": {
      "post": {
        "tags": [
          "Shipping Zone"
        ],
        "summary": "Create Shipping Zone",
        "description": "The \"Create Shipping Zone\" API allows adding a new shipping zone.",
        "operationId": "create-shipping-zone",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShippingZoneDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateShippingZoneResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Shipping Zone"
        ],
        "summary": "List Shipping Zones",
        "description": "The \"List Shipping Zone\" API allows to retrieve a list of shipping zone.",
        "operationId": "list-shipping-zones",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "withShippingRate",
            "in": "query",
            "description": "Include shipping rates array",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListShippingZoneResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/store/store/shipping-zone/{shippingZoneId}": {
      "get": {
        "tags": [
          "Shipping Zone"
        ],
        "summary": "Get Shipping Zone",
        "description": "The \"List Shipping Zone\" API allows to retrieve a paginated list of shipping zone.",
        "operationId": "get-shipping-zones",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingZoneId",
            "in": "path",
            "description": "ID of the item that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "withShippingRate",
            "in": "query",
            "description": "Include shipping rates array",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetShippingZoneResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Shipping Zone"
        ],
        "summary": "Update Shipping Zone",
        "description": "The \"update Shipping Zone\" API allows update a shipping zone to the system. ",
        "operationId": "update-shipping-zone",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingZoneId",
            "in": "path",
            "description": "ID of the item that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShippingZoneDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateShippingZoneResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Shipping Zone"
        ],
        "summary": "Delete shipping zone",
        "description": "Delete specific shipping zone with Id :shippingZoneId",
        "operationId": "delete-shipping-zone",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingZoneId",
            "in": "path",
            "description": "ID of the item that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteShippingZoneResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/store/store/shipping-zone/shipping-rates": {
      "post": {
        "tags": [
          "Shipping Zone"
        ],
        "summary": "Get available shipping rates",
        "description": "This return available shipping rates for country based on order amount",
        "operationId": "get-available-shipping-zones",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAvailableShippingRates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableShippingRatesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        }
      }
    },
    "/store/store/shipping-zone/{shippingZoneId}/shipping-rate": {
      "post": {
        "tags": [
          "Shipping Zone Rates"
        ],
        "summary": "Create Shipping Rate",
        "description": "The \"Create Shipping Rate\" API allows adding a new shipping rate.",
        "operationId": "create-shipping-rate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingZoneId",
            "in": "path",
            "description": "ID of the item that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShippingRateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateShippingRateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Shipping Zone Rates"
        ],
        "summary": "List Shipping Rates",
        "description": "The \"List Shipping Rate\" API allows to retrieve a list of shipping rate.",
        "operationId": "list-shipping-rates",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingZoneId",
            "in": "path",
            "description": "ID of the item that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListShippingRateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/store/store/shipping-zone/{shippingZoneId}/shipping-rate/{shippingRateId}": {
      "get": {
        "tags": [
          "Shipping Zone Rates"
        ],
        "summary": "Get Shipping Rate",
        "description": "The \"List Shipping Rate\" API allows to retrieve a paginated list of shipping rate.",
        "operationId": "get-shipping-rates",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingZoneId",
            "in": "path",
            "description": "ID of the shipping zone",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "shippingRateId",
            "in": "path",
            "description": "ID of the shipping rate that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetShippingRateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Shipping Zone Rates"
        ],
        "summary": "Update Shipping Rate",
        "description": "The \"update Shipping Rate\" API allows update a shipping rate to the system. ",
        "operationId": "update-shipping-rate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingZoneId",
            "in": "path",
            "description": "ID of the shipping zone",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "shippingRateId",
            "in": "path",
            "description": "ID of the shipping rate that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShippingRateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateShippingRateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Shipping Zone Rates"
        ],
        "summary": "Delete shipping rate",
        "description": "Delete specific shipping rate with Id :shippingRateId",
        "operationId": "delete-shipping-rate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingZoneId",
            "in": "path",
            "description": "ID of the shipping zone",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "shippingRateId",
            "in": "path",
            "description": "ID of the shipping rate that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteShippingRateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/store/store/shipping-carrier": {
      "post": {
        "tags": [
          "Shipping Carrier"
        ],
        "summary": "Create Shipping Carrier",
        "description": "The \"Create Shipping Carrier\" API allows adding a new shipping carrier.",
        "operationId": "create-shipping-carrier",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShippingCarrierDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateShippingCarrierResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Shipping Carrier"
        ],
        "summary": "List Shipping Carriers",
        "description": "The \"List Shipping Carrier\" API allows to retrieve a list of shipping carrier.",
        "operationId": "list-shipping-carriers",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListShippingCarrierResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/store/store/shipping-carrier/{shippingCarrierId}": {
      "get": {
        "tags": [
          "Shipping Carrier"
        ],
        "summary": "Get Shipping Carrier",
        "description": "The \"List Shipping Carrier\" API allows to retrieve a paginated list of shipping carrier.",
        "operationId": "get-shipping-carriers",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingCarrierId",
            "in": "path",
            "description": "ID of the shipping carrier that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetShippingCarrierResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Shipping Carrier"
        ],
        "summary": "Update Shipping Carrier",
        "description": "The \"update Shipping Carrier\" API allows update a shipping carrier to the system. ",
        "operationId": "update-shipping-carrier",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingCarrierId",
            "in": "path",
            "description": "ID of the shipping carrier that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShippingCarrierDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateShippingCarrierResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Shipping Carrier"
        ],
        "summary": "Delete shipping carrier",
        "description": "Delete specific shipping carrier with Id :shippingCarrierId",
        "operationId": "delete-shipping-carrier",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "shippingCarrierId",
            "in": "path",
            "description": "ID of the shipping carrier that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteShippingCarrierResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/store/store/store-setting": {
      "post": {
        "tags": [
          "Store Setting"
        ],
        "summary": "Create/Update Store Settings",
        "description": "Create or update store settings by altId and altType.",
        "operationId": "create-store-setting",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStoreSettingDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateStoreSettingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Store Setting"
        ],
        "summary": "Get Store Settings",
        "description": "Get store settings by altId and altType.",
        "operationId": "get-store-settings",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStoreSettingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/companies/companies/{companyId}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get Company",
        "description": "Get Comapny",
        "operationId": "get-company",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompanyByIdSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "companies.readonly"
            ]
          }
        ]
      }
    },
    "/oauth/oauth/token": {
      "post": {
        "tags": [
          "OAuth 2.0"
        ],
        "summary": "Get Access Token",
        "description": "Use Access Tokens to access GoHighLevel resources on behalf of an authenticated location/company.",
        "operationId": "get-access-token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetAccessCodebodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccessCodeSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/oauth/locationToken": {
      "post": {
        "tags": [
          "OAuth 2.0"
        ],
        "summary": "Get Location Access Token from Agency Token",
        "description": "This API allows you to generate locationAccessToken from AgencyAccessToken",
        "operationId": "get-location-access-token",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetLocationAccessCodeBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationAccessTokenSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          { }
        ]
      }
    },
    "/oauth/oauth/installedLocations": {
      "get": {
        "tags": [
          "OAuth 2.0"
        ],
        "summary": "Get Location where app is installed",
        "description": "This API allows you fetch location where app is installed upon",
        "operationId": "get-installed-location",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Parameter to skip the number installed locations",
            "schema": {
              "type": "string",
              "default": "0",
              "example": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Parameter to limit the number installed locations",
            "schema": {
              "type": "string",
              "default": "20",
              "example": "10"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Parameter to search for the installed location by name",
            "schema": {
              "type": "string",
              "example": "location name"
            }
          },
          {
            "name": "isInstalled",
            "in": "query",
            "description": "Filters out location which are installed for specified app under the specified company",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Parameter to search by the companyId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          },
          {
            "name": "appId",
            "in": "query",
            "description": "Parameter to search by the appId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "VersionId of the app",
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          },
          {
            "name": "onTrial",
            "in": "query",
            "description": "Filters out locations which are installed for specified app in trial mode",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "planId",
            "in": "query",
            "description": "Filters out location which are installed for specified app under the specified planId",
            "schema": {
              "type": "string",
              "example": true
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstalledLocationsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "oauth.readonly"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/google/start": {
      "get": {
        "tags": [
          "Oauth | Google"
        ],
        "summary": "Starts OAuth For Google Account",
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Google login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"google\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Google account details using below API -\n  API: '/social-media-posting/oauth/google/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-google-oauth",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "string"
            },
            "example": "integration"
          },
          {
            "name": "reconnect",
            "in": "query",
            "description": "Reconnect",
            "schema": {
              "type": "string"
            },
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/oauth.readonly"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/{locationId}/google/locations/{accountId}": {
      "get": {
        "tags": [
          "Oauth | Google"
        ],
        "summary": "Get google business locations",
        "description": "Get google business locations",
        "operationId": "get-google-locations",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGoogleLocationResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Oauth | Google"
        ],
        "summary": "Set google business locations",
        "description": "Set google business locations",
        "operationId": "set-google-locations",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachGMBLocationDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaGmbAccountResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/posts/list": {
      "post": {
        "tags": [
          "Post"
        ],
        "summary": "Get posts",
        "description": "Get Posts",
        "operationId": "get-posts",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchPostDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/post.readonly"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/posts": {
      "post": {
        "tags": [
          "Post"
        ],
        "summary": "Create post",
        "description": "Create posts for all supported platforms. It is possible to create customized posts per channel by using the same platform account IDs in a request and hitting the create post API multiple times with different summaries and account IDs per platform.\n\nThe content and media limitations, as well as platform rate limiters corresponding to the respective platforms, are provided in the following reference link:\n\n  Link: [Platform Limitations](https://help.leadconnectorhq.com/support/solutions/articles/48001240003-social-planner-image-video-content-and-api-limitations \"Social Planner Help\")",
        "operationId": "create-post",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePostSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/post.write"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/posts/{id}": {
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "Get post",
        "description": "Get post",
        "operationId": "get-post",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "65fac446d599990d1313c1dd"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Post"
        ],
        "summary": "Edit post",
        "description": "Create posts for all supported platforms. It is possible to create customized posts per channel by using the same platform account IDs in a request and hitting the create post API multiple times with different summaries and account IDs per platform.\n\nThe content and media limitations, as well as platform rate limiters corresponding to the respective platforms, are provided in the following reference link:\n\n  Link: [Platform Limitations](https://help.leadconnectorhq.com/support/solutions/articles/48001240003-social-planner-image-video-content-and-api-limitations \"Social Planner Help\")",
        "operationId": "edit-post",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "65fac446d599990d1313c1dd"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePostSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Post"
        ],
        "summary": "Delete Post",
        "description": "Delete Post",
        "operationId": "delete-post",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "65fac446d599990d1313c1dd"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePostSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/posts/bulk-delete": {
      "post": {
        "tags": [
          "Post"
        ],
        "summary": "Bulk Delete Social Planner Posts",
        "description": "Deletes multiple posts based on the provided list of post IDs. \n                  This operation is useful for clearing up large numbers of posts efficiently. \n                  \nNote: \n                  \n1.The maximum number of posts that can be deleted in a single request is '50'.\n                  \n2.However, It will only get deleted in Highlevel database but still\n                   it is recommended to be cautious of this operation.",
        "operationId": "bulk-delete-social-planner-posts",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePostsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Posts deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDeleteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete more than 50 posts at a time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "No posts found with the given IDs."
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while trying to delete the posts. Please try again later."
          }
        }
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/accounts": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Accounts",
        "description": "Get list of accounts and groups",
        "operationId": "get-account",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsListResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/account.readonly"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/accounts/{id}": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete Account",
        "description": "Delete account and account from group",
        "operationId": "delete-account",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "65fac446d599990d1313c1dd"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company ID",
            "schema": {
              "type": "string"
            },
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "schema": {
              "type": "string"
            },
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationAndAccountDeleteResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/facebook/start": {
      "get": {
        "tags": [
          "Oauth | Facebook"
        ],
        "summary": "Starts OAuth For Facebook Account",
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Facebook login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"facebook\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Facebook account details using below API -\n  API: '/social-media-posting/oauth/facebook/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-facebook-oauth",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Facebook Page",
            "schema": {
              "type": "string"
            },
            "example": "integration"
          },
          {
            "name": "reconnect",
            "in": "query",
            "description": "Reconnect boolean as string",
            "schema": {
              "type": "string"
            },
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/{locationId}/facebook/accounts/{accountId}": {
      "get": {
        "tags": [
          "Oauth | Facebook"
        ],
        "summary": "Get facebook pages",
        "description": "Get facebook pages",
        "operationId": "get-facebook-page-group",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response, runs Facebook OAuth and redirects to application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFacebookAccountsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Oauth | Facebook"
        ],
        "summary": "Attach facebook pages",
        "description": "Attach facebook pages",
        "operationId": "attach-facebook-page-group",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFBAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaFBAccountResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/instagram/start": {
      "get": {
        "tags": [
          "Oauth | Instagram"
        ],
        "summary": "Starts OAuth For Instagram Account",
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Instagram login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"instagram\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Instagram account details using below API -\n  API: '/social-media-posting/oauth/instagram/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-instagram-oauth",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "string"
            },
            "example": "integration"
          },
          {
            "name": "reconnect",
            "in": "query",
            "description": "Reconnect",
            "schema": {
              "type": "string"
            },
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/oauth.readonly"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/{locationId}/instagram/accounts/{accountId}": {
      "get": {
        "tags": [
          "Oauth | Instagram"
        ],
        "summary": "Get Instagram Professional Accounts",
        "description": "Get Instagram Professional Accounts",
        "operationId": "get-instagram-page-group",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstagramAccountsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Oauth | Instagram"
        ],
        "summary": "Attach Instagram Professional Accounts",
        "description": "Attach Instagram Professional Accounts",
        "operationId": "attach-instagram-page-group",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachIGAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaInstagramAccountResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/linkedin/start": {
      "get": {
        "tags": [
          "Oauth | LinkedIn"
        ],
        "summary": "Starts OAuth For LinkedIn Account",
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to LinkedIn login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"linkedin\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch LinkedIn account details using below API -\n  API: '/social-media-posting/oauth/linkedin/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-linkedin-oauth",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "string"
            },
            "example": "integration"
          },
          {
            "name": "reconnect",
            "in": "query",
            "description": "Reconnect",
            "schema": {
              "type": "string"
            },
            "example": "integration"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/{locationId}/linkedin/accounts/{accountId}": {
      "get": {
        "tags": [
          "Oauth | LinkedIn"
        ],
        "summary": "Get Linkedin pages and profile",
        "description": "Get Linkedin pages and profile",
        "operationId": "get-linkedin-page-profile",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLinkedInAccountsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Oauth | LinkedIn"
        ],
        "summary": "Attach linkedin pages and profile",
        "description": "Attach linkedin pages and profile",
        "operationId": "attach-linkedin-page-profile",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachLinkedinAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaLinkedInAccountResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/twitter/start": {
      "get": {
        "tags": [
          "Oauth | Twitter"
        ],
        "summary": "Starts OAuth For Twitter Account",
        "description": "<div><div>\n  <span style= \"display: inline-block;\n    width: 25px; height: 25px;\n    background-color: red;\n    color: black;\n    font-weight: bold;\n    font-size: 24px;\n    text-align: center;\n    line-height: 20px;\n    border: 2px solid black;\n    border-radius: 20%;\n    margin-right: 10px;\">\n    !\n  </span>\n  <span><strong>As of December 4, 2024, X (formerly Twitter) is no longer supported. We apologise for any inconvenience.</strong></span>\n</div></div>",
        "operationId": "start-twitter-oauth",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "string"
            },
            "example": "integration"
          },
          {
            "name": "reconnect",
            "in": "query",
            "description": "Reconnect",
            "schema": {
              "type": "string"
            },
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "bearer": [
              "socialplanner/oauth.readonly"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/{locationId}/twitter/accounts/{accountId}": {
      "get": {
        "tags": [
          "Oauth | Twitter"
        ],
        "summary": "Get Twitter profile",
        "description": "<div><div>\n  <span style= \"display: inline-block;\n    width: 25px; height: 25px;\n    background-color: red;\n    color: black;\n    font-weight: bold;\n    font-size: 24px;\n    text-align: center;\n    line-height: 20px;\n    border: 2px solid black;\n    border-radius: 20%;\n    margin-right: 10px;\">\n    !\n  </span>\n  <span><strong>As of December 4, 2024, X (formerly Twitter) is no longer supported. We apologise for any inconvenience.</strong></span>\n</div></div>",
        "operationId": "get-twitter-profile",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTwitterAccountsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Oauth | Twitter"
        ],
        "summary": "Attach Twitter profile",
        "description": "<div><div>\n  <span style= \"display: inline-block;\n    width: 25px; height: 25px;\n    background-color: red;\n    color: black;\n    font-weight: bold;\n    font-size: 24px;\n    text-align: center;\n    line-height: 20px;\n    border: 2px solid black;\n    border-radius: 20%;\n    margin-right: 10px;\">\n    !\n  </span>\n  <span><strong>As of December 4, 2024, X (formerly Twitter) is no longer supported. We apologise for any inconvenience.</strong></span>\n</div></div>",
        "operationId": "attach-twitter-profile",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachTwitterAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaTwitterAccountResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/csv": {
      "post": {
        "tags": [
          "CSV"
        ],
        "summary": "Upload CSV",
        "operationId": "upload-csv",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadCSVDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/csv.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "CSV"
        ],
        "summary": "Get Upload Status",
        "operationId": "get-upload-status",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "0"
            },
            "example": "1"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "10"
            },
            "example": "10"
          },
          {
            "name": "includeUsers",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "true"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "schema": {
              "type": "string"
            },
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUploadStatusResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/set-accounts": {
      "post": {
        "tags": [
          "CSV"
        ],
        "summary": "Set Accounts",
        "operationId": "set-accounts",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAccountsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetAccountsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/csv.write"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/csv/{id}": {
      "get": {
        "tags": [
          "CSV"
        ],
        "summary": "Get CSV Post",
        "operationId": "get-csv-post",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          },
          {
            "name": "id",
            "in": "path",
            "description": "CSV Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "65f92e55cc884f0d0845e447"
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "0"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "10"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCsvPostResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "CSV"
        ],
        "summary": "Start CSV Finalize",
        "operationId": "start-csv-finalize",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          },
          {
            "name": "id",
            "in": "path",
            "description": "CSV Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "65f92e55cc884f0d0845e447"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CSVDefaultDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsvPostStatusResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "CSV"
        ],
        "summary": "Delete CSV",
        "operationId": "delete-csv",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          },
          {
            "name": "id",
            "in": "path",
            "description": "CSV Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "65f92e55cc884f0d0845e447"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCsvResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/csv/{csvId}/post/{postId}": {
      "delete": {
        "tags": [
          "CSV"
        ],
        "summary": "Delete CSV Post",
        "operationId": "delete-csv-post",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          },
          {
            "name": "postId",
            "in": "path",
            "description": "CSV Post Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "65f92e55cc884f0d0845e447"
          },
          {
            "name": "csvId",
            "in": "path",
            "description": "CSV Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "65f92e55cc884f0d0845e447"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePostResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/tiktok/start": {
      "get": {
        "tags": [
          "Oauth | Tiktok"
        ],
        "summary": "Starts OAuth For Tiktok Account",
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Tiktok login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"tiktok\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Tiktok account details using below API -\n  API: '/social-media-posting/oauth/tiktok/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-tiktok-oauth",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "string"
            },
            "example": "integration"
          },
          {
            "name": "reconnect",
            "in": "query",
            "description": "Reconnect",
            "schema": {
              "type": "string"
            },
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/oauth.readonly"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/{locationId}/tiktok/accounts/{accountId}": {
      "get": {
        "tags": [
          "Oauth | Tiktok"
        ],
        "summary": "Get Tiktok profile",
        "description": "Get Tiktok profile",
        "operationId": "get-tiktok-profile",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTiktokAccountResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Oauth | Tiktok"
        ],
        "summary": "Attach Tiktok profile",
        "description": "Attach Tiktok profile",
        "operationId": "attach-tiktok-profile",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachTiktokAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaTiktokAccountResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/tiktok-business/start": {
      "get": {
        "tags": [
          "Oauth | Tiktok"
        ],
        "summary": "Starts OAuth For Tiktok Business Account",
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Tiktok-Business login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"tiktok-business\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Tiktok-Business account details using below API -\n  API: '/social-media-posting/oauth/tiktok-business/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-tiktok-business-oauth",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "string"
            },
            "example": "integration"
          },
          {
            "name": "reconnect",
            "in": "query",
            "description": "Reconnect",
            "schema": {
              "type": "string"
            },
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/oauth.readonly"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/oauth/{locationId}/tiktok-business/accounts/{accountId}": {
      "get": {
        "tags": [
          "Oauth | Tiktok"
        ],
        "summary": "Get Tiktok Business profile",
        "description": "Get Tiktok Business profile",
        "operationId": "get-tiktok-business-profile",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Account Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTiktokBusinessAccountResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/categories": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get categories by location id",
        "operationId": "get-categories-location-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search text string",
            "schema": {
              "type": "string"
            },
            "example": "test"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit",
            "schema": {
              "type": "string"
            },
            "example": "10"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip",
            "schema": {
              "type": "string"
            },
            "example": "0"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByLocationIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "socialplanner/category.readonly"
            ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/categories/{id}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get categories by id",
        "operationId": "get-categories-id",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Category Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6284c43d519161e96cc09c13"
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6284c43d519161e96cc09c13"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/tags": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get tags by location id",
        "operationId": "get-tags-location-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search text string",
            "schema": {
              "type": "string"
            },
            "example": "test"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit",
            "schema": {
              "type": "string"
            },
            "example": 10
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip",
            "schema": {
              "type": "string"
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTagsByLocationIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/{locationId}/tags/details": {
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "Get tags by ids",
        "operationId": "get-tags-by-ids",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTagsByIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/social-media-posting/social-media-posting/statistics": {
      "post": {
        "tags": [
          "Statistics"
        ],
        "summary": "Get Social Media Statistics",
        "description": "Retrieve analytics data for multiple social media accounts. Provides metrics for the last 7 days with comparison to the previous 7 days. Supports filtering by platforms and specific connected accounts.",
        "operationId": "get-social-media-statistics",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "w37swmmLbA02zgqKPpxITe2"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "profileIds"
                ],
                "type": "object",
                "properties": {
                  "profileIds": {
                    "minItems": 1,
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of connected social media account IDs to fetch analytics for. This can be found as 'profileId' in /accounts api.",
                    "example": [
                      "67a5a9aa776c837de4aa5b12"
                    ]
                  },
                  "platforms": {
                    "type": "array",
                    "items": {
                      "enum": [
                        "facebook",
                        "instagram",
                        "linkedin",
                        "google",
                        "pinterest",
                        "youtube",
                        "tiktok"
                      ],
                      "type": "string"
                    },
                    "description": "Array of social media platforms to filter analytics by. If not provided, all platforms will be included. NOTE: Linkedin (PAGE only) and Tiktok (BUSINESS only) are supported.",
                    "example": [
                      "facebook",
                      "instagram"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully retrieved analytics data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "properties": {
                        "dayRange": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of day names for the analytics period",
                          "example": [
                            "Mon",
                            "Tue",
                            "Wed",
                            "Thu",
                            "Fri",
                            "Sat",
                            "Sun"
                          ]
                        },
                        "totals": {
                          "type": "object",
                          "properties": {
                            "posts": {
                              "type": "number"
                            },
                            "likes": {
                              "type": "number"
                            },
                            "followers": {
                              "type": "number"
                            },
                            "impressions": {
                              "type": "number"
                            },
                            "comments": {
                              "type": "number"
                            }
                          },
                          "description": "Aggregated metrics totals"
                        },
                        "postPerformance": {
                          "type": "object",
                          "properties": {
                            "posts": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              }
                            },
                            "impressions": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "likes": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "comments": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "description": "Post performance metrics over time"
                        },
                        "breakdowns": {
                          "type": "object",
                          "properties": {
                            "posts": {
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "number"
                                },
                                "totalChange": {
                                  "type": "number"
                                },
                                "platforms": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "type": "number"
                                      },
                                      "change": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "impressions": {
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "number"
                                },
                                "totalChange": {
                                  "type": "number"
                                },
                                "platforms": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "type": "number"
                                      },
                                      "change": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "reach": {
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "number"
                                },
                                "totalChange": {
                                  "type": "number"
                                },
                                "platforms": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "type": "number"
                                      },
                                      "change": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "engagement": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "likes": {
                                    "type": "number"
                                  },
                                  "comments": {
                                    "type": "number"
                                  },
                                  "shares": {
                                    "type": "number"
                                  },
                                  "change": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          },
                          "description": "Detailed breakdowns by metric and platform"
                        },
                        "platformTotals": {
                          "type": "object",
                          "properties": {
                            "impressions": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "total": {
                                    "type": "number"
                                  },
                                  "series": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "followers": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "total": {
                                    "type": "number"
                                  },
                                  "series": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "likes": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "total": {
                                    "type": "number"
                                  },
                                  "series": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "description": "Platform-wise totals with time series data"
                        },
                        "demographics": {
                          "type": "object",
                          "properties": {
                            "gender": {
                              "type": "object",
                              "properties": {
                                "totals": {
                                  "type": "object",
                                  "properties": {
                                    "male": {
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "number"
                                        },
                                        "percentage": {
                                          "type": "number"
                                        }
                                      }
                                    },
                                    "female": {
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "number"
                                        },
                                        "percentage": {
                                          "type": "number"
                                        }
                                      }
                                    },
                                    "unknown": {
                                      "type": "object",
                                      "properties": {
                                        "total": {
                                          "type": "number"
                                        },
                                        "percentage": {
                                          "type": "number"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "age": {
                              "type": "object",
                              "properties": {
                                "totals": {
                                  "type": "object",
                                  "properties": {
                                    "13-17": {
                                      "type": "number"
                                    },
                                    "18-24": {
                                      "type": "number"
                                    },
                                    "25-34": {
                                      "type": "number"
                                    },
                                    "35-44": {
                                      "type": "number"
                                    },
                                    "45-54": {
                                      "type": "number"
                                    },
                                    "55-64": {
                                      "type": "number"
                                    },
                                    "65+": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "description": "Demographic data breakdown"
                        }
                      },
                      "description": "Analytics data grouped by metrics and platforms"
                    },
                    "message": {
                      "type": "string",
                      "example": "Analytics Built Successfully"
                    },
                    "traceId": {
                      "type": "string",
                      "example": "42fc8dd8-d55b-475f-944f-9efb90d77564"
                    }
                  },
                  "example": {
                    "results": {
                      "dayRange": [
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thu",
                        "Fri",
                        "Sat",
                        "Sun"
                      ],
                      "totals": {
                        "posts": 0,
                        "likes": 0,
                        "followers": 0,
                        "impressions": 0,
                        "comments": 0
                      },
                      "postPerformance": {
                        "posts": {
                          "google": [
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0
                          ]
                        },
                        "impressions": [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        "likes": [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        "comments": [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ]
                      },
                      "breakdowns": {
                        "posts": {
                          "total": 0,
                          "totalChange": 0,
                          "platforms": {
                            "google": {
                              "value": 0,
                              "change": 0
                            }
                          }
                        },
                        "impressions": {
                          "total": 0,
                          "totalChange": 0,
                          "platforms": {
                            "google": {
                              "value": 0,
                              "change": 0
                            }
                          }
                        },
                        "reach": {
                          "total": 0,
                          "totalChange": 0,
                          "platforms": {
                            "google": {
                              "value": 0,
                              "change": 0
                            }
                          }
                        },
                        "engagement": {
                          "google": {
                            "likes": 0,
                            "comments": 0,
                            "shares": 0,
                            "change": 0
                          }
                        }
                      },
                      "platformTotals": {
                        "impressions": {
                          "google": {
                            "total": 0,
                            "series": [
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        "followers": {
                          "google": {
                            "total": 0,
                            "series": [
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        "likes": {
                          "google": {
                            "total": 0,
                            "series": [
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        }
                      },
                      "demographics": {
                        "gender": {
                          "totals": {
                            "male": {
                              "total": 0,
                              "percentage": 0
                            },
                            "female": {
                              "total": 0,
                              "percentage": 0
                            },
                            "unknown": {
                              "total": 0,
                              "percentage": 0
                            }
                          }
                        },
                        "age": {
                          "totals": {
                            "13-17": 0,
                            "18-24": 0,
                            "25-34": 0,
                            "35-44": 0,
                            "45-54": 0,
                            "55-64": 0,
                            "65+": 0
                          }
                        }
                      }
                    },
                    "message": "Analytics Built Successfully",
                    "traceId": "42fc8dd8-d55b-475f-944f-9efb90d77564"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Occurs when more than 100 accounts are requested or invalid parameters are provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Invalid request body format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        }
      }
    },
    "/calendars/calendars/groups": {
      "get": {
        "tags": [
          "Calendar Groups"
        ],
        "summary": "Get Groups",
        "description": "Get all calendar groups in a location.",
        "operationId": "get-groups",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllGroupsSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/groups.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Calendar Groups"
        ],
        "summary": "Create Calendar Group",
        "description": "Create Calendar Group",
        "operationId": "create-calendar-group",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCreateSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/groups.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/groups/validate-slug": {
      "post": {
        "tags": [
          "Calendar Groups"
        ],
        "summary": "Validate group slug",
        "description": "Validate if group slug is available or not.",
        "operationId": "validate-groups-slug",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateGroupSlugPostBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateGroupSlugSuccessResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/groups.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/groups/{groupId}": {
      "delete": {
        "tags": [
          "Calendar Groups"
        ],
        "summary": "Delete Group",
        "description": "Delete Group",
        "operationId": "delete-group",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/groups.write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Calendar Groups"
        ],
        "summary": "Update Group",
        "description": "Update Group by group ID",
        "operationId": "edit-group",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCreateSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/groups.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/groups/{groupId}/status": {
      "put": {
        "tags": [
          "Calendar Groups"
        ],
        "summary": "Disable Group",
        "description": "Disable Group",
        "operationId": "disable-group",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupStatusUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/groups.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/events/appointments": {
      "post": {
        "tags": [
          "Calendar Events"
        ],
        "summary": "Create appointment",
        "description": "Create appointment",
        "operationId": "create-appointment",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCreateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/events/appointments/{eventId}": {
      "put": {
        "tags": [
          "Calendar Events"
        ],
        "summary": "Update Appointment",
        "description": "Update appointment",
        "operationId": "edit-appointment",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "example1": {
                "summary": "Event ID",
                "value": "ocQHyuzHvysMo5N5VsXc"
              },
              "example2": {
                "summary": "Recurring Instance ID",
                "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentEditSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Calendar Events"
        ],
        "summary": "Get Appointment",
        "description": "Get appointment by ID",
        "operationId": "get-appointment",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "example1": {
                "summary": "Event ID",
                "value": "ocQHyuzHvysMo5N5VsXc"
              },
              "example2": {
                "summary": "Recurring Instance ID",
                "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCalendarEventSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.readonly"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/events": {
      "get": {
        "tags": [
          "Calendar Events"
        ],
        "summary": "Get Calendar Events",
        "description": "Get Calendar Events",
        "operationId": "get-calendar-events",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0007BWpSzSwfiuSl0tR2"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id - Owner of an appointment. Either of userId, groupId or calendarId is required",
            "schema": {
              "type": "string",
              "example": "CVokAlI8fgw4WYWoCtQz"
            }
          },
          {
            "name": "calendarId",
            "in": "query",
            "description": "Either of calendarId, userId or groupId is required",
            "schema": {
              "type": "string",
              "example": "BqTwX8QFwXzpegMve9EQ"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Either of groupId, calendarId or userId is required",
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start Time (in millis)",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1680373800000"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End Time (in millis)",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1680978599999"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCalendarEventsSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.readonly"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/blocked-slots": {
      "get": {
        "tags": [
          "Calendar Events"
        ],
        "summary": "Get Blocked Slots",
        "description": "Get Blocked Slots",
        "operationId": "get-blocked-slots",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0007BWpSzSwfiuSl0tR2"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id - Owner of an appointment. Either of userId, groupId or calendarId is required",
            "schema": {
              "type": "string",
              "example": "CVokAlI8fgw4WYWoCtQz"
            }
          },
          {
            "name": "calendarId",
            "in": "query",
            "description": "Either of calendarId, userId or groupId is required",
            "schema": {
              "type": "string",
              "example": "BqTwX8QFwXzpegMve9EQ"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Either of groupId, calendarId or userId is required",
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start Time (in millis)",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1680373800000"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End Time (in millis)",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1680978599999"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCalendarEventsSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.readonly"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/events/block-slots": {
      "post": {
        "tags": [
          "Calendar Events"
        ],
        "summary": "Create Block Slot",
        "description": "Create block slot",
        "operationId": "create-block-slot",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSlotCreateRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedSlotSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/events/block-slots/{eventId}": {
      "put": {
        "tags": [
          "Calendar Events"
        ],
        "summary": "Update Block Slot",
        "description": "Update block slot by ID",
        "operationId": "edit-block-slot",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "example1": {
                "summary": "Event ID",
                "value": "ocQHyuzHvysMo5N5VsXc"
              },
              "example2": {
                "summary": "Recurring Instance ID",
                "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSlotEditRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedSlotSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/{calendarId}/free-slots": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get Free Slots",
        "description": "Get free slots for a calendar between a date range. Optionally a consumer can also request free slots in a particular timezone and also for a particular user.",
        "operationId": "get-slots",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start Date (**⚠️ Important:** Date range cannot be more than 31 days)",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1548898600000
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End Date (**⚠️ Important:** Date range cannot be more than 31 days)",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1601490599999
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "The timezone in which the free slots are returned",
            "schema": {
              "type": "string",
              "example": "America/Chihuahua"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The user for whom the free slots are returned",
            "schema": {
              "type": "string",
              "example": "082goXVW3lIExEQPOnd3"
            }
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "The users for whom the free slots are returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSlotsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars.readonly"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/{calendarId}": {
      "put": {
        "tags": [
          "Calendars"
        ],
        "summary": "Update Calendar",
        "description": "Update calendar by ID.",
        "operationId": "update-calendar",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarUpdateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarByIdSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get Calendar",
        "description": "Get calendar by ID",
        "operationId": "get-calendar",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarByIdSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars.readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "Delete Calendar",
        "description": "Delete calendar by ID",
        "operationId": "delete-calendar",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDeleteSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/events/{eventId}": {
      "delete": {
        "tags": [
          "Calendar Events"
        ],
        "summary": "Delete Event",
        "description": "Delete event by ID",
        "operationId": "delete-event",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "example1": {
                "summary": "Event ID",
                "value": "ocQHyuzHvysMo5N5VsXc"
              },
              "example2": {
                "summary": "Recurring Instance ID",
                "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAppointmentSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEventSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/appointments/{appointmentId}/notes": {
      "get": {
        "tags": [
          "Appointment Notes"
        ],
        "summary": "Get Notes",
        "description": "Get Appointment Notes",
        "operationId": "get-appointment-notes",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of notes to fetch",
            "required": true,
            "schema": {
              "maximum": 20,
              "type": "number",
              "example": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of notes to fetch",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "number",
              "example": 0
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Appointment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNotesListSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Appointment Notes"
        ],
        "summary": "Create Note",
        "description": "Create Note",
        "operationId": "create-appointment-note",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Appointment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/appointments/{appointmentId}/notes/{noteId}": {
      "put": {
        "tags": [
          "Appointment Notes"
        ],
        "summary": "Update Note",
        "description": "Update Note",
        "operationId": "update-appointment-note",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Appointment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Appointment Notes"
        ],
        "summary": "Delete Note",
        "description": "Delete Note",
        "operationId": "delete-appointment-note",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Appointment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteNoteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/calendars/calendars/resources/{resourceType}/{id}": {
      "get": {
        "tags": [
          "Calendar Resources: Rooms & Equipments"
        ],
        "summary": "Get Calendar Resource",
        "description": "Get calendar resource by ID",
        "operationId": "get-calendar-resource",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "resourceType",
            "in": "path",
            "description": "Calendar Resource Type",
            "required": true,
            "schema": {
              "enum": [
                "equipments",
                "rooms"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Calendar Resource ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar resource fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResourceByIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Calendar Resources: Rooms & Equipments"
        ],
        "summary": "Update Calendar Resource",
        "description": "Update calendar resource by ID",
        "operationId": "update-calendar-resource",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "resourceType",
            "in": "path",
            "description": "Calendar Resource Type",
            "required": true,
            "schema": {
              "enum": [
                "equipments",
                "rooms"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Calendar Resource ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarResourceDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Calendar resource updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResourceResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Calendar Resources: Rooms & Equipments"
        ],
        "summary": "Delete Calendar Resource",
        "description": "Delete calendar resource by ID",
        "operationId": "delete-calendar-resource",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "resourceType",
            "in": "path",
            "description": "Calendar Resource Type",
            "required": true,
            "schema": {
              "enum": [
                "equipments",
                "rooms"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Calendar Resource ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar resource deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDeleteResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/calendars/calendars/resources/{resourceType}": {
      "get": {
        "tags": [
          "Calendar Resources: Rooms & Equipments"
        ],
        "summary": "List Calendar Resources",
        "description": "List calendar resources by resource type and location ID",
        "operationId": "fetch-calendar-resources",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "resourceType",
            "in": "path",
            "description": "Calendar Resource Type",
            "required": true,
            "schema": {
              "enum": [
                "equipments",
                "rooms"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar resources listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarResourceByIdResponseDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "calendars/resources.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Calendar Resources: Rooms & Equipments"
        ],
        "summary": "Create Calendar Resource",
        "description": "Create calendar resource by resource type",
        "operationId": "create-calendar-resource",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "resourceType",
            "in": "path",
            "description": "Calendar Resource Type",
            "required": true,
            "schema": {
              "enum": [
                "equipments",
                "rooms"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarResourceDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Calendar resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResourceByIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "calendars/resources.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/{calendarId}/notifications": {
      "get": {
        "tags": [
          "Calendar Notifications"
        ],
        "summary": "Get notifications",
        "description": "Get calendar notifications based on query",
        "operationId": "get-event-notification",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to return",
            "schema": {
              "type": "number",
              "default": 100
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip",
            "schema": {
              "type": "number",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarNotificationResponseDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Calendar Notifications"
        ],
        "summary": "Create notification",
        "description": "Create Calendar notifications, either one or multiple. All notification settings must be for single calendar only",
        "operationId": "create-event-notification",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateCalendarNotificationDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarNotificationResponseDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars/events.write"
            ]
          }
        ]
      }
    },
    "/calendars/calendars/{calendarId}/notifications/{notificationId}": {
      "get": {
        "tags": [
          "Calendar Notifications"
        ],
        "summary": "Get notification",
        "description": "Find Event notification by notificationId",
        "operationId": "find-event-notification",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarNotificationResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Calendar Notifications"
        ],
        "summary": "Update notification",
        "description": "Update Event notification by id",
        "operationId": "update-event-notification",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarNotificationsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarNotificationDeleteResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Calendar Notifications"
        ],
        "summary": "Delete Notification",
        "description": "Delete notification",
        "operationId": "delete-event-notification",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarNotificationDeleteResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/calendars/calendars/": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get Calendars",
        "description": "Get all calendars in a location.",
        "operationId": "get-calendars",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group Id",
            "schema": {
              "type": "string",
              "example": "BqTwX8QFwXzpegMve9EQ"
            }
          },
          {
            "name": "showDrafted",
            "in": "query",
            "description": "Show drafted",
            "schema": {
              "type": "boolean",
              "default": true,
              "example": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarsGetSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Create Calendar",
        "description": "Create calendar in a location.",
        "operationId": "create-calendar",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarCreateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarByIdSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "calendars.write"
            ]
          }
        ]
      }
    },
    "/links/links/id/{linkId}": {
      "get": {
        "tags": [
          "Trigger Links"
        ],
        "summary": "Get Link by ID",
        "description": "Get a single link by its ID",
        "operationId": "get-link-by-id",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ABCHkzuJQ8ZMd4Te84GK"
            }
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "Link Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLinkSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/links/links/{linkId}": {
      "put": {
        "tags": [
          "Trigger Links"
        ],
        "summary": "Update Link",
        "description": "Update Link",
        "operationId": "update-link",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "Link Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLinkSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "links.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Trigger Links"
        ],
        "summary": "Delete Link",
        "description": "Delete Link",
        "operationId": "delete-link",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "Link Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteLinksSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "links.write"
            ]
          }
        ]
      }
    },
    "/links/links/search": {
      "get": {
        "tags": [
          "Trigger Links Search"
        ],
        "summary": "Search Trigger Links",
        "description": "Get list of links by searching",
        "operationId": "search-trigger-links",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ABCHkzuJQ8ZMd4Te84GK"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search query as a string",
            "schema": {
              "type": "string",
              "example": "Search string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Numbers of query results to skip",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on number of search results",
            "schema": {
              "type": "number",
              "default": 20,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLinksSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/links/links/": {
      "get": {
        "tags": [
          "Trigger Links"
        ],
        "summary": "Get Links",
        "description": "Get Links",
        "operationId": "get-links",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLinksSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "links.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Trigger Links"
        ],
        "summary": "Create Link",
        "description": "Create Link",
        "operationId": "create-link",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinksDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLinkSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "links.write"
            ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/locations": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get locations by stripeId with companyId",
        "description": "Get locations by stripeCustomerId or stripeSubscriptionId with companyId",
        "operationId": "locations-deprecated",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Stripe customer ID to find locations for",
            "schema": {
              "type": "string"
            },
            "example": "cus_OD2oBjRfKEF6FV"
          },
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Stripe subscription ID to find locations for",
            "schema": {
              "type": "string"
            },
            "example": "sub_1NVqlLByVlfITvRXgirIdpyc"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company ID to filter locations",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "responses": {
          "200": {
            "description": "Locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/update-saas-subscription/{locationId}": {
      "put": {
        "tags": [
          "Saas"
        ],
        "summary": "Update SaaS subscription",
        "description": "Update SaaS subscription for given locationId and customerId",
        "operationId": "update-saas-subscription-deprecated",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location ID to update subscription for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AUKAtFVo0lWezBsBQ3FE"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SaaS subscription updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/bulk-disable-saas/{companyId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Disable SaaS for locations",
        "description": "Disable SaaS for locations for given locationIds",
        "operationId": "bulk-disable-saas-deprecated",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company ID to disable SaaS for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDisableSaasDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SaaS disabled successfully for locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDisableSaasResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/enable-saas/{locationId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Enable SaaS for Sub-Account (Formerly Location)",
        "description": "<div>\n                  <p>Enable SaaS for Sub-Account (Formerly Location) based on the data provided</p>\n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                          This feature is only available on Agency Pro ($497) plan.\n                        </strong>\n                      </span>\n                  </div>\n                </div>\n    ",
        "operationId": "enable-saas-location-deprecated",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location ID to enable SaaS for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AUKAtFVo0lWezBsBQ3FE"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableSaasDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SaaS enabled successfully for location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnableSaasResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/pause/{locationId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Pause location",
        "description": "Pause Sub account for given locationId",
        "operationId": "pause-location-deprecated",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location ID to pause/unpause",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AUKAtFVo0lWezBsBQ3FE"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseLocationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Location paused/unpaused successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/update-rebilling/{companyId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Update Rebilling",
        "description": "Bulk update rebilling for given locationIds",
        "operationId": "update-rebilling-deprecated",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company ID to update rebilling for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRebillingDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Rebilling updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRebillingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/agency-plans/{companyId}": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get Agency Plans",
        "description": "Fetch all agency subscription plans for a given company ID",
        "operationId": "get-agency-plans-deprecated",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company ID to get agency plans for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "responses": {
          "200": {
            "description": "Agency plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgencyPlanResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/get-saas-subscription/{locationId}": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get Location Subscription Details",
        "description": "Fetch subscription details for a specific location from location metadata",
        "operationId": "get-location-subscription-deprecated",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location ID to get subscription details for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AUKAtFVo0lWezBsBQ3FE"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company ID to filter subscription details",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "responses": {
          "200": {
            "description": "Location subscription details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationSubscriptionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/bulk-enable-saas/{companyId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Bulk Enable SaaS",
        "description": "Enable SaaS mode for multiple locations with support for both SaaS v1 and v2",
        "operationId": "bulk-enable-saas-deprecated",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company ID to enable SaaS for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkEnableSaasRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bulk SaaS enable operation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkEnableSaasResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/saas-locations/{companyId}": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get SaaS Locations",
        "description": "Fetch all SaaS-activated locations for a company with pagination",
        "operationId": "get-saas-locations-deprecated",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company ID to get SaaS locations for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "number"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "SaaS locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSaasLocationsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas-api/public-api/saas-plan/{planId}": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get SaaS Plan",
        "description": "Fetch a specific SaaS plan by plan ID",
        "operationId": "get-saas-plan-deprecated",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "path",
            "description": "Plan ID to get SaaS plan details for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "66c4d36534f21f900dc2a265"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company ID to filter SaaS plan",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "responses": {
          "200": {
            "description": "SaaS plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaasPlanResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/locations": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get locations by stripeId with companyId",
        "description": "Get locations by stripeCustomerId or stripeSubscriptionId with companyId",
        "operationId": "locations",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/update-saas-subscription/{locationId}": {
      "put": {
        "tags": [
          "Saas"
        ],
        "summary": "Update SaaS subscription",
        "description": "Update SaaS subscription for given locationId and customerId",
        "operationId": "generate-payment-link",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/bulk-disable-saas/{companyId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Disable SaaS for locations",
        "description": "Disable SaaS for locations for given locationIds",
        "operationId": "bulk-disable-saas",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDisableSaasDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/enable-saas/{locationId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Enable SaaS for Sub-Account (Formerly Location)",
        "description": "<div>\n                  <p>Enable SaaS for Sub-Account (Formerly Location) based on the data provided</p>\n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                          This feature is only available on Agency Pro ($497) plan.\n                        </strong>\n                      </span>\n                  </div>\n                </div>\n    ",
        "operationId": "enable-saas-location",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableSaasDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/pause/{locationId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Pause location",
        "description": "Pause Sub account for given locationId",
        "operationId": "pause-location",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseLocationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/update-rebilling/{companyId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Update Rebilling",
        "description": "Bulk update rebilling for given locationIds",
        "operationId": "update-rebilling",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRebillingDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/agency-plans/{companyId}": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get Agency Plans",
        "description": "Fetch all agency subscription plans for a given company ID",
        "operationId": "get-agency-plans",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/get-saas-subscription/{locationId}": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get Location Subscription Details",
        "description": "Fetch subscription details for a specific location from location metadata",
        "operationId": "get-location-subscription",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/bulk-enable-saas/{companyId}": {
      "post": {
        "tags": [
          "Saas"
        ],
        "summary": "Bulk Enable SaaS",
        "description": "Enable SaaS mode for multiple locations with support for both SaaS v1 and v2",
        "operationId": "bulk-enable-saas",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkEnableSaasRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/saas-locations/{companyId}": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get SaaS Locations",
        "description": "Fetch all SaaS-activated locations for a company with pagination",
        "operationId": "get-saas-locations",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/saas-api/saas/saas-plan/{planId}": {
      "get": {
        "tags": [
          "Saas"
        ],
        "summary": "Get SaaS Plan",
        "description": "Fetch a specific SaaS plan by plan ID",
        "operationId": "get-saas-plan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/email-isv/email/verify": {
      "post": {
        "tags": [
          "Email Verification"
        ],
        "summary": "Email Verification",
        "description": "Verify Email",
        "operationId": "verify-email",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id, The email verification charges will be deducted from this location (if rebilling is enabled) / company wallet",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EmailVerifiedResponseDto"
                    },
                    {
                      "$ref": "#/components/schemas/EmailNotVerifiedResponseDto"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/contacts/contacts/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search Contacts",
        "description": "Search contacts based on combinations of advanced filters. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-158396/6e629989abe7fad",
        "externalDocs": {
          "description": "Click here for more information",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-158396/6e629989abe7fad"
        },
        "operationId": "search-contacts-advanced",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchBodyV2DTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/search/duplicate": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get Duplicate Contact",
        "description": "Get Duplicate Contact.<br/><br/>If `Allow Duplicate Contact` is disabled under Settings, the global unique identifier will be used for searching the contact. If the setting is enabled, first priority for search is `email` and the second priority will be `phone`.",
        "operationId": "get-duplicate-contact",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sadadya1u12basyhasd"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Phone Number - Pass in URL Encoded form. i.e +1423164516 will become `%2B1423164516`",
            "schema": {
              "type": "string",
              "example": "+1423164516"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email - Pass in URL Encoded form. i.e test+abc@gmail.com will become `test%2Babc%40gmail.com`",
            "schema": {
              "type": "string",
              "example": "abc@abc.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get all Tasks",
        "description": "Get all Tasks",
        "operationId": "get-all-tasks",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksListSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create Task",
        "description": "Create Task",
        "operationId": "create-task",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskByIsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get Task",
        "description": "Get Task",
        "operationId": "get-task",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskByIsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update Task",
        "description": "Update Task",
        "operationId": "update-task",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskByIsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete Task",
        "description": "Delete Task",
        "operationId": "delete-task",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTaskSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/tasks/{taskId}/completed": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update Task Completed",
        "description": "Update Task Completed",
        "operationId": "update-task-completed",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskStatusParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskByIsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/appointments": {
      "get": {
        "tags": [
          "Appointments"
        ],
        "summary": "Get Appointments for Contact",
        "description": "Get Appointments for Contact",
        "operationId": "get-appointments-for-contact",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/tags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Add Tags",
        "description": "Add Tags",
        "operationId": "add-tags",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAddTagSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove Tags",
        "description": "Remove Tags",
        "operationId": "remove-tags",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDeleteTagSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/notes": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Get All Notes",
        "description": "Get All Notes",
        "operationId": "get-all-notes",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNotesListSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Create Note",
        "description": "Create Note",
        "operationId": "create-note",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/notes/{id}": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Get Note",
        "description": "Get Note",
        "operationId": "get-note",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Note Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Notes"
        ],
        "summary": "Update Note",
        "description": "Update Note",
        "operationId": "update-note",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Note Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Notes"
        ],
        "summary": "Delete Note",
        "description": "Delete Note",
        "operationId": "delete-note",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Note Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteNoteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/bulk/tags/update/{type}": {
      "post": {
        "tags": [
          "Bulk"
        ],
        "summary": "Update Contacts Tags",
        "description": "Allows you to update tags to multiple contacts at once, you can add or remove tags from the contacts",
        "operationId": "create-association",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Tags operation type",
            "required": true,
            "schema": {
              "enum": [
                "add",
                "remove"
              ],
              "type": "string"
            },
            "example": "add"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTagsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/contacts/bulk/business": {
      "post": {
        "tags": [
          "Bulk"
        ],
        "summary": "Add/Remove Contacts From Business",
        "description": "Add/Remove Contacts From Business . Passing a `null` businessId will remove the businessId from the contacts",
        "operationId": "add-remove-contact-from-business",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactsBusinessUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsBulkUpateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get Contact",
        "description": "Get Contact",
        "operationId": "get-contact",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsByIdSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update Contact",
        "description": "Please find the list of acceptable values for the `country` field  <a href=\"https://highlevel.stoplight.io/docs/integrations/ZG9jOjI4MzUzNDIy-country-list\" target=\"_blank\">here</a>",
        "operationId": "update-contact",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateContactsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete Contact",
        "description": "Delete Contact",
        "operationId": "delete-contact",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ocQHyuzHvysMo5N5VsXc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteContactsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/upsert": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Upsert Contact",
        "description": "Please find the list of acceptable values for the `country` field  <a href=\"https://highlevel.stoplight.io/docs/integrations/ZG9jOjI4MzUzNDIy-country-list\" target=\"_blank\">here</a><br/><br/>The Upsert API will adhere to the configuration defined under the “Allow Duplicate Contact” setting at the Location level. If the setting is configured to check both Email and Phone, the API will attempt to identify an existing contact based on the priority sequence specified in the setting, and will create or update the contact accordingly.<br/><br/>If two separate contacts already exist—one with the same email and another with the same phone—and an upsert request includes both the email and phone, the API will update the contact that matches the first field in the configured sequence, and ignore the second field to prevent duplication.",
        "operationId": "upsert-contact",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertContactDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertContactsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/business/{businessId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get Contacts By BusinessId",
        "description": "Get Contacts By BusinessId",
        "operationId": "get-contacts-by-businessId",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "25",
              "example": "10"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5DP4iH6HLkQsiKESj6rh"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "0",
              "example": "10"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "contact name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsSearchSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/followers": {
      "post": {
        "tags": [
          "Followers"
        ],
        "summary": "Add Followers",
        "description": "Add Followers",
        "operationId": "add-followers-contact",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302Lunr"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowersDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAddFollowersSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Followers"
        ],
        "summary": "Remove Followers",
        "description": "Remove Followers",
        "operationId": "remove-followers-contact",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302Lunr"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowersDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFollowersSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/campaigns/{campaignId}": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Add Contact to Campaign",
        "description": "Add contact to Campaign",
        "operationId": "add-contact-to-campaign",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3bZD1nQzbul0MCancbQD"
            }
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "Campaigns Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Y2I9XM7aO1hncuSOlc9L"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactToCampaignDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDeleteCantactsCampaignsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Remove Contact From Campaign",
        "description": "Remove Contact From Campaign",
        "operationId": "remove-contact-from-campaign",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3bZD1nQzbul0MCancbQD"
            }
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "Campaigns Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Y2I9XM7aO1hncuSOlc9L"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDeleteCantactsCampaignsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/campaigns/removeAll": {
      "delete": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Remove Contact From Every Campaign",
        "description": "Remove Contact From Every Campaign",
        "operationId": "remove-contact-from-every-campaign",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3bZD1nQzbul0MCancbQD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDeleteCantactsCampaignsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/{contactId}/workflow/{workflowId}": {
      "post": {
        "tags": [
          "Workflow"
        ],
        "summary": "Add Contact to Workflow",
        "description": "Add Contact to Workflow",
        "operationId": "add-contact-to-workflow",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "description": "Workflow Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsWorkflowSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Workflow"
        ],
        "summary": "Delete Contact from Workflow",
        "description": "Delete Contact from Workflow",
        "operationId": "delete-contact-from-workflow",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "description": "Workflow Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302LLNR"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsWorkflowSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/contacts/": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create Contact",
        "description": "Please find the list of acceptable values for the `country` field  <a href=\"https://highlevel.stoplight.io/docs/integrations/ZG9jOjI4MzUzNDIy-country-list\" target=\"_blank\">here</a>",
        "operationId": "create-contact",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateContactsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "contacts.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get Contacts",
        "description": "Get Contacts\n\n **Note:** This API endpoint is deprecated. Please use the [Search Contacts](https://highlevel.stoplight.io/docs/integrations/dbe4f3a00a106-search-contacts) endpoint instead.",
        "operationId": "get-contacts",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          },
          {
            "name": "startAfterId",
            "in": "query",
            "description": "Start After Id",
            "schema": {
              "type": "string",
              "example": "UIaE1WjAwWKdlyD7osQI"
            }
          },
          {
            "name": "startAfter",
            "in": "query",
            "description": "Start Afte",
            "schema": {
              "type": "number",
              "example": 1603870249758
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Contact Query",
            "schema": {
              "type": "string",
              "example": "John"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit Per Page records count. will allow maximum up to 100 and default will be 20",
            "schema": {
              "type": "number",
              "default": 20,
              "example": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsSearchSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "bearer": [
              "contacts.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/integrations/provider/whitelabel": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Create White-label Integration Provider",
        "description": "The \"Create White-label Integration Provider\" API allows adding a new payment provider integration to the system which is built on top of Authorize.net or NMI. Use this endpoint to create a integration provider with the specified details. Ensure that the required information is provided in the request payload. This endpoint can be only invoked using marketplace-app token",
        "operationId": "create-integration provider",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWhiteLabelIntegrationProviderDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWhitelabelIntegrationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/integration.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "List White-label Integration Providers",
        "description": "The \"List White-label Integration Providers\" API allows to retrieve a paginated list of integration providers. Customize your results by filtering whitelabel integration providers(which are built directly on top of Authorize.net or NMI) based on name or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve integration provider information.",
        "operationId": "list-integration-providers",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6578278e879ad2646715ba9c"
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            },
            "example": "location"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 0
            },
            "example": 20
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWhitelabelIntegrationProviderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/integration.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "List Orders",
        "description": "The \"List Orders\" API allows to retrieve a paginated list of orders. Customize your results by filtering orders based on name, alt type, order status, payment mode, date range, type of source, contact, funnel products or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve order information.",
        "operationId": "list-orders",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "LocationId is the id of the sub-account.",
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          {
            "name": "altId",
            "in": "query",
            "description": "AltId is the unique identifier e.g: location id.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          {
            "name": "altType",
            "in": "query",
            "description": "AltType is the type of identifier.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "location"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Order status.",
            "schema": {
              "type": "string"
            },
            "example": "completed"
          },
          {
            "name": "paymentMode",
            "in": "query",
            "description": "Mode of payment.",
            "schema": {
              "type": "string"
            },
            "example": "live"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Starting interval of orders.",
            "schema": {
              "type": "string"
            },
            "example": "2024-02-01"
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "Closing interval of orders.",
            "schema": {
              "type": "string"
            },
            "example": "2024-02-13"
          },
          {
            "name": "search",
            "in": "query",
            "description": "The name of the order for searching.",
            "schema": {
              "type": "string"
            },
            "example": "Awesome order"
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact id for filtering of orders.",
            "schema": {
              "type": "string"
            },
            "example": "XPLSw2SVagl12LMDeTmQ"
          },
          {
            "name": "funnelProductIds",
            "in": "query",
            "description": "Funnel product ids separated by comma.",
            "schema": {
              "type": "string"
            },
            "example": "61dd0c7dc077f712a5f787ff,61d6afc9d39ac5e35965c017"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 10
            },
            "example": 20
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrdersResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/orders.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order by ID",
        "description": "The \"Get Order by ID\" API allows to retrieve information for a specific order using its unique identifier. Use this endpoint to fetch details for a single order based on the provided order ID.",
        "operationId": "get-order-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be returned",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "653f5e0cde5a1314e62a837c"
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "LocationId is the id of the sub-account.",
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          {
            "name": "altId",
            "in": "query",
            "description": "AltId is the unique identifier e.g: location id.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/orders.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/orders/{orderId}/record-payment": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Record Order Payment",
        "description": "The \"Record Order Payment\" API allows to record a payment for an order. Use this endpoint to record payment for an order and update the order status to \"Paid\".",
        "operationId": "record-order-payment",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "MongoDB Order ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5e2d4c8e0e8b4e001c1c4f5d"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRecordOrderPaymentBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostRecordOrderPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/orders.collectPayment"
            ]
          }
        ]
      }
    },
    "/payments/payments/orders/migrate-order-ps": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "migration Endpoint for Order Payment Status",
        "description": "Process to migrate all the older orders and based on the statuses introduce the payment statuses as well",
        "operationId": "post-migrate-order-payment-status",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "LocationId is the id of the sub-account.",
            "schema": {
              "type": "string",
              "example": "3SwdhCu3svxI8AKsPJt6"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "AltId is the unique identifier e.g: location id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3SwdhCu3svxI8AKsPJt6"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/payments/payments/orders/{orderId}/fulfillments": {
      "post": {
        "tags": [
          "Order fulfillments"
        ],
        "summary": "Create order fulfillment",
        "description": "The \"Order Fulfillment\" API facilitates the process of fulfilling an order.",
        "operationId": "create-order-fulfillment",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be returned",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "653f5e0cde5a1314e62a837c"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFulfillmentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateFulfillmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/orders.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Order fulfillments"
        ],
        "summary": "List fulfillment",
        "description": "List all fulfillment history of an order",
        "operationId": "list-order-fulfillment",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6578278e879ad2646715ba9c"
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be returned",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "653f5e0cde5a1314e62a837c"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFulfillmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/orders.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/orders/{orderId}/notes": {
      "get": {
        "tags": [
          "Order Notes"
        ],
        "summary": "List Order Notes",
        "description": "List all notes of an order",
        "operationId": "list-order-notes",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "653f5e0cde5a1314e62a837c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/payments/payments/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "List Transactions",
        "description": "The \"List Transactions\" API allows to retrieve a paginated list of transactions. Customize your results by filtering transactions based on name, alt type, transaction status, payment mode, date range, type of source, contact, subscription id, entity id or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve transaction information.",
        "operationId": "list-transactions",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "LocationId is the id of the sub-account.",
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          {
            "name": "altId",
            "in": "query",
            "description": "AltId is the unique identifier e.g: location id.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          {
            "name": "altType",
            "in": "query",
            "description": "AltType is the type of identifier.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "location"
          },
          {
            "name": "paymentMode",
            "in": "query",
            "description": "Mode of payment.",
            "schema": {
              "type": "string"
            },
            "example": "live"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Starting interval of transactions.",
            "schema": {
              "type": "string"
            },
            "example": "2024-02-01"
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "Closing interval of transactions.",
            "schema": {
              "type": "string"
            },
            "example": "2024-02-13"
          },
          {
            "name": "entitySourceType",
            "in": "query",
            "description": "Source of the transactions.",
            "schema": {
              "type": "string"
            },
            "example": "funnel"
          },
          {
            "name": "entitySourceSubType",
            "in": "query",
            "description": "Source sub-type of the transactions.",
            "schema": {
              "type": "string"
            },
            "example": "two_step_order_form"
          },
          {
            "name": "search",
            "in": "query",
            "description": "The name of the transaction for searching.",
            "schema": {
              "type": "string"
            },
            "example": "Awesome transaction"
          },
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription id for filtering of transactions.",
            "schema": {
              "type": "string"
            },
            "example": "sub_1KGcXDCScnf89tZoVkoEMCEL"
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "Entity id for filtering of transactions.",
            "schema": {
              "type": "string"
            },
            "example": "61dd0fe9c077f73e67f78803"
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact id for filtering of transactions.",
            "schema": {
              "type": "string"
            },
            "example": "XPLSw2SVagl12LMDeTmQ"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 10
            },
            "example": 20
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTxnsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/transactions.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/transactions/{transactionId}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get Transaction by ID",
        "description": "The \"Get Transaction by ID\" API allows to retrieve information for a specific transaction using its unique identifier. Use this endpoint to fetch details for a single transaction based on the provided transaction ID.",
        "operationId": "get-transaction-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "ID of the transaction that needs to be returned",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "61dd0feac077f72010f78804"
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "LocationId is the id of the sub-account.",
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          {
            "name": "altId",
            "in": "query",
            "description": "AltId is the unique identifier e.g: location id.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          {
            "name": "altType",
            "in": "query",
            "description": "AltType is the type of identifier.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "location"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTxnResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/transactions.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "List Subscriptions",
        "description": "The \"List Subscriptions\" API allows to retrieve a paginated list of subscriptions. Customize your results by filtering subscriptions based on name, alt type, subscription status, payment mode, date range, type of source, contact, subscription id, entity id, contact or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve subscription information.",
        "operationId": "list-subscriptions",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "AltId is the unique identifier e.g: location id.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          {
            "name": "altType",
            "in": "query",
            "description": "AltType is the type of identifier.",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            },
            "example": "location"
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "Entity id for filtering of subscriptions.",
            "schema": {
              "type": "string"
            },
            "example": "61dd0fe9c077f73e67f78803"
          },
          {
            "name": "paymentMode",
            "in": "query",
            "description": "Mode of payment.",
            "schema": {
              "type": "string"
            },
            "example": "live"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Starting interval of subscriptions.",
            "schema": {
              "type": "string"
            },
            "example": "2024-02-01"
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "Closing interval of subscriptions.",
            "schema": {
              "type": "string"
            },
            "example": "2024-02-13"
          },
          {
            "name": "entitySourceType",
            "in": "query",
            "description": "Source of the subscriptions.",
            "schema": {
              "type": "string"
            },
            "example": "funnel"
          },
          {
            "name": "search",
            "in": "query",
            "description": "The name of the subscription for searching.",
            "schema": {
              "type": "string"
            },
            "example": "Awesome subscription"
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact ID for the subscription",
            "schema": {
              "type": "string"
            },
            "example": "AmuzcoPBpgKeccNsFlib"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Subscription id for filtering of subscriptions.",
            "schema": {
              "type": "string"
            },
            "example": "64bf78af39118e4011926cba"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 10
            },
            "example": 20
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSubscriptionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/subscriptions.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get Subscription by ID",
        "description": "The \"Get Subscription by ID\" API allows to retrieve information for a specific subscription using its unique identifier. Use this endpoint to fetch details for a single subscription based on the provided subscription ID.",
        "operationId": "get-subscription-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription that needs to be returned",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6322e9c9e39fc14ab3ed7042"
          },
          {
            "name": "altId",
            "in": "query",
            "description": "AltId is the unique identifier e.g: location id.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          {
            "name": "altType",
            "in": "query",
            "description": "AltType is the type of identifier.",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            },
            "example": "location"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubscriptionResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Subscription not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/subscriptions.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/coupon/list": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "List Coupons",
        "description": "The \"List Coupons\" API allows you to retrieve a list of all coupons available in your location. Use this endpoint to view all promotional offers and special discounts for your customers.",
        "operationId": "list-coupons",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "BQdAwxa0ky1iK2sstLGJ"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of coupons to return",
            "schema": {
              "type": "number",
              "default": 100,
              "example": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of coupons to skip for pagination",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter coupons by status",
            "schema": {
              "enum": [
                "scheduled",
                "active",
                "expired"
              ],
              "type": "string",
              "example": "active"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter coupons by name or code",
            "schema": {
              "type": "string",
              "example": "DEAL50"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCouponsResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/coupons.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/coupon": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Create Coupon",
        "description": "The \"Create Coupon\" API allows you to create a new promotional coupon with customizable parameters such as discount amount, validity period, usage limits, and applicable products. Use this endpoint to set up promotional offers and special discounts for your customers.",
        "operationId": "create-coupon",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCouponParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCouponResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/coupons.write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Update Coupon",
        "description": "The \"Update Coupon\" API enables you to modify existing coupon details such as discount values, validity periods, usage limits, and other promotional parameters. Use this endpoint to adjust or extend promotional offers for your customers.",
        "operationId": "update-coupon",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCouponParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCouponResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/coupons.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Coupons"
        ],
        "summary": "Delete Coupon",
        "description": "The \"Delete Coupon\" API allows you to permanently remove a coupon from your system using its unique identifier. Use this endpoint to discontinue promotional offers or clean up unused coupons. Note that this action cannot be undone.",
        "operationId": "delete-coupon",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCouponParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCouponResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/coupons.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Fetch Coupon",
        "description": "The \"Get Coupon Details\" API enables you to retrieve comprehensive information about a specific coupon using either its unique identifier or promotional code. Use this endpoint to view coupon parameters, usage statistics, validity periods, and other promotional details.",
        "operationId": "get-coupon",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "BQdAwxa0ky1iK2sstLGJ"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Coupon id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6241712be68f7a98102ba272"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Coupon code",
            "required": true,
            "schema": {
              "type": "string",
              "example": "DEAL50"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCouponResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/coupons.readonly"
            ]
          }
        ]
      }
    },
    "/payments/payments/custom-provider/provider": {
      "post": {
        "tags": [
          "Custom Provider"
        ],
        "summary": "Create new integration",
        "description": "API to create a new association for an app and location",
        "operationId": "create-integration",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Lk3nlfk4lxlelVEwcW"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomProvidersDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomProvidersResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/custom-provider.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Provider"
        ],
        "summary": "Deleting an existing integration",
        "description": "API to delete an association for an app and location",
        "operationId": "delete-integration",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Lk3nlfk4lxlelVEwcW"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCustomProvidersResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/custom-provider.write"
            ]
          }
        ]
      }
    },
    "/payments/payments/custom-provider/connect": {
      "get": {
        "tags": [
          "Custom Provider"
        ],
        "summary": "Fetch given provider config",
        "description": "API for fetching an existing payment config for given location",
        "operationId": "fetch-config",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Lk3nlfk4lxlelVEwcW"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomProvidersResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "No such config exists for given locationId and marketplaceAppId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/custom-provider.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Provider"
        ],
        "summary": "Create new provider config",
        "description": "API to create a new payment config for given location",
        "operationId": "create-config",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Lk3nlfk4lxlelVEwcW"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectCustomProvidersConfigDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectCustomProvidersResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "No such config exists for given locationId and marketplaceAppId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/custom-provider.write"
            ]
          }
        ]
      }
    },
    "/payments/payments/custom-provider/disconnect": {
      "post": {
        "tags": [
          "Custom Provider"
        ],
        "summary": "Disconnect existing provider config",
        "description": "API to disconnect an existing payment config for given location",
        "operationId": "disconnect-config",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Lk3nlfk4lxlelVEwcW"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCustomProvidersConfigDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisconnectCustomProvidersResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "No such config exists for given locationId and marketplaceAppId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/custom-provider.write"
            ]
          }
        ]
      }
    },
    "/payments/payments/custom-provider/capabilities": {
      "put": {
        "tags": [
          "Custom Provider"
        ],
        "summary": "Custom-provider marketplace app update capabilities",
        "description": "Toggle capabilities for the marketplace app tied to the OAuth client",
        "operationId": "custom-provider-marketplace-app-update-capabilities",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomProviderCapabilitiesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCustomProviderCapabilitiesResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "payments/custom-provider.write"
            ]
          }
        ]
      }
    },
    "/blogs/blogs/posts/url-slug-exists": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Check url slug",
        "description": "The \"Check url slug\" API allows check the blog slug validation which is needed before publishing any blog post. Please use blogs/check-slug.readonly. you can find the POST ID from the post edit url.",
        "operationId": "check-url-slug-exists",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "urlSlug",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "postId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "66f429b8afdce84227a4610d"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UrlSlugCheckResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "blogs/check-slug.readonly"
            ]
          }
        ]
      }
    },
    "/blogs/blogs/posts/{postId}": {
      "put": {
        "tags": [
          "Blogs"
        ],
        "summary": "Update Blog Post",
        "description": "The \"Update Blog Post\" API allows you update blog post for any given blog site. Please use blogs/post-update.write",
        "operationId": "update-blog-post",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBlogPostParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostUpdateResponseWrapperDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "blogs/post-update.write"
            ]
          }
        ]
      }
    },
    "/blogs/blogs/posts": {
      "post": {
        "tags": [
          "Blogs"
        ],
        "summary": "Create Blog Post",
        "description": "The \"Create Blog Post\" API allows you create blog post for any given blog site. Please use blogs/post.write",
        "operationId": "create-blog-post",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlogPostParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostCreateResponseWrapperDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "blogs/post.write"
            ]
          }
        ]
      }
    },
    "/blogs/blogs/authors": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get all authors",
        "description": "The \"Get all authors\" Api return the blog authors for a given location ID. Please use \"blogs/author.readonly\" ",
        "operationId": "get-all-blog-authors-by-location",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of authors to show in the listing",
            "required": true,
            "schema": {
              "type": "number"
            },
            "example": 5
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of authors to skip in listing",
            "required": true,
            "schema": {
              "type": "number"
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "blogs/author.readonly"
            ]
          }
        ]
      }
    },
    "/blogs/blogs/categories": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get all categories",
        "description": "The \"Get all categories\" Api return the blog categoies for a given location ID. Please use \"blogs/category.readonly\" ",
        "operationId": "get-all-categories-by-location",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of categories to show in the listing",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of categories to skip in listing",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "blogs/category.readonly"
            ]
          }
        ]
      }
    },
    "/blogs/blogs/posts/all": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get Blog posts by Blog ID",
        "description": "The \"Get Blog posts by Blog ID\" API allows you get blog posts for any given blog site using blog ID.Please use blogs/posts.readonly",
        "operationId": "get-blog-post",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "blogId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "66f429b8afdce84227a4610d"
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            },
            "example": 4
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            },
            "example": 0
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "search for any post by name",
            "schema": {
              "type": "string"
            },
            "example": "ai news"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "enum": [
                "PUBLISHED",
                "SCHEDULED",
                "ARCHIVED",
                "DRAFT"
              ],
              "type": "string"
            },
            "example": "PUBLISHED"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostGetResponseWrapperDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "blogs/posts.readonly"
            ]
          }
        ]
      }
    },
    "/blogs/blogs/site/all": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get Blogs by Location ID",
        "description": "The \"Get Blogs by Location ID\" API allows you get blogs using Location ID.Please use blogs/list.readonly",
        "operationId": "get-blogs",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "skip",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            },
            "example": 4
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "search for any post by name",
            "schema": {
              "type": "string"
            },
            "example": "ai news"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogGetResponseWrapperDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "blogs/list.readonly"
            ]
          }
        ]
      }
    },
    "/voice-ai/voice-ai/agents": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Create Agent",
        "description": "Create a new voice AI agent configuration and settings",
        "operationId": "create-agent",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCreationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAgentResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-agents.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List Agents",
        "description": "Retrieve a paginated list of agents for given location.",
        "operationId": "get-agents",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number starting from 1",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "number",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "number",
              "default": 10,
              "example": 10
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent list retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAgentsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-agents.readonly"
            ]
          }
        ]
      }
    },
    "/voice-ai/voice-ai/agents/{agentId}": {
      "patch": {
        "tags": [
          "Agents"
        ],
        "summary": "Patch Agent",
        "description": "Partially update an existing voice AI agent",
        "operationId": "patch-agent",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "Unique agent identifier",
            "required": true,
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LOC123456789ABCDEF"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchAgentDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Agent updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAgentResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-agents.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get Agent",
        "description": "Retrieve detailed configuration and settings for a specific voice AI agent",
        "operationId": "get-agent",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "Unique agent identifier",
            "required": true,
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LOC123456789ABCDEF"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAgentResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-agents.readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "summary": "Delete Agent",
        "description": "Delete a voice AI agent and all its configurations",
        "operationId": "delete-agent",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "Unique agent identifier",
            "required": true,
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LOC123456789ABCDEF"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Agent deleted successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-agents.write"
            ]
          }
        ]
      }
    },
    "/voice-ai/voice-ai/dashboard/call-logs": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "List Call Logs",
        "description": "Returns call logs for Voice AI agents scoped to a location. Supports filtering by agent, contact, call type, action types, and date range (interpreted in the provided IANA timezone). Also supports sorting and 1-based pagination.",
        "operationId": "get-call-logs",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location identifier. Filters results to this location.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentId",
            "in": "query",
            "description": "Agent identifier. When provided, returns logs for this agent only.",
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact IDs (comma-separated) to filter by.",
            "schema": {
              "type": "string",
              "example": "contact123,contact456"
            }
          },
          {
            "name": "callType",
            "in": "query",
            "description": "Call type filter.",
            "schema": {
              "enum": [
                "LIVE",
                "TRIAL"
              ],
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date filter (Unix timestamp). Must be less than endDate. Both startDate and endDate must be provided together.",
            "schema": {
              "type": "number",
              "example": 1679308800000
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date filter (Unix timestamp). Must be greater than startDate. Both startDate and endDate must be provided together.",
            "schema": {
              "type": "number",
              "example": 1679395199000
            }
          },
          {
            "name": "actionType",
            "in": "query",
            "description": "Action type filter for call logs (comma-separated ACTION_TYPE values)",
            "schema": {
              "enum": [
                "CALL_TRANSFER",
                "DATA_EXTRACTION",
                "IN_CALL_DATA_EXTRACTION",
                "WORKFLOW_TRIGGER",
                "SMS",
                "APPOINTMENT_BOOKING",
                "CUSTOM_ACTION",
                "KNOWLEDGE_BASE"
              ],
              "type": "string",
              "example": "SMS,CALL_TRANSFER,WORKFLOW_TRIGGER"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by. Defaults to newest if omitted.",
            "schema": {
              "enum": [
                "duration",
                "createdAt"
              ],
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort direction. Applies only when sortBy is provided.",
            "schema": {
              "enum": [
                "ascend",
                "descend"
              ],
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based).",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (max 50).",
            "schema": {
              "type": "number",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved call logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallLogsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-dashboard.readonly"
            ]
          }
        ]
      }
    },
    "/voice-ai/voice-ai/dashboard/call-logs/{callId}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get Call Log",
        "description": "Returns a call log by callId.",
        "operationId": "getCallLog",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "callId",
            "in": "path",
            "description": "Call ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LOC123456789ABCDEF"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved call log",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallLogDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-dashboard.readonly"
            ]
          }
        ]
      }
    },
    "/voice-ai/voice-ai/actions": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Create Agent Action",
        "description": "Create a new action for a voice AI agent. Actions define specific behaviors and capabilities for the agent during calls.",
        "operationId": "create-action",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSingleActionDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Action created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateActionResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-agent-goals.write"
            ]
          }
        ]
      }
    },
    "/voice-ai/voice-ai/actions/{actionId}": {
      "put": {
        "tags": [
          "Actions"
        ],
        "summary": "Update Agent Action",
        "description": "Update an existing action for a voice AI agent. Modifies the behavior and configuration of an agent action.",
        "operationId": "update-action",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "Unique identifier for the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSingleActionDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Action updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateActionResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-agent-goals.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get Agent Action",
        "description": "Retrieve details of a specific action by its ID. Returns the action configuration including actionParameters.",
        "operationId": "get-action",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "Unique identifier for the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LOC123456789ABCDEF"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActionResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-agent-goals.readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Actions"
        ],
        "summary": "Delete Agent Action",
        "description": "Delete an existing action from a voice AI agent. This permanently removes the action and its configuration.",
        "operationId": "delete-action",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "Unique identifier for the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "LOC123456789ABCDEF"
            }
          },
          {
            "name": "agentId",
            "in": "query",
            "description": "Agent ID the action is attached to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action deleted successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "voice-ai-agent-goals.write"
            ]
          }
        ]
      }
    },
    "/locations/locations/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search",
        "description": "Search Sub-Account (Formerly Location)",
        "operationId": "search-locations",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "The company/agency id on which you want to perform the search",
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The value by which the results should be skipped. Default will be 0",
            "schema": {
              "type": "string",
              "default": "0"
            },
            "example": "1"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The value by which the results should be limited. Default will be 10",
            "schema": {
              "type": "string",
              "default": "10"
            },
            "example": "10"
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order in which the results should be returned - Allowed values asc, desc. Default will be asc",
            "schema": {
              "type": "string",
              "default": "asc"
            },
            "example": "asc"
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "johndoe@mail.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "locations.readonly"
            ]
          },
          {
            "Location-Access": [
              "locations.readonly"
            ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}": {
      "get": {
        "tags": [
          "Sub-Account (Formerly Location)"
        ],
        "summary": "Get Sub-Account (Formerly Location)",
        "description": "Get details of a Sub-Account (Formerly Location) by passing the sub-account id",
        "operationId": "get-location",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationByIdSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "locations.readonly"
            ]
          },
          {
            "Agency-Access": [
              "locations.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Sub-Account (Formerly Location)"
        ],
        "summary": "Put Sub-Account (Formerly Location)",
        "description": "Update a Sub-Account (Formerly Location) based on the data provided",
        "operationId": "put-location",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful update response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLocationSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "locations.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Sub-Account (Formerly Location)"
        ],
        "summary": "Delete Sub-Account (Formerly Location)",
        "description": "Delete a Sub-Account (Formerly Location) from the Agency",
        "operationId": "delete-location",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "deleteTwilioAccount",
            "in": "query",
            "description": "Boolean value to indicate whether to delete Twilio Account or not",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationDeletedSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "locations.internal-access-only"
            ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get Tags",
        "description": "Get Sub-Account (Formerly Location) Tags",
        "operationId": "get-location-tags",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationTagsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/tags.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create Tag",
        "description": "Create tag",
        "operationId": "create-tag",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationTagSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/tags.write"
            ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/tags/{tagId}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get tag by id",
        "description": "Get tag by id",
        "operationId": "get-tag-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "flGwEuzsfJOia1i1ikRN"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationTagSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Update tag",
        "description": "Update tag",
        "operationId": "update-tag",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "flGwEuzsfJOia1i1ikRN"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationTagSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete tag",
        "description": "Delete tag",
        "operationId": "delete-tag",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "flGwEuzsfJOia1i1ikRN"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationTagDeleteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/tasks/search": {
      "post": {
        "tags": [
          "Tasks Search"
        ],
        "summary": "Task Search Filter",
        "description": "Task Search",
        "operationId": "task-search",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskSearchParamsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationTaskListSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/tasks.readonly"
            ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/recurring-tasks/{id}": {
      "get": {
        "tags": [
          "Recurring Tasks"
        ],
        "summary": "Get Recurring Task By Id",
        "description": "Get Recurring Task By Id",
        "operationId": "get-recurring-task-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Recurring Task Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302Lunr"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302Lunr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringTaskSingleResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Recurring Tasks"
        ],
        "summary": "Update Recurring Task",
        "description": "Update Recurring Task",
        "operationId": "update-recurring-task",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Recurring Task Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302Lunr"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302Lunr"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringTaskUpdateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringTaskSingleResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Recurring Tasks"
        ],
        "summary": "Delete Recurring Task",
        "description": "Delete Recurring Task",
        "operationId": "delete-recurring-task",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Recurring Task Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302Lunr"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sx6wyHhbFdRXh302Lunr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRecurringTaskResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/recurring-tasks": {
      "post": {
        "tags": [
          "Recurring Tasks"
        ],
        "summary": "Create Recurring Task",
        "description": "Create Recurring Task",
        "operationId": "create-recurring-task",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringTaskCreateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringTaskSingleResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/customFields": {
      "get": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Get Custom Fields",
        "description": "Get Custom Fields",
        "operationId": "get-custom-fields",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "model",
            "in": "query",
            "description": "Model of the custom field you want to retrieve",
            "schema": {
              "enum": [
                "contact",
                "opportunity",
                "all"
              ],
              "type": "string"
            },
            "example": "opportunity"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldsListSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Create Custom Field",
        "description": "Create Custom Field",
        "operationId": "create-custom-field",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomFieldsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.write"
            ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/customFields/{id}": {
      "get": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Get Custom Field",
        "description": "Get Custom Field",
        "operationId": "get-custom-field",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Custom Field Id or Field Key (e.g. \"contact.first_name\" or \"opportunity.pipeline_id\")",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "id": {
                "summary": "Custom Field ID",
                "value": "00NhGCcN1tlO8ZHcu7Wb"
              },
              "field_key": {
                "summary": "Custom Field Key",
                "value": "contact.first_name"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Update Custom Field",
        "description": "Update Custom Field",
        "operationId": "update-custom-field",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Custom Field Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "00NhGCcN1tlO8ZHcu7Wb"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Delete Custom Field",
        "description": "Delete Custom Field",
        "operationId": "delete-custom-field",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Custom Field Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "00NhGCcN1tlO8ZHcu7Wb"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDeleteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/customFields/upload": {
      "post": {
        "tags": [
          "Custom Field"
        ],
        "summary": "Uploads File to customFields",
        "description": "Uploads File to customFields",
        "operationId": "upload-file-customFields",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.write"
            ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/customValues": {
      "get": {
        "tags": [
          "Custom Value"
        ],
        "summary": "Get Custom Values",
        "description": "Get Custom Values",
        "operationId": "get-custom-values",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomValuesListSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customValues.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Value"
        ],
        "summary": "Create Custom Value",
        "description": "Create Custom Value",
        "operationId": "create-custom-value",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValuesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomValueIdSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customValues.write"
            ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/customValues/{id}": {
      "get": {
        "tags": [
          "Custom Value"
        ],
        "summary": "Get Custom Value",
        "description": "Get Custom Value",
        "operationId": "get-custom-value",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Custom Value Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "kOBjMVAJhFuUeYIojVet"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomValueIdSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Custom Value"
        ],
        "summary": "Update Custom Value",
        "description": "Update Custom Value",
        "operationId": "update-custom-value",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Custom Value Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "kOBjMVAJhFuUeYIojVet"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValuesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomValueIdSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Value"
        ],
        "summary": "Delete Custom Value",
        "description": "Delete Custom Value",
        "operationId": "delete-custom-value",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Custom Value Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "kOBjMVAJhFuUeYIojVet"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomValueDeleteSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/timezones": {
      "get": {
        "tags": [
          "Timezone"
        ],
        "summary": "Fetch Timezones",
        "description": "Fetch the available timezones",
        "operationId": "get-timezones",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations.readonly"
            ]
          },
          {
            "Location-Access": [
              "locations.readonly"
            ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/templates": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "GET all or email/sms templates",
        "description": "GET all or email/sms templates",
        "operationId": "GET-all-or-email-sms-templates",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": false
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "0"
            },
            "example": "1"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "25"
            },
            "example": "25"
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "enum": [
                "sms",
                "email",
                "whatsapp"
              ],
              "type": "string"
            }
          },
          {
            "name": "originId",
            "in": "query",
            "description": "Origin Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTemplatesSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/templates.readonly"
            ]
          }
        ]
      }
    },
    "/locations/locations/{locationId}/templates/{id}": {
      "delete": {
        "tags": [
          "Template"
        ],
        "summary": "DELETE an email/sms template",
        "description": "DELETE an email/sms template",
        "operationId": "DELETE-an-email-sms-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/locations/locations/": {
      "post": {
        "tags": [
          "Sub-Account (Formerly Location)"
        ],
        "summary": "Create Sub-Account (Formerly Location)",
        "description": "<div>\n                  <p>Create a new Sub-Account (Formerly Location) based on the data provided</p> \n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                          This feature is only available on Agency Pro ($497) plan.\n                        </strong>\n                      </span>\n                  </div>\n                </div>\n    ",
        "operationId": "create-location",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLocationSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "locations.write"
            ]
          }
        ]
      }
    },
    "/proposals/proposals/document": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "List documents",
        "description": "List documents for a location",
        "operationId": "list-documents-contracts",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "hTlkh7t8gujsahgg93"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Document status, pass as comma separated values",
            "schema": {
              "enum": [
                "draft",
                "sent",
                "viewed",
                "completed",
                "accepted"
              ],
              "type": "string",
              "example": "draft"
            }
          },
          {
            "name": "paymentStatus",
            "in": "query",
            "description": "Payment status, pass as comma separated values",
            "schema": {
              "enum": [
                "waiting_for_payment",
                "paid",
                "no_payment"
              ],
              "type": "string",
              "example": "paid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit to fetch number of records",
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip number of records",
            "schema": {
              "type": "number",
              "example": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search string",
            "schema": {
              "type": "string",
              "example": "document"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Date start from (ISO 8601), dateFrom & DateTo must be provided together",
            "schema": {
              "type": "string",
              "example": "2025-02-03T18:30:00.000Z"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Date to (ISO 8601), dateFrom & DateTo must be provided together",
            "schema": {
              "type": "string",
              "example": "2025-02-14T18:29:59.999Z"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/proposals/proposals/document/send": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Send document",
        "description": "Send document to a client",
        "operationId": "send-documents-contracts",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDocumentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Document sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendDocumentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/proposals/proposals/templates": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "List templates",
        "description": "List document contract templates for a location",
        "operationId": "list-documents-contracts-templates",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "jhg64gjhb436fv"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Date start from (ISO 8601)",
            "schema": {
              "type": "string",
              "example": "2025-02-03T18:30:00.000Z"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Date to (ISO 8601)",
            "schema": {
              "type": "string",
              "example": "2025-02-14T18:29:59.999Z"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Comma-separated template types. Valid values: proposal, estimate, contentLibrary",
            "schema": {
              "type": "string",
              "example": "proposal,estimate"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Template Name",
            "schema": {
              "type": "string",
              "example": "Template Name"
            }
          },
          {
            "name": "isPublicDocument",
            "in": "query",
            "description": "If the docForm is a DocForm",
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id, required when isPublicDocument is true",
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip",
            "schema": {
              "type": "string",
              "example": "0"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Templates fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateListPaginationResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/proposals/proposals/templates/send": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Send template",
        "description": "Send template to a client",
        "operationId": "send-documents-contracts-template",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access Token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDocumentFromPublicApiBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Document sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/custom-menus/custom-menus/{customMenuId}": {
      "get": {
        "tags": [
          "Custom Menu Links"
        ],
        "summary": "Get Custom Menu Link",
        "description": "Fetches a single custom menus based on id. This endpoint allows clients to retrieve custom menu configurations, which may include menu items, categories, and associated metadata",
        "operationId": "get-custom-menu-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "customMenuId",
            "in": "path",
            "description": "Unique identifier of the custom menu",
            "required": true,
            "schema": {
              "type": "string",
              "example": "62e589c1-c456-47e1-a9a7-cb8900014311"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved custom menu. Returns a single custom menu object, potentially including its structure, items, and relevant metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleCustomMenusSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid query parameters provided."
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The client does not have necessary permissions to access custom menu."
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "custom-menu-link.readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Menu Links"
        ],
        "summary": "Delete Custom Menu Link",
        "description": "Removes a specific custom menu from the system. This operation requires authentication and proper permissions. The custom menu is identified by its unique ID, and the operation is performed within the context of a specific company.",
        "operationId": "delete-custom-menu",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "customMenuId",
            "in": "path",
            "description": "ID of the custom menu to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "62e589c1-c456-47e1-a9a7-cb8900014311"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom menu successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCustomMenuSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid parameters provided."
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The client does not have necessary permissions to delete this custom menu."
          },
          "404": {
            "description": "Not Found. The specified custom menu does not exist or has already been deleted."
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "custom-menu-link.write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Custom Menu Links"
        ],
        "summary": "Update Custom Menu Link",
        "description": "Updates an existing custom menu for a given company. Requires authentication and proper permissions.",
        "operationId": "update-custom-menu",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "customMenuId",
            "in": "path",
            "description": "ID of the custom menu to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "62e589c1-c456-47e1-a9a7-cb8900014311"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomMenuDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Custom menu successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCustomMenuLinkResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Not Found - Custom menu or company not found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "custom-menu-link.write"
            ]
          }
        ]
      }
    },
    "/custom-menus/custom-menus/": {
      "get": {
        "tags": [
          "Custom Menu Links"
        ],
        "summary": "Get Custom Menu Links",
        "description": "Fetches a collection of custom menus based on specified criteria. This endpoint allows clients to retrieve custom menu configurations, which may include menu items, categories, and associated metadata. The response can be tailored using query parameters for filtering, sorting, and pagination.",
        "operationId": "get-custom-menus",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Unique identifier of the location",
            "schema": {
              "type": "string",
              "example": "5DP4iH6HLkQsiKESj6rh"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip for pagination",
            "schema": {
              "minimum": 0,
              "type": "number",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return",
            "schema": {
              "minimum": 1,
              "type": "number",
              "default": 20,
              "example": 10
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search query to filter custom menus by name, supports partial || full names",
            "schema": {
              "type": "string",
              "example": "custom-menu-link-name"
            }
          },
          {
            "name": "showOnCompany",
            "in": "query",
            "description": "Filter to show only agency-level menu links. When omitted, fetches both agency and sub-account menu links. Ignored if locationId is provided",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved custom menus. Returns an array of custom menu objects, potentially including their structure, items, and relevant metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomMenusResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid query parameters provided."
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The client does not have necessary permissions to access custom menus."
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "custom-menu-link.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Menu Links"
        ],
        "summary": "Create Custom Menu Link",
        "description": "Creates a new custom menu for a company. Requires authentication and proper permissions. For Icon Usage Details please refer to  https://doc.clickup.com/8631005/d/h/87cpx-243696/d60fa70db6b92b2",
        "operationId": "create-custom-menu",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomMenuDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Custom menu successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleCustomMenusSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "custom-menu-link.write"
            ]
          }
        ]
      }
    },
    "/associations/associations/relations": {
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "Create Relation for you associated entities.",
        "description": "Create Relation.Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
        "externalDocs": {
          "description": "Click here for more information",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3"
        },
        "operationId": "create-relation",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRelationReqDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations/relation.write"
            ]
          }
        ]
      }
    },
    "/associations/associations/relations/{recordId}": {
      "get": {
        "tags": [
          "Relations"
        ],
        "summary": "Get all relations By record Id",
        "description": "Get all relations by record Id",
        "operationId": "get-relations-by-record-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Your Sub Account's ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "clF1LD04GTUKN3b3XuOj"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": "10"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": "100"
            }
          },
          {
            "name": "associationIds",
            "in": "query",
            "description": "Association Ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations/relation.readonly"
            ]
          }
        ]
      }
    },
    "/associations/associations/relations/{relationId}": {
      "delete": {
        "tags": [
          "Relations"
        ],
        "summary": "Delete Relation",
        "description": "Delete Relation",
        "operationId": "delete-relation",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Your Sub Account's ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "clF1LD04GTUKN3b3XuOj"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations/relation.write"
            ]
          }
        ]
      }
    },
    "/associations/associations/key/{key_name}": {
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Get association key by key name",
        "description": "Using this api you can get standard / user defined association by key",
        "operationId": "get-association-key-by-key-name",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "key_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations.readonly"
            ]
          }
        ]
      }
    },
    "/associations/associations/objectKey/{objectKey}": {
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Get association by object keys",
        "description": "Get association by object keys like contacts, custom objects and opportunities. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
        "externalDocs": {
          "description": "Click here for more information",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3"
        },
        "operationId": "get-association-by-object-keys",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "objectKey",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "custom_objects.car"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations.readonly"
            ]
          }
        ]
      }
    },
    "/associations/associations/{associationId}": {
      "put": {
        "tags": [
          "Associations"
        ],
        "summary": "Update Association By Id",
        "description": "Update Association , Allows you to update labels of an associations. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
        "externalDocs": {
          "description": "Click here for more information",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3"
        },
        "operationId": "update-association",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssociationReqDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Associations"
        ],
        "summary": "Delete Association",
        "description": "Delete USER_DEFINED Association By Id, deleting an association will also all the relations for that association",
        "operationId": "delete-association",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAssociationsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Get association by ID",
        "description": "Using this api you can get SYSTEM_DEFINED / USER_DEFINED association by id ",
        "operationId": "get-association-by-ID",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations.readonly"
            ]
          }
        ]
      }
    },
    "/associations/associations/": {
      "post": {
        "tags": [
          "Associations"
        ],
        "summary": "Create Association",
        "description": "Allow you to create contact - contact , contact - custom objects associations, will add more in the future.Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
        "externalDocs": {
          "description": "Click here for more information",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3"
        },
        "operationId": "create-association",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createAssociationReqDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Get all associations for a sub-account / location",
        "description": "Get all Associations",
        "operationId": "find-associations",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": "10"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "example": "100"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "associations.readonly"
            ]
          }
        ]
      }
    },
    "/forms/forms/submissions": {
      "get": {
        "tags": [
          "Forms"
        ],
        "summary": "Get Forms Submissions",
        "description": "Get Forms Submissions",
        "operationId": "get-forms-submissions",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page No. By default it will be 1",
            "schema": {
              "type": "number",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit Per Page records count. will allow maximum up to 100 and default will be 20",
            "schema": {
              "type": "number",
              "default": 20
            },
            "example": 20
          },
          {
            "name": "formId",
            "in": "query",
            "description": "Filter submission by form id",
            "schema": {
              "type": "string"
            },
            "example": "jjusM6EOngDExnbo2DbU"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter by contactId, name, email or phone no.",
            "schema": {
              "type": "string"
            },
            "example": "john@deo.com"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Get submission by starting of this date. By default it will be same date of last month(YYYY-MM-DD).",
            "schema": {
              "type": "string"
            },
            "example": "2020-11-14"
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "Get submission by ending of this date. By default it will be current date(YYYY-MM-DD).",
            "schema": {
              "type": "string"
            },
            "example": "2020-12-14"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormsSubmissionsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "forms.readonly"
            ]
          }
        ]
      }
    },
    "/forms/forms/upload-custom-files": {
      "post": {
        "tags": [
          "Forms"
        ],
        "summary": "Upload files to custom fields",
        "description": "Post the necessary fields for the API to upload files. The files need to be a buffer with the key \"< custom_field_id >_< file_id >\". <br /> Here custom field id is the ID of your custom field and file id is a randomly generated id (or uuid) <br /> There is support for multiple file uploads as well. Have multiple fields in the format mentioned.<br />File size is limited to 50 MB.<br /><br /> The allowed file types are: <br/> <ul><li>PDF</li><li>DOCX</li><li>DOC</li><li>JPG</li><li>JPEG</li><li>PNG</li><li>GIF</li><li>CSV</li><li>XLSX</li><li>XLS</li><li>MP4</li><li>MPEG</li><li>ZIP</li><li>RAR</li><li>TXT</li><li>SVG</li></ul> <br /><br /> The API will return the updated contact object.",
        "operationId": "upload-to-custom-fields",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact ID to upload the file to.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "dtEv6KtI27yF92YPm3Zz"
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID of the contact.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "quXmPY59n1zgGBabY1bZ"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": { }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "forms.write"
            ]
          },
          {
            "Location-Access": [
              "forms.write"
            ]
          }
        ]
      }
    },
    "/forms/forms/": {
      "get": {
        "tags": [
          "Forms"
        ],
        "summary": "Get Forms",
        "description": "Get Forms",
        "operationId": "get-forms",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit Per Page records count. will allow maximum up to 50 and default will be 10",
            "schema": {
              "type": "number",
              "default": 10
            },
            "example": 20
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "folder"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "forms.readonly"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/template": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Create template",
        "description": "API to create a template",
        "operationId": "create-invoice-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoiceTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInvoiceTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/template.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/template.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "List templates",
        "description": "API to get list of templates",
        "operationId": "list-invoice-templates",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "status to be filtered",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "startAt in YYYY-MM-DD format",
            "schema": {
              "type": "string",
              "example": "2023-01-01"
            }
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "endAt in YYYY-MM-DD format",
            "schema": {
              "type": "string",
              "example": "2023-01-01"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "To search for an invoice by id / name / email / phoneNo",
            "schema": {
              "type": "string",
              "example": "Alex"
            }
          },
          {
            "name": "paymentMode",
            "in": "query",
            "description": "payment mode",
            "schema": {
              "enum": [
                "default",
                "live",
                "test"
              ],
              "type": "string",
              "example": "live"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of items to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to skip",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTemplatesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/template.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices/template.readonly"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/template/{templateId}": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Get an template",
        "description": "API to get an template by template id",
        "operationId": "get-invoice-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/template.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices/template.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Template"
        ],
        "summary": "Update template",
        "description": "API to update an template by template id",
        "operationId": "update-invoice-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoiceTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInvoiceTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/template.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/template.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Template"
        ],
        "summary": "Delete template",
        "description": "API to update an template by template id",
        "operationId": "delete-invoice-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInvoiceTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/template.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/template.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/template/{templateId}/late-fees-configuration": {
      "patch": {
        "tags": [
          "Template"
        ],
        "summary": "Update template late fees configuration",
        "description": "API to update template late fees configuration by template id",
        "operationId": "update-invoice-template-late-fees-configuration",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoiceLateFeesConfigurationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInvoiceTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/invoices/invoices/template/{templateId}/payment-methods-configuration": {
      "patch": {
        "tags": [
          "Template"
        ],
        "summary": "Update template late fees configuration",
        "description": "API to update template late fees configuration by template id",
        "operationId": "update-invoice-payment-methods-configuration",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodsConfigurationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInvoiceTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/invoices/invoices/schedule": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Create Invoice Schedule",
        "description": "API to create an invoice Schedule",
        "operationId": "create-invoice-schedule",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoiceScheduleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInvoiceScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/schedule.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/schedule.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "List schedules",
        "description": "API to get list of schedules",
        "operationId": "list-invoice-schedules",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "status to be filtered",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "startAt in YYYY-MM-DD format",
            "schema": {
              "type": "string",
              "example": "2023-01-01"
            }
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "endAt in YYYY-MM-DD format",
            "schema": {
              "type": "string",
              "example": "2023-01-01"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "To search for an invoice by id / name / email / phoneNo",
            "schema": {
              "type": "string",
              "example": "Alex"
            }
          },
          {
            "name": "paymentMode",
            "in": "query",
            "description": "payment mode",
            "schema": {
              "enum": [
                "default",
                "live",
                "test"
              ],
              "type": "string",
              "example": "live"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of items to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to skip",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSchedulesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/schedule.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices/schedule.readonly"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/schedule/{scheduleId}": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get an schedule",
        "description": "API to get an schedule by schedule id",
        "operationId": "get-invoice-schedule",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/schedule.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices/schedule.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Update schedule",
        "description": "API to update an schedule by schedule id",
        "operationId": "update-invoice-schedule",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoiceScheduleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInvoiceScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/schedule.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/schedule.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Schedule"
        ],
        "summary": "Delete schedule",
        "description": "API to delete an schedule by schedule id",
        "operationId": "delete-invoice-schedule",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInvoiceScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/schedule.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/schedule.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/schedule/{scheduleId}/updateAndSchedule": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Update scheduled recurring invoice",
        "description": "API to update scheduled recurring invoice",
        "operationId": "update-and-schedule-invoice-schedule",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAndScheduleInvoiceScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/schedule.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/schedule.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/schedule/{scheduleId}/schedule": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Schedule an schedule invoice",
        "description": "API to schedule an schedule invoice to start sending to the customer",
        "operationId": "schedule-invoice-schedule",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInvoiceScheduleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInvoiceScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/schedule.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/schedule.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/schedule/{scheduleId}/auto-payment": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Manage Auto payment for an schedule invoice",
        "description": "API to manage auto payment for a schedule",
        "operationId": "auto-payment-invoice-schedule",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoPaymentScheduleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoPaymentInvoiceScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/schedule.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/schedule.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/schedule/{scheduleId}/cancel": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Cancel an scheduled invoice",
        "description": "API to cancel a scheduled invoice by schedule id",
        "operationId": "cancel-invoice-schedule",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Schedule Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelInvoiceScheduleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelInvoiceScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/schedule.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/schedule.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/text2pay": {
      "post": {
        "tags": [
          "Text2Pay"
        ],
        "summary": "Create & Send",
        "description": "API to create or update a text2pay invoice",
        "operationId": "text2pay-invoice",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Text2PayDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Text2PayInvoiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/generate-invoice-number": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Generate Invoice Number",
        "description": "Get the next invoice number for the given location",
        "operationId": "generate-invoice-number",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateInvoiceNumberResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices.readonly"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/{invoiceId}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get invoice",
        "description": "API to get invoice by invoice id",
        "operationId": "get-invoice",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInvoiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Invoice"
        ],
        "summary": "Update invoice",
        "description": "API to update invoice by invoice id",
        "operationId": "update-invoice",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoiceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInvoiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Invoice"
        ],
        "summary": "Delete invoice",
        "description": "API to delete invoice by invoice id",
        "operationId": "delete-invoice",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInvoiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "UnableToFindInvoiceResponse": {
                    "value": {
                      "statusCode": 400,
                      "message": "Unable to find an invoice with the given invoice id"
                    }
                  },
                  "DeleteDraftInvoiceBadResponse": {
                    "value": {
                      "statusCode": 400,
                      "message": "Invoice status need to be draft to delete an invoice"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/{invoiceId}/late-fees-configuration": {
      "patch": {
        "tags": [
          "Invoice"
        ],
        "summary": "Update invoice late fees configuration",
        "description": "API to update invoice late fees configuration by invoice id",
        "operationId": "update-invoice-late-fees-configuration",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoiceLateFeesConfigurationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInvoiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/invoices/invoices/{invoiceId}/void": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Void invoice",
        "description": "API to delete invoice by invoice id",
        "operationId": "void-invoice",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoidInvoiceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidInvoiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "UnableToFindInvoiceResponse": {
                    "value": {
                      "statusCode": 400,
                      "message": "Unable to find an invoice with the given invoice id"
                    }
                  },
                  "VoidDraftInvoiceBadResponse": {
                    "value": {
                      "statusCode": 400,
                      "message": "Can not void draft invoice. You can delete draft invoice!"
                    }
                  },
                  "VoidProviderInvoiceBadResponse": {
                    "value": {
                      "statusCode": 400,
                      "message": "To void an invoice which has received payment through the payment provider, the corresponding transaction needs to be refunded first"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/{invoiceId}/send": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Send invoice",
        "description": "API to send invoice by invoice id",
        "operationId": "send-invoice",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendInvoiceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendInvoicesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/{invoiceId}/record-payment": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Record a manual payment for an invoice",
        "description": "API to record manual payment for an invoice by invoice id",
        "operationId": "record-invoice",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordPaymentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordPaymentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/stats/last-visited-at": {
      "patch": {
        "tags": [
          "Invoice"
        ],
        "summary": "Update invoice last visited at",
        "description": "API to update invoice last visited at by invoice id",
        "operationId": "update-invoice-last-visited-at",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchInvoiceStatsLastViewedDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate": {
      "post": {
        "tags": [
          "Estimate"
        ],
        "summary": "Create New Estimate",
        "description": "Create a new estimate with the provided details",
        "operationId": "create-new-estimate",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEstimatesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate/{estimateId}": {
      "put": {
        "tags": [
          "Estimate"
        ],
        "summary": "Update Estimate",
        "description": "Update an existing estimate with new details",
        "operationId": "update-estimate",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "estimateId",
            "in": "path",
            "description": "Estimate Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5f9d6d8b1b2d2c001f2d9e4b"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEstimateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Estimate"
        ],
        "summary": "Delete Estimate",
        "description": "Delete an existing estimate",
        "operationId": "delete-estimate",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "estimateId",
            "in": "path",
            "description": "Estimate Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5f9d6d8b1b2d2c001f2d9e4b"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AltDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate/number/generate": {
      "get": {
        "tags": [
          "Estimate"
        ],
        "summary": "Generate Estimate Number",
        "description": "Get the next estimate number for the given location",
        "operationId": "generate-estimate-number",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateEstimateNumberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.readonly"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate/{estimateId}/send": {
      "post": {
        "tags": [
          "Estimate"
        ],
        "summary": "Send Estimate",
        "description": "API to send estimate by estimate id",
        "operationId": "send-estimate",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "estimateId",
            "in": "path",
            "description": "Estimate Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5f9d6d8b1b2d2c001f2d9e4b"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEstimateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate/{estimateId}/invoice": {
      "post": {
        "tags": [
          "Estimate"
        ],
        "summary": "Create Invoice from Estimate",
        "description": "Create a new invoice from an existing estimate",
        "operationId": "create-invoice-from-estimate",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "estimateId",
            "in": "path",
            "description": "Estimate Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5f9d6d8b1b2d2c001f2d9e4b"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoiceFromEstimateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInvoiceFromEstimateResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate/list": {
      "get": {
        "tags": [
          "Estimate"
        ],
        "summary": "List Estimates",
        "description": "Get a paginated list of estimates",
        "operationId": "list-estimates",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "startAt in YYYY-MM-DD format",
            "schema": {
              "type": "string",
              "example": "2023-01-01"
            }
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "endAt in YYYY-MM-DD format",
            "schema": {
              "type": "string",
              "example": "2023-01-01"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search text for estimates name",
            "schema": {
              "type": "string",
              "example": "Home services estimate"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "estimate status",
            "schema": {
              "enum": [
                "all",
                "draft",
                "sent",
                "accepted",
                "declined",
                "invoiced",
                "viewed"
              ],
              "type": "string",
              "example": "sent"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact ID for the estimate",
            "schema": {
              "type": "string",
              "example": "AmuzcoPBpgKeccNsFlib"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of items to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to skip",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEstimatesResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.readonly"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate/stats/last-visited-at": {
      "patch": {
        "tags": [
          "Estimate"
        ],
        "summary": "Update estimate last visited at",
        "description": "API to update estimate last visited at by estimate id",
        "operationId": "update-estimate-last-visited-at",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateIdParam"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate/template": {
      "get": {
        "tags": [
          "Estimate"
        ],
        "summary": "List Estimate Templates",
        "description": "Get a list of estimate templates or a specific template by ID",
        "operationId": "list-estimate-templates",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "To search for an estimate template by id / name",
            "schema": {
              "type": "string",
              "example": "Alex"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of items to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to skip",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEstimateTemplateResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Estimate"
        ],
        "summary": "Create Estimate Template",
        "description": "Create a new estimate template",
        "operationId": "create-estimate-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateTemplatesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateTemplateResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate/template/{templateId}": {
      "put": {
        "tags": [
          "Estimate"
        ],
        "summary": "Update Estimate Template",
        "description": "Update an existing estimate template",
        "operationId": "update-estimate-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5f9d6d8b1b2d2c001f2d9e4b"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateTemplatesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateTemplateResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Estimate"
        ],
        "summary": "Delete Estimate Template",
        "description": "Delete an existing estimate template",
        "operationId": "delete-estimate-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5f9d6d8b1b2d2c001f2d9e4b"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AltDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateTemplateResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.write"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/estimate/template/preview": {
      "get": {
        "tags": [
          "Estimate"
        ],
        "summary": "Preview Estimate Template",
        "description": "Get a preview of an estimate template",
        "operationId": "preview-estimate-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5f9d6d8b1b2d2c001f2d9e4b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateTemplateResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices/estimate.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices/estimate.readonly"
            ]
          }
        ]
      }
    },
    "/invoices/invoices/": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Create Invoice",
        "description": "API to create an invoice",
        "operationId": "create-invoice",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoiceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInvoiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.write"
            ]
          },
          {
            "Agency-Access": [
              "invoices.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "List invoices",
        "description": "API to get list of invoices",
        "operationId": "list-invoices",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id / company Id based on altType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "Alt Type",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "location"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "status to be filtered",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "startAt in YYYY-MM-DD format",
            "schema": {
              "type": "string",
              "example": "2023-01-01"
            }
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "endAt in YYYY-MM-DD format",
            "schema": {
              "type": "string",
              "example": "2023-01-01"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "To search for an invoice by id / name / email / phoneNo",
            "schema": {
              "type": "string",
              "example": "Alex"
            }
          },
          {
            "name": "paymentMode",
            "in": "query",
            "description": "payment mode",
            "schema": {
              "enum": [
                "default",
                "live",
                "test"
              ],
              "type": "string",
              "example": "live"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact ID for the invoice",
            "schema": {
              "type": "string",
              "example": "AmuzcoPBpgKeccNsFlib"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of items to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to skip",
            "required": true,
            "schema": {
              "type": "string",
              "example": 10
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field on which sorting should be applied",
            "schema": {
              "enum": [
                "issueDate"
              ],
              "type": "string",
              "example": "issueDate"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sort which should be applied for the sortField",
            "schema": {
              "enum": [
                "ascend",
                "descend"
              ],
              "type": "string",
              "example": "descend"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInvoicesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "invoices.readonly"
            ]
          },
          {
            "Agency-Access": [
              "invoices.readonly"
            ]
          }
        ]
      }
    },
    "/surveys/surveys/submissions": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get Surveys Submissions",
        "description": "Get Surveys Submissions",
        "operationId": "get-surveys-submissions",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page No. By default it will be 1",
            "schema": {
              "type": "number",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit Per Page records count. will allow maximum up to 100 and default will be 20",
            "schema": {
              "type": "number",
              "default": 20
            },
            "example": 20
          },
          {
            "name": "surveyId",
            "in": "query",
            "description": "Filter submission by survey id",
            "schema": {
              "type": "string"
            },
            "example": "jjusM6EOngDExnbo2DbU"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter by contactId, name, email or phone no.",
            "schema": {
              "type": "string"
            },
            "example": "john@deo.com"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Get submission by starting of this date. By default it will be same date of last month(YYYY-MM-DD).",
            "schema": {
              "type": "string"
            },
            "example": "2020-11-14"
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "Get submission by ending of this date. By default it will be current date(YYYY-MM-DD).",
            "schema": {
              "type": "string"
            },
            "example": "2020-12-14"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSurveysSubmissionSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "surveys.readonly"
            ]
          }
        ]
      }
    },
    "/surveys/surveys/": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get Surveys",
        "description": "Get Surveys",
        "operationId": "get-surveys",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit Per Page records count. will allow maximum up to 50 and default will be 10",
            "schema": {
              "type": "number",
              "default": 10
            },
            "example": 20
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "folder"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSurveysSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "surveys.readonly"
            ]
          }
        ]
      }
    },
    "/custom-fields/custom-fields/{id}": {
      "get": {
        "tags": [
          "Custom Fields V2"
        ],
        "summary": "Get Custom Field / Folder By Id",
        "description": "<div>\n                  <p> Get Custom Field / Folder By Id.</p> \n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                        Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n                        </strong>\n                      </span>\n                  </div>\n                </div>",
        "operationId": "get-custom-field-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Custom Fields V2"
        ],
        "summary": "Update Custom Field By Id",
        "description": "<div>\n    <p> Update Custom Field By Id </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
        "operationId": "update-custom-field",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Fields V2"
        ],
        "summary": "Delete Custom Field By Id",
        "description": "<div>\n    <p> Delete Custom Field By Id </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
        "operationId": "delete-custom-field",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFolderDeleteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.write"
            ]
          }
        ]
      }
    },
    "/custom-fields/custom-fields/object-key/{objectKey}": {
      "get": {
        "tags": [
          "Custom Fields V2"
        ],
        "summary": "Get Custom Fields By Object Key",
        "description": "<div>\n                  <p> Get Custom Fields By Object Key</p> \n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                        Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n                        </strong>\n                      </span>\n                  </div>\n                </div>",
        "operationId": "get-custom-fields-by-object-key",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "objectKey",
            "in": "path",
            "description": "key of the Object. Must include \"custom_objects.\" prefix for custom objects. Available on the Custom Objects details Page under settings",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "custom_objects.pet"
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Location Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.readonly"
            ]
          }
        ]
      }
    },
    "/custom-fields/custom-fields/folder": {
      "post": {
        "tags": [
          "Custom Fields V2"
        ],
        "summary": "Create Custom Field Folder",
        "description": "<div>\n    <p> Create Custom Field Folder </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
        "operationId": "create-custom-field-folder",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICustomFieldFolder"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.write"
            ]
          }
        ]
      }
    },
    "/custom-fields/custom-fields/folder/{id}": {
      "put": {
        "tags": [
          "Custom Fields V2"
        ],
        "summary": "Update Custom Field Folder Name",
        "description": "<div>\n    <p> Create Custom Field Folder </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
        "operationId": "update-custom-field-folder",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFolder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICustomFieldFolder"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Fields V2"
        ],
        "summary": "Delete Custom Field Folder",
        "description": "<div>\n    <p> Create Custom Field Folder </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
        "operationId": "delete-custom-field-folder",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFolderDeleteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.write"
            ]
          }
        ]
      }
    },
    "/custom-fields/custom-fields/": {
      "post": {
        "tags": [
          "Custom Fields V2"
        ],
        "summary": "Create Custom Field",
        "description": "<div>\n                  <p> Create Custom Field </p> \n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                        Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n                        </strong>\n                      </span>\n                  </div>\n                </div>",
        "operationId": "create-custom-field",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomFieldsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "locations/customFields.write"
            ]
          }
        ]
      }
    },
    "/objects/objects/{key}": {
      "get": {
        "tags": [
          "Object Schema"
        ],
        "summary": "Get Object Schema by key / id",
        "description": "Retrieve Object Schema by key or ID. This will return the schema of the custom object, including all its fields and properties. Supported objects include contact, opportunity, business and custom objects.To understand objects and records, please have a look the documentation here : https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
        "externalDocs": {
          "description": "To understand objects and records, please have a look the documentation.",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0"
        },
        "operationId": "get-object-schema-by-key",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of the custom or standard object. For custom objects, the key must include the prefix “custom_objects.”. This key can be found on the Object Details page under Settings in the UI.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "custom_objects.pet"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "location id of the sub account",
            "required": true,
            "schema": {
              "type": "string",
              "example": "632c34b4c9b7da3358ac9891"
            }
          },
          {
            "name": "fetchProperties",
            "in": "query",
            "description": "Fetch Properties , Fetches all the standard / custom fields of the object when set to true",
            "schema": {
              "type": "string",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomObjectByIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "objects/schema.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Object Schema"
        ],
        "summary": "Update Object Schema By Key / Id",
        "description": "Update Custom Object Schema  or standard object's like contact, opportunity, business searchable fields. To understand objects and records, please have a look at the documentation here : https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
        "externalDocs": {
          "description": "To understand objects and records, please have a look at the documentation here ",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0"
        },
        "operationId": "update-custom-object",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key of the custom or standard object. For custom objects, the key must include the prefix “custom_objects.”. This key can be found on the Object Details page under Settings in the UI.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "custom_objects.pet"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomObjectSchemaDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomObjectResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "objects/schema.write"
            ]
          }
        ]
      }
    },
    "/objects/objects/{schemaKey}/records/{id}": {
      "get": {
        "tags": [
          "Records"
        ],
        "summary": "Get Record By Id",
        "description": "Allows you to get a Standard Object like business and custom object record by Id",
        "operationId": "get-record-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "schemaKey",
            "in": "path",
            "description": "The key of the Custom Object / Standard Object Schema. For custom objects, the key must include the “custom_objects.” prefix, while standard objects use their respective object keys. This information is available on the Custom Objects Details page under Settings.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "custom_objects.pet or business.email (for company's email)"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the record to be updated. Available on the Record details page under the 3 dots or in the url",
            "required": true,
            "schema": {
              "type": "string",
              "example": "632c34b4c9b7da3358ac9891"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordByIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Records"
        ],
        "summary": "Update Record",
        "description": "Update a Custom Object Record by Id. Supported Objects are business and custom objects. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0/87cpx-376296",
        "externalDocs": {
          "description": "Click here for more information",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-175596/e2f3e9f2e111d69/87cpx-275676"
        },
        "operationId": "update-object-record",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "schemaKey",
            "in": "path",
            "description": "The key of the Custom Object / Standard Object Schema. For custom objects, the key must include the “custom_objects.” prefix, while standard objects use their respective object keys. This information is available on the Custom Objects Details page under Settings.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "custom_objects.pet or business.email (for company's email)"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the record to be updated. Available on the Record details page under the 3 dots or in the url",
            "required": true,
            "schema": {
              "type": "string",
              "example": "632c34b4c9b7da3358ac9891"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomObjectRecordDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordByIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Records"
        ],
        "summary": "Delete Record",
        "description": "Delete Record By Id . Supported Objects are business and custom objects.",
        "operationId": "delete-object-record",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "schemaKey",
            "in": "path",
            "description": "The key of the Custom Object / Standard Object Schema. For custom objects, the key must include the “custom_objects.” prefix, while standard objects use their respective object keys. This information is available on the Custom Objects Details page under Settings.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "custom_objects.pet or business.email (for company's email)"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the record to be updated. Available on the Record details page under the 3 dots or in the url",
            "required": true,
            "schema": {
              "type": "string",
              "example": "632c34b4c9b7da3358ac9891"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRecordDeleteResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/objects/objects/{schemaKey}/records": {
      "post": {
        "tags": [
          "Records"
        ],
        "summary": "Create Record",
        "description": "Create a Custom Object Record. Supported Objects business and custom objects. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0/87cpx-376296",
        "externalDocs": {
          "description": "Click here for more information",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-175596/e2f3e9f2e111d69/87cpx-275236"
        },
        "operationId": "create-object-record",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "schemaKey",
            "in": "path",
            "description": "The key of the Custom Object / Standard Object Schema. For custom objects, the key must include the “custom_objects.” prefix, while standard objects use their respective object keys. This information is available on the Custom Objects Details page under Settings.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "custom_objects.pet or business.email (for company's email)"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomObjectRecordDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordByIdResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "objects/record.write"
            ]
          }
        ]
      }
    },
    "/objects/objects/{schemaKey}/records/search": {
      "post": {
        "tags": [
          "Search Object Records"
        ],
        "summary": "Search Object Records",
        "description": "Supported Objects are custom objects and standard objects like \"business\". Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0/87cpx-379336",
        "operationId": "search-object-records",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "schemaKey",
            "in": "path",
            "description": "custom object key",
            "schema": {
              "type": "string",
              "example": "632c34b4c9b7da3358ac9891"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRecordResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "objects/record.readonly"
            ]
          }
        ]
      }
    },
    "/objects/objects/": {
      "get": {
        "tags": [
          "Object Schema"
        ],
        "summary": "Get all objects for a location",
        "description": "Get all objects for a location. Supported Objects are contact, opportunity, business and custom objects.To understand objects and records, please have a look at the documentation here : https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
        "externalDocs": {
          "description": "To understand objects and records, please have a look the documentation.",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0"
        },
        "operationId": "get-object-by-location-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "location id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "632c34b4c9b7da3358ac9891"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomObjectListResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "objects/schema.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Object Schema"
        ],
        "summary": "Create Custom Object",
        "description": "Allows you to create a custom object schema. To understand objects and records, please have a look at the documentation here : https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
        "externalDocs": {
          "description": "To understand objects and records, please have a look at the documentation here ",
          "url": "https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0"
        },
        "operationId": "create-custom-object-schema",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomObjectSchemaDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomObjectResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "objects/schema.write"
            ]
          }
        ]
      }
    },
    "/opportunities/opportunities/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search Opportunity",
        "description": "Search Opportunity",
        "operationId": "search-opportunity",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "john@deo.com"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "i2SpAtBVHSVea1sL6oah"
            }
          },
          {
            "name": "pipeline_id",
            "in": "query",
            "description": "Pipeline Id",
            "schema": {
              "type": "string",
              "example": "bCkKGpDsyPP4peuKowkG"
            }
          },
          {
            "name": "pipeline_stage_id",
            "in": "query",
            "description": "stage Id",
            "schema": {
              "type": "string",
              "example": "7915dedc-8f18-44d5-8bc3-77c04e994a10"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Contact Id",
            "schema": {
              "type": "string",
              "example": "WFwVrSSjZ2CNHbZThQX2"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "enum": [
                "open",
                "won",
                "lost",
                "abandoned",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "assigned_to",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "082goXVW3lIExEQPOnd3"
            }
          },
          {
            "name": "campaignId",
            "in": "query",
            "description": "Campaign Id",
            "schema": {
              "type": "string",
              "example": "Y2I9XM7aO1hncuSOlc9L"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Opportunity Id",
            "schema": {
              "type": "string",
              "example": "123akv4LFn6C9frZoy3e"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "added_asc"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string",
              "example": "mm-dd-yyyy"
            }
          },
          {
            "name": "startAfter",
            "in": "query",
            "description": "Start After",
            "schema": {
              "type": "string",
              "example": "1628008053263"
            }
          },
          {
            "name": "startAfterId",
            "in": "query",
            "description": "Start After Id",
            "schema": {
              "type": "string",
              "example": "UIaE1WjAwWKdlyD7osQI"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "example": "mm-dd-yyyy"
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "US"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit Per Page records count. will allow maximum up to 100 and default will be 20",
            "schema": {
              "type": "number",
              "default": 20
            }
          },
          {
            "name": "getTasks",
            "in": "query",
            "description": "get Tasks in contact",
            "schema": {
              "type": "boolean"
            },
            "example": false
          },
          {
            "name": "getNotes",
            "in": "query",
            "description": "get Notes in contact",
            "schema": {
              "type": "boolean"
            },
            "example": false
          },
          {
            "name": "getCalendarEvents",
            "in": "query",
            "description": "get Calender event in contact",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.readonly"
            ]
          }
        ]
      }
    },
    "/opportunities/opportunities/pipelines": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "Get Pipelines",
        "description": "Get Pipelines",
        "operationId": "get-pipelines",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPipelinesSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.readonly"
            ]
          }
        ]
      }
    },
    "/opportunities/opportunities/{id}": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Get Opportunity",
        "description": "Get Opportunity",
        "operationId": "get-opportunity",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Opportunity Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "yWQobCRIhRguQtD2llvk"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostOpportunitySuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Delete Opportunity",
        "description": "Delete Opportunity",
        "operationId": "delete-opportunity",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Opportunity Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "yWQobCRIhRguQtD2llvk"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUpdateOpportunitySuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Update Opportunity",
        "description": "Update Opportunity",
        "operationId": "update-opportunity",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Opportunity Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "yWQobCRIhRguQtD2llvk"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOpportunityDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostOpportunitySuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.write"
            ]
          }
        ]
      }
    },
    "/opportunities/opportunities/{id}/status": {
      "put": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Update Opportunity Status",
        "description": "Update Opportunity Status",
        "operationId": "update-opportunity-status",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Opportunity Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "yWQobCRIhRguQtD2llvk"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatusDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUpdateOpportunitySuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.write"
            ]
          }
        ]
      }
    },
    "/opportunities/opportunities/upsert": {
      "post": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Upsert Opportunity",
        "description": "Upsert Opportunity",
        "operationId": "Upsert-opportunity",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertOpportunityDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertOpportunitySuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.write"
            ]
          }
        ]
      }
    },
    "/opportunities/opportunities/{id}/followers": {
      "post": {
        "tags": [
          "Followers"
        ],
        "summary": "Add Followers",
        "description": "Add Followers",
        "operationId": "add-followers-opportunity",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Opportunity Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "sx6wyHhbFdRXh302Lunr"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowersDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAddFollowersSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Followers"
        ],
        "summary": "Remove Followers",
        "description": "Remove Followers",
        "operationId": "remove-followers-opportunity",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Opportunity Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "sx6wyHhbFdRXh302Lunr"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowersDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFollowersSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.write"
            ]
          }
        ]
      }
    },
    "/opportunities/opportunities/": {
      "post": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Create Opportunity",
        "description": "Create Opportunity",
        "operationId": "create-opportunity",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostOpportunitySuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "opportunities.write"
            ]
          }
        ]
      }
    },
    "/products/products/bulk-update": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Bulk Update Products",
        "description": "API to bulk update products (price, availability, collections, delete)",
        "operationId": "bulkUpdate",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Products updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUpdateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.write"
            ]
          }
        ]
      }
    },
    "/products/products/bulk-update/edit": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Bulk Edit Products and Prices",
        "description": "API to bulk edit products and their associated prices (max 30 entities)",
        "operationId": "bulkEdit",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkEditRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Products and prices updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkEditResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        }
      }
    },
    "/products/products/{productId}/price": {
      "post": {
        "tags": [
          "Prices"
        ],
        "summary": "Create Price for a Product",
        "description": "The \"Create Price for a Product\" API allows adding a new price associated with a specific product to the system. Use this endpoint to create a price with the specified details for a particular product. Ensure that the required information is provided in the request payload.",
        "operationId": "create-price-for-product",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product that needs to be used",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePriceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePriceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/prices.write"
            ]
          },
          {
            "Agency-Access": [
              "products/prices.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Prices"
        ],
        "summary": "List Prices for a Product",
        "description": "The \"List Prices for a Product\" API allows retrieving a paginated list of prices associated with a specific product. Customize your results by filtering prices or paginate through the list using the provided query parameters.",
        "operationId": "list-prices-for-product",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product that needs to be used",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "The unique identifier for the location.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3SwdhCsvxI8Au3KsPJt6"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "To filter the response only with the given price ids, Please provide with comma separated",
            "schema": {
              "type": "string",
              "example": "6241712be68f7a98102ba272,632027d51f7876cd3020213d"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPricesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/prices.readonly"
            ]
          },
          {
            "Agency-Access": [
              "products/prices.readonly"
            ]
          }
        ]
      }
    },
    "/products/products/inventory": {
      "get": {
        "tags": [
          "Prices"
        ],
        "summary": "List Inventory",
        "description": "The \"List Inventory API allows the user to retrieve a paginated list of inventory items. Use this endpoint to fetch details for multiple items in the inventory based on the provided query parameters.",
        "operationId": "get-list-inventory",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search string for Variant Search",
            "schema": {
              "type": "string",
              "example": "Product Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInventoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/prices.readonly"
            ]
          },
          {
            "Agency-Access": [
              "products/prices.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Prices"
        ],
        "summary": "Update Inventory",
        "description": "The Update Inventory API allows the user to bulk update the inventory for multiple items. Use this endpoint to update the available quantity and out-of-stock purchase settings for multiple items in the inventory.",
        "operationId": "update-inventory",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInventoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/prices.write"
            ]
          },
          {
            "Agency-Access": [
              "products/prices.write"
            ]
          }
        ]
      }
    },
    "/products/products/{productId}/price/{priceId}": {
      "get": {
        "tags": [
          "Prices"
        ],
        "summary": "Get Price by ID for a Product",
        "description": "The \"Get Price by ID for a Product\" API allows retrieving information for a specific price associated with a particular product using its unique identifier. Use this endpoint to fetch details for a single price based on the provided price ID and product ID.",
        "operationId": "get-price-by-id-for-product",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product that needs to be used",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "priceId",
            "in": "path",
            "description": "ID of the price that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPriceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/prices.readonly"
            ]
          },
          {
            "Agency-Access": [
              "products/prices.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Prices"
        ],
        "summary": "Update Price by ID for a Product",
        "description": "The \"Update Price by ID for a Product\" API allows modifying information for a specific price associated with a particular product using its unique identifier. Use this endpoint to update details for a single price based on the provided price ID and product ID.",
        "operationId": "update-price-by-id-for-product",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product that needs to be used",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "priceId",
            "in": "path",
            "description": "ID of the price that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePriceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePriceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/prices.write"
            ]
          },
          {
            "Agency-Access": [
              "products/prices.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Prices"
        ],
        "summary": "Delete Price by ID for a Product",
        "description": "The \"Delete Price by ID for a Product\" API allows deleting a specific price associated with a particular product using its unique identifier. Use this endpoint to remove a price from the system.",
        "operationId": "delete-price-by-id-for-product",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product that needs to be used",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "priceId",
            "in": "path",
            "description": "ID of the price that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePriceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/prices.write"
            ]
          },
          {
            "Agency-Access": [
              "products/prices.write"
            ]
          }
        ]
      }
    },
    "/products/products/store/{storeId}/stats": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Fetch Product Store Stats",
        "description": "API to fetch the total number of products, included in the store, and excluded from the store and other stats",
        "operationId": "get-product-store-stats",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "Products related to the store",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3SwdhCu3svxI8AKsPJt6"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "The name of the product for searching.",
            "schema": {
              "type": "string",
              "example": "Awesome product"
            }
          },
          {
            "name": "collectionIds",
            "in": "query",
            "description": "Filter by product collection Ids. Supports comma separated values",
            "schema": {
              "type": "string",
              "example": "65c2789a812e52f9bd6ec577,65c2789a812e52de9a6ec576"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductStatsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.readonly"
            ]
          }
        ]
      }
    },
    "/products/products/store/{storeId}": {
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "Action to include/exclude the product in store",
        "description": "API to update the status of products in a particular store",
        "operationId": "update-store-status",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "Products related to the store",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3SwdhCu3svxI8AKsPJt6"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductStoreDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductStoreResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.write"
            ]
          }
        ]
      }
    },
    "/products/products/store/{storeId}/priority": {
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "Update product display priorities in store",
        "description": "API to set the display priority of products in a store",
        "operationId": "update-display-priority",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "Products related to the store",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3SwdhCu3svxI8AKsPJt6"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDisplayPriorityBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated display priorities"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/products/products/collections": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Fetch Product Collections",
        "description": "Internal API to fetch the Product Collections",
        "operationId": "get-product-collection",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 10,
              "example": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "The type of alt. For now it is only LOCATION",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "LOCATION"
            }
          },
          {
            "name": "collectionIds",
            "in": "query",
            "description": "Ids of the collections separated by comma(,) for search purposes",
            "schema": {
              "type": "string",
              "example": "65d71377c326ea78e1c47df5,65d71377c326ea78e1c47d34"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Query to search collection based on names",
            "schema": {
              "type": "string",
              "example": "Best Sellers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/collection.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create Product Collection",
        "description": "Create a new Product Collection for a specific location",
        "operationId": "create-product-collection",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCollectionsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/collection.write"
            ]
          }
        ]
      }
    },
    "/products/products/collections/{collectionId}": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Get Details about individual product collection",
        "description": "Get Details about individual product collection",
        "operationId": "get-product-collection-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65d71377c326ea78e1c47df5"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3SwdhCsvxI8Au3KsPJt6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultCollectionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/collection.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Collections"
        ],
        "summary": "Update Product Collection",
        "description": "Update a specific product collection with Id :collectionId",
        "operationId": "update-product-collection",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "MongoId of the collection",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65d71377c326ea78e1c47df5"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCollectionsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductCollectionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/collection.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Collections"
        ],
        "summary": "Delete Product Collection",
        "description": "Delete specific product collection with Id :collectionId",
        "operationId": "delete-product-collection",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "MongoId of the collection",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65d71377c326ea78e1c47df5"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "The type of alt. For now it is only LOCATION",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string",
              "example": "LOCATION"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProductCollectionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products/collection.write"
            ]
          }
        ]
      }
    },
    "/products/products/reviews": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Fetch Product Reviews",
        "description": "API to fetch the Product Reviews",
        "operationId": "get-product-reviews",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field upon which the sort should be applied",
            "schema": {
              "enum": [
                "createdAt",
                "rating"
              ],
              "type": "string",
              "example": "rating"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sort which should be applied for the sortField",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "example": "desc"
            }
          },
          {
            "name": "rating",
            "in": "query",
            "description": "Key to filter the ratings ",
            "schema": {
              "type": "number",
              "example": 4
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date for filtering reviews",
            "schema": {
              "type": "string",
              "example": "2023-01-01T00:00:00Z"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date for filtering reviews",
            "schema": {
              "type": "string",
              "example": "2023-12-31T23:59:59Z"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Comma-separated list of product IDs",
            "schema": {
              "type": "string",
              "example": "60d21b4667d0d8992e610c88,60d21b4667d0d8992e610c89,60d21b4667d0d8992e610c8a"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "Comma-separated list of store IDs",
            "schema": {
              "type": "string",
              "example": "60d21b4667d0d8992e610c85,60d21b4667d0d8992e610c86,60d21b4667d0d8992e610c87"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProductReviewsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.readonly"
            ]
          }
        ]
      }
    },
    "/products/products/reviews/count": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Fetch Review Count as per status",
        "description": "API to fetch the Review Count as per status",
        "operationId": "get-reviews-count",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "rating",
            "in": "query",
            "description": "Key to filter the ratings ",
            "schema": {
              "type": "number",
              "example": 4
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date for filtering reviews",
            "schema": {
              "type": "string",
              "example": "2023-01-01T00:00:00Z"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date for filtering reviews",
            "schema": {
              "type": "string",
              "example": "2023-12-31T23:59:59Z"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Comma-separated list of product IDs",
            "schema": {
              "type": "string",
              "example": "60d21b4667d0d8992e610c88,60d21b4667d0d8992e610c89,60d21b4667d0d8992e610c8a"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "Comma-separated list of store IDs",
            "schema": {
              "type": "string",
              "example": "60d21b4667d0d8992e610c85,60d21b4667d0d8992e610c86,60d21b4667d0d8992e610c87"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountReviewsByStatusResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.readonly"
            ]
          }
        ]
      }
    },
    "/products/products/reviews/{reviewId}": {
      "put": {
        "tags": [
          "Reviews"
        ],
        "summary": "Update Product Reviews",
        "description": "Update status, reply, etc of a particular review",
        "operationId": "update-product-review",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "Review Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductReviewDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductReviewsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Reviews"
        ],
        "summary": "Delete Product Review",
        "description": "Delete specific product review",
        "operationId": "delete-product-review",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "Review Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altId",
            "in": "query",
            "description": "Location Id or Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Product Id of the product",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProductReviewResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.write"
            ]
          }
        ]
      }
    },
    "/products/products/reviews/bulk-update": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "summary": "Update Product Reviews",
        "description": "Update one or multiple product reviews: status, reply, etc.",
        "operationId": "bulk-update-product-review",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductReviewsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductReviewsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.write"
            ]
          }
        ]
      }
    },
    "/products/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get Product by ID",
        "description": "The \"Get Product by ID\" API allows to retrieve information for a specific product using its unique identifier. Use this endpoint to fetch details for a single product based on the provided product ID.",
        "operationId": "get-product-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID or the slug of the product that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "sendWishlistStatus",
            "in": "query",
            "description": "Parameter which will decide whether to show the wishlisting status of products",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.readonly"
            ]
          },
          {
            "Agency-Access": [
              "products.readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete Product by ID",
        "description": "The \"Delete Product by ID\" API allows deleting a specific product using its unique identifier. Use this endpoint to remove a product from the system.",
        "operationId": "delete-product-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID or the slug of the product that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          },
          {
            "name": "sendWishlistStatus",
            "in": "query",
            "description": "Parameter which will decide whether to show the wishlisting status of products",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.write"
            ]
          },
          {
            "Agency-Access": [
              "products.write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update Product by ID",
        "description": "The \"Update Product by ID\" API allows modifying information for a specific product using its unique identifier. Use this endpoint to update details for a single product based on the provided product ID.",
        "operationId": "update-product-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID or the slug of the product that needs to be returned",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6578278e879ad2646715ba9c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.write"
            ]
          },
          {
            "Agency-Access": [
              "products.write"
            ]
          }
        ]
      }
    },
    "/products/products/": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create Product",
        "description": "The \"Create Product\" API allows adding a new product to the system. Use this endpoint to create a product with the specified details. Ensure that the required information is provided in the request payload.",
        "operationId": "create-product",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.write"
            ]
          },
          {
            "Agency-Access": [
              "products.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List Products",
        "description": "The \"List Products\" API allows to retrieve a paginated list of products. Customize your results by filtering products based on name or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve product information.",
        "operationId": "list-invoices",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to be included in a single page of results",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "schema": {
              "type": "number",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "LocationId is the id of the sub-account",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3SwdhCu3svxI8AKsPJt6"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "The name of the product for searching.",
            "schema": {
              "type": "string",
              "example": "Awesome product"
            }
          },
          {
            "name": "collectionIds",
            "in": "query",
            "description": "Filter by product category Ids. Supports comma separated values",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionSlug",
            "in": "query",
            "description": "The slug value of the collection by which the collection would be searched",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Name of an entity whose data has to be fetched along with product. Possible entities are tax, stripe and paypal. If not mentioned, only ID will be returned in case of taxes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "productIds",
            "in": "query",
            "description": "List of product ids to be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "fetch and project products based on the storeId",
            "schema": {
              "type": "string",
              "example": "3SwdhCu3svxI8AKsPJt6"
            }
          },
          {
            "name": "includedInStore",
            "in": "query",
            "description": "Separate products by which are included in the store and which are not",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "availableInStore",
            "in": "query",
            "description": "If the product is included in the online store",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sort which should be applied for the date",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "example": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProductsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "products.readonly"
            ]
          },
          {
            "Agency-Access": [
              "products.readonly"
            ]
          }
        ]
      }
    },
    "/snapshots/snapshots/": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Get Snapshots",
        "description": "Get a list of all own and imported Snapshots",
        "operationId": "get-custom-snapshots",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5D112kQsiKESj6rash"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSnapshotsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/snapshots/snapshots/share/link": {
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Create Snapshot Share Link",
        "description": "Create a share link for snapshot",
        "operationId": "create-snapshot-share-link",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSnapshotShareLinkRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSnapshotShareLinkSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/snapshots/snapshots/snapshot-status/{snapshotId}": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Get Snapshot Push between Dates",
        "description": "Get list of sub-accounts snapshot pushed in time period",
        "operationId": "get-snapshot-push",
        "parameters": [
          {
            "name": "snapshotId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "39It2BFz7EkNaNBALPif"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5D112kQsiKESj6rash"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "10-10-2022 12:00 AM"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12-18-2023 11:59 PM"
            }
          },
          {
            "name": "lastDoc",
            "in": "query",
            "description": "Id for last document till what you want to skip",
            "required": true,
            "schema": {
              "type": "string",
              "example": "VUJO4Sw2TrDNZ5lx4wZg"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSnapshotPushStatusSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/snapshots/snapshots/snapshot-status/{snapshotId}/location/{locationId}": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Get Last Snapshot Push",
        "description": "Get Latest Snapshot Push Status for a location id",
        "operationId": "get-latest-snapshot-push",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5D112kQsiKESj6rash"
            }
          },
          {
            "name": "snapshotId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "39It2BFz7EkNaNBALPif"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "IIRGHCgxSINdPT79M75P"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLatestSnapshotPushStatusSuccessfulResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [ ]
          }
        ]
      }
    },
    "/campaigns/campaigns/": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Get Campaigns",
        "description": "Get Campaigns",
        "operationId": "get-campaigns",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "draft"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "campaigns.readonly"
            ]
          }
        ]
      }
    },
    "/businesses/businesses/{businessId}": {
      "put": {
        "tags": [
          "Businesses"
        ],
        "summary": "Update Business",
        "description": "Update Business",
        "operationId": "update-business",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBusinessResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "businesses.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Businesses"
        ],
        "summary": "Delete Business",
        "description": "Delete Business",
        "operationId": "delete-Business",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteBusinessResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "businesses.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Businesses"
        ],
        "summary": "Get Business",
        "description": "Get Business",
        "operationId": "get-business",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBusinessByIdResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "businesses.readonly"
            ]
          }
        ]
      }
    },
    "/businesses/businesses/": {
      "get": {
        "tags": [
          "Businesses"
        ],
        "summary": "Get Businesses by Location",
        "description": "Get Businesses by Location",
        "operationId": "get-businesses-by-location",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5DP4iH6HLkQsiKESj6rh"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBusinessByLocationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "businesses.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Businesses"
        ],
        "summary": "Create Business",
        "description": "Create Business",
        "operationId": "create-business",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBusinessResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "businesses.write"
            ]
          }
        ]
      }
    },
    "/workflows/workflows/": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get Workflow",
        "description": "Get Workflow",
        "operationId": "get-workflow",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "workflows.readonly"
            ]
          }
        ]
      }
    },
    "/emails/emails/schedule": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Get Campaigns",
        "description": "Get Campaigns",
        "operationId": "fetch-campaigns",
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID to fetch campaigns from",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ohjiah0wdg3bzmzacvd6"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of campaigns to return. Defaults to 10, maximum is 100",
            "schema": {
              "type": "number"
            },
            "example": "7"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of campaigns to skip for pagination",
            "schema": {
              "type": "number"
            },
            "example": "0"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by schedule status",
            "schema": {
              "enum": [
                "active",
                "pause",
                "complete",
                "cancelled",
                "retry",
                "draft",
                "resend-scheduled"
              ],
              "type": "string",
              "default": "active"
            }
          },
          {
            "name": "emailStatus",
            "in": "query",
            "description": "Filter by email delivery status",
            "schema": {
              "enum": [
                "all",
                "not-started",
                "paused",
                "cancelled",
                "processing",
                "resumed",
                "next-drip",
                "complete",
                "success",
                "error",
                "waiting",
                "queued",
                "queueing",
                "reading",
                "scheduled"
              ],
              "type": "string",
              "default": "complete"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter campaigns by name",
            "schema": {
              "type": "string"
            },
            "example": "Black Friday Campaign"
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "Filter campaigns by parent folder ID",
            "schema": {
              "type": "string"
            },
            "example": "folder123"
          },
          {
            "name": "limitedFields",
            "in": "query",
            "description": "When true, returns only essential campaign fields like id, templateDataDownloadUrl, updatedAt, type, templateType, templateId, downloadUrl and isPlainText. When false, returns complete campaign data including meta information, bulkRequestStatusInfo, ABTestInfo, resendScheduleInfo and all other campaign properties",
            "schema": {
              "type": "boolean"
            },
            "example": "false"
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Filter archived campaigns",
            "schema": {
              "type": "boolean"
            },
            "example": "false"
          },
          {
            "name": "campaignsOnly",
            "in": "query",
            "description": "Return only campaigns, excluding folders",
            "schema": {
              "type": "boolean"
            },
            "example": "false"
          },
          {
            "name": "showStats",
            "in": "query",
            "description": "When true, returns campaign statistics including delivered count, opened count, clicked count and revenue if available for the campaign. When false, returns campaign data without statistics.",
            "schema": {
              "type": "boolean"
            },
            "example": "true"
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleFetchSuccessfulDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "403": {
            "description": "The token does not have access to this location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidLocationDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "emails/schedule.readonly"
            ]
          }
        ]
      }
    },
    "/emails/emails/builder": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Create a new template",
        "description": "Create a new template",
        "operationId": "create-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBuilderDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBuilderSuccesfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "emails/builder.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Fetch email templates",
        "description": "Fetch email templates by location id",
        "operationId": "fetch-template",
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "string",
              "default": 0
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sortByDate",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "desc"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "string",
              "default": false
            }
          },
          {
            "name": "builderVersion",
            "in": "query",
            "schema": {
              "enum": [
                "1",
                "2"
              ],
              "type": "string",
              "default": "2"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "originId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "templatesOnly",
            "in": "query",
            "schema": {
              "type": "string",
              "default": false
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchBuilderSuccesfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "emails/builder.readonly"
            ]
          }
        ]
      }
    },
    "/emails/emails/builder/{locationId}/{templateId}": {
      "delete": {
        "tags": [
          "Templates"
        ],
        "summary": "Delete a template",
        "description": "Delete a template",
        "operationId": "delete-template",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "zYy3YOUuHxgomU1uYJty"
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteBuilderSuccesfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/emails/emails/builder/data": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Update a template",
        "description": "Update a template",
        "operationId": "update-template",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveBuilderDataDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuilderUpdateSuccessfulDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "emails/builder.write"
            ]
          }
        ]
      }
    },
    "/phone-system/phone-system/number-pools": {
      "get": {
        "tags": [
          "Number Pools"
        ],
        "summary": "List Number Pools",
        "description": "Get list of number pools",
        "operationId": "getNumberPoolList",
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID to filter pools",
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved number pools list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NumberPoolDto"
                      },
                      "description": "Array of number pool objects"
                    },
                    "total": {
                      "type": "number",
                      "description": "Total number of pools returned",
                      "example": 5
                    }
                  }
                },
                "examples": {
                  "successful-response": {
                    "summary": "Successful response with number pools",
                    "value": {
                      "success": true,
                      "data": [
                        {
                          "id": "ve9EPM428h8vShlRW1KT",
                          "name": "Sales Team Pool",
                          "locationId": "loc123",
                          "numbers": [
                            {
                              "phoneNumber": "+14155552671",
                              "friendlyName": "Sales Line 1"
                            }
                          ],
                          "forwardingNumber": "+14155552671",
                          "whisper": true,
                          "whisperMessage": "Incoming call from sales line",
                          "callRecording": true,
                          "isActive": true,
                          "inboundCallService": {
                            "type": "voice_ai",
                            "value": "68e381b296a83800a27cd1"
                          }
                        }
                      ],
                      "total": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid location ID or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid locationId format"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for this location"
          }
        },
        "security": [
          {
            "Location-Access": [
              "numberpools.read"
            ]
          }
        ]
      }
    },
    "/phone-system/phone-system/numbers/location/{locationId}": {
      "get": {
        "tags": [
          "Phone Numbers"
        ],
        "summary": "List active numbers",
        "description": "Retrieve a paginated list of active phone numbers for a specific location. Supports filtering, pagination, and optional exclusion of number pool assignments.",
        "operationId": "active-numbers",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The unique identifier of the location",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ve9EPM428h8vShlRW1KT"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "How many resources to return in each list page. The default is 50, and the maximum is 1000.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "number",
              "default": 1000
            },
            "example": 100
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index for pagination. The default is 0.",
            "schema": {
              "minimum": 0,
              "type": "number",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "searchFilter",
            "in": "query",
            "description": "Filter numbers by phone number pattern. Supports partial matching (e.g., \"+91\" to find all Indian numbers).",
            "schema": {
              "type": "string"
            },
            "example": "+91"
          },
          {
            "name": "skipNumberPool",
            "in": "query",
            "description": "Whether to exclude numbers that are assigned to number pools. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of active numbers",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "numbers",
                    "isUnderGhl",
                    "pageSize",
                    "page",
                    "accountStatus"
                  ],
                  "type": "object",
                  "properties": {
                    "numbers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DetailedPhoneNumberDto"
                      },
                      "description": "Array of phone number objects with detailed configuration"
                    },
                    "isUnderGhl": {
                      "type": "boolean",
                      "description": "Whether this account is manged by LeadconnectorHQ",
                      "example": true
                    },
                    "pageSize": {
                      "maximum": 1000,
                      "minimum": 1,
                      "type": "number",
                      "description": "Number of items requested per page",
                      "example": 100
                    },
                    "page": {
                      "minimum": 0,
                      "type": "number",
                      "description": "Current page index (0-based)",
                      "example": 0
                    },
                    "accountStatus": {
                      "enum": [
                        "active",
                        "suspended",
                        "closed"
                      ],
                      "type": "string",
                      "description": "Current status of the account",
                      "example": "active"
                    }
                  }
                },
                "examples": {
                  "successful-response": {
                    "summary": "Successful response with phone numbers",
                    "value": {
                      "numbers": [
                        {
                          "phoneNumber": "+14155552671",
                          "friendlyName": "Sales Line 1",
                          "sid": "PN1234567890abcdef1234567890abcde",
                          "countryCode": "US",
                          "capabilities": {
                            "voice": true,
                            "sms": true,
                            "mms": true,
                            "fax": false
                          },
                          "type": "local",
                          "isDefaultNumber": true,
                          "linkedUser": "user_123456789",
                          "linkedRingAllUsers": [
                            "user_123",
                            "user_456"
                          ],
                          "inboundCallService": {
                            "type": "voice_ai",
                            "value": "68e381b296a83800a27cd1"
                          },
                          "forwardingNumber": "+14155552672",
                          "isGroupConversationEnabled": true,
                          "addressSid": "AD1234567890abcdef1234567890abcde",
                          "bundleSid": "BU1234567890abcdef1234567890abcde",
                          "dateAdded": "2023-01-15T10:30:00Z",
                          "dateUpdated": "2023-02-20T14:45:00Z",
                          "origin": "twilio"
                        },
                        {
                          "phoneNumber": "+18005551234",
                          "friendlyName": "Support Toll-Free",
                          "sid": "PN9876543210fedcba9876543210fedcb",
                          "countryCode": "US",
                          "capabilities": {
                            "voice": true,
                            "sms": false,
                            "mms": false,
                            "fax": false
                          },
                          "type": "toll-free",
                          "isDefaultNumber": false,
                          "linkedUser": null,
                          "linkedRingAllUsers": [
                            "user_789",
                            "user_101"
                          ],
                          "inboundCallService": null,
                          "forwardingNumber": null,
                          "isGroupConversationEnabled": false,
                          "addressSid": null,
                          "bundleSid": null,
                          "dateAdded": "2023-01-16T14:20:00Z",
                          "dateUpdated": "2023-01-16T14:20:00Z",
                          "origin": "twilio"
                        }
                      ],
                      "isUnderGhl": true,
                      "pageSize": 100,
                      "page": 0,
                      "accountStatus": "active"
                    }
                  },
                  "empty-response": {
                    "summary": "Response when no numbers are found",
                    "value": {
                      "numbers": [ ],
                      "total": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid locationId format or pagination parameters"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Phone system not connected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Phone system is not connected to this account"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "accountStatus": {
                      "type": "string",
                      "description": "Account status when error occurs",
                      "example": "suspended"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "phonenumbers.read"
            ]
          }
        ]
      }
    },
    "/funnels/funnels/lookup/redirect": {
      "post": {
        "tags": [
          "Redirect"
        ],
        "summary": "Create Redirect",
        "description": "The \"Create Redirect\" API Allows adding a new url redirect to the system. Use this endpoint to create a url redirect with the specified details. Ensure that the required information is provided in the request payload.",
        "operationId": "create-redirect",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRedirectParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRedirectResponseDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "funnels/redirect.write"
            ]
          }
        ]
      }
    },
    "/funnels/funnels/lookup/redirect/{id}": {
      "patch": {
        "tags": [
          "Redirect"
        ],
        "summary": "Update Redirect By Id",
        "description": "The \"Update Redirect By Id\" API Allows updating an existing URL redirect in the system. Use this endpoint to modify a URL redirect with the specified ID using details provided in the request payload.",
        "operationId": "update-redirect-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRedirectParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRedirectResponseDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "funnels/redirect.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Redirect"
        ],
        "summary": "Delete Redirect By Id",
        "description": "The \"Delete Redirect By Id\" API Allows deletion of a URL redirect from the system using its unique identifier. Use this endpoint to delete a URL redirect with the specified ID using details provided in the request payload.",
        "operationId": "delete-redirect-by-id",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6p2RxpgtMKQwO3E6IUaT"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - URL redirect deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRedirectResponseDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The provided data is invalid or incomplete"
          }
        },
        "security": [
          {
            "Location-Access": [
              "funnels/redirect.write"
            ]
          }
        ]
      }
    },
    "/funnels/funnels/lookup/redirect/list": {
      "get": {
        "tags": [
          "Redirect"
        ],
        "summary": "Fetch List of Redirects",
        "description": "Retrieves a list of all URL redirects based on the given query parameters.",
        "operationId": "fetch-redirects-list",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6p2RxpgtMKQwO3E6IUaT"
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            },
            "example": 20
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            },
            "example": 10
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "example.com/test"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - List of URL redirects returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedirectListResponseDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The provided data is invalid or incomplete"
          }
        },
        "security": [
          {
            "Location-Access": [
              "funnels/redirect.readonly"
            ]
          }
        ]
      }
    },
    "/funnels/funnels/funnel/list": {
      "get": {
        "tags": [
          "Funnel"
        ],
        "summary": "Fetch List of Funnels",
        "description": "Retrieves a list of all funnels based on the given query parameters.",
        "operationId": "getFunnels",
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - List of funnels returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnelListResponseDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/funnels/funnels/page": {
      "get": {
        "tags": [
          "Funnel"
        ],
        "summary": "Fetch list of funnel pages",
        "description": "Retrieves a list of all funnel pages based on the given query parameters.",
        "operationId": "getPagesByFunnelId",
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "funnelId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - List of funnel pages returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnelPageResponseDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/funnels/funnels/page/count": {
      "get": {
        "tags": [
          "Funnel"
        ],
        "summary": "Fetch count of funnel pages",
        "description": "Retrieves count of all funnel pages based on the given query parameters.",
        "operationId": "getPagesCountByFunnelId",
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "funnelId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - Count of funnel pages returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnelPageCountResponseDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/medias/medias/files": {
      "get": {
        "tags": [
          "Medias"
        ],
        "summary": "Get List of Files/ Folders",
        "description": "Fetches list of files and folders from the media library",
        "operationId": "fetch-media-content",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of files to skip in listing",
            "schema": {
              "type": "string"
            },
            "example": "5"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of files to show in the listing",
            "schema": {
              "type": "string"
            },
            "example": "10"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sorting the file listing by",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "createdAt"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Direction in which file needs to be sorted",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "asc"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "file"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query text",
            "schema": {
              "type": "string"
            },
            "example": "Test file"
          },
          {
            "name": "altType",
            "in": "query",
            "description": "AltType",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            },
            "example": "location"
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "parent id or folder id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fetchAll",
            "in": "query",
            "description": "Fetch all files or folders",
            "schema": {
              "type": "string"
            },
            "example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFilesResponseDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "medias.readonly"
            ]
          }
        ]
      }
    },
    "/medias/medias/upload-file": {
      "post": {
        "tags": [
          "Medias"
        ],
        "summary": "Upload File into Media Library",
        "description": "If hosted is set to true then fileUrl is required. Else file is required. If adding a file, maximum allowed is 25 MB",
        "operationId": "upload-media-content",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "hosted": {
                    "type": "boolean"
                  },
                  "fileUrl": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "parentId": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponseDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "medias.write"
            ]
          }
        ]
      }
    },
    "/medias/medias/{id}": {
      "delete": {
        "tags": [
          "Medias"
        ],
        "summary": "Delete File or Folder",
        "description": "Deletes specific file or folder from the media library",
        "operationId": "delete-media-content",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "altType",
            "in": "query",
            "description": "AltType",
            "required": true,
            "schema": {
              "enum": [
                "location"
              ],
              "type": "string"
            },
            "example": "location"
          },
          {
            "name": "altId",
            "in": "query",
            "description": "location Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Location-Access": [
              "medias.write"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Medias"
        ],
        "summary": "Update File/ Folder",
        "description": "Updates a single file or folder by ID",
        "operationId": "update-media-object",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the file or folder to update",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "686f9817f0d3165be9fbcef6"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "updated": true,
                    "traceId": "33a641a2-c4a6-4123-aa82-c5b84f1a14ee"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/medias/medias/folder": {
      "post": {
        "tags": [
          "Medias"
        ],
        "summary": "Create Folder",
        "description": "Creates a new folder in the media library",
        "operationId": "create-media-folder",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the newly created folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/medias/medias/update-files": {
      "put": {
        "tags": [
          "Medias"
        ],
        "summary": "Bulk Update Files/ Folders",
        "description": "Updates metadata or status of multiple files and folders",
        "operationId": "bulk-update-media-objects",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMediaObjects"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "updated": true,
                      "id": "686f9817f0d3165be9fbcef6"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/medias/medias/delete-files": {
      "put": {
        "tags": [
          "Medias"
        ],
        "summary": "Bulk Delete / Trash Files or Folders",
        "description": "Soft-deletes or trashes multiple files and folders in a single request",
        "operationId": "bulk-delete-media-objects",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMediaObjectsBodyParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "deleted": true,
                      "id": "686f630df0d3166d68fbcec2"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/marketplace/marketplace/billing/charges": {
      "post": {
        "tags": [
          "Wallet Charges"
        ],
        "summary": "Create a new wallet charge",
        "description": "Create a new wallet charge",
        "operationId": "charge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RaiseChargeBodyDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Charge created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "chargeId": {
                      "type": "string",
                      "example": "charge_123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access-Only": [
              "charges.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Wallet Charges"
        ],
        "summary": "Get all wallet charges",
        "description": "Get all wallet charges",
        "operationId": "getCharges",
        "parameters": [
          {
            "name": "meterId",
            "in": "query",
            "description": "Billing Meter ID (you can find this on your app's pricing page on the developer portal)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "description": "Event ID / Transaction ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter results by User ID that your server passed via API when the charge was created",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter results AFTER a specific date. Use this in combination with endDate to filter results in a specific time window.",
            "schema": {
              "type": "string",
              "example": "2025-03-26"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter results BEFORE a specific date. Use this in combination with startDate to filter results in a specific time window.",
            "schema": {
              "type": "string",
              "example": "2025-03-26"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of wallet charges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "charges": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "refunded": {
                            "type": "boolean",
                            "description": "Value is 'true' if the charge has subsequently been refunded."
                          },
                          "currency": {
                            "type": "string",
                            "description": "Currency of the transaction. We currently support USD only."
                          },
                          "appId": {
                            "type": "string",
                            "description": "App ID"
                          },
                          "meterId": {
                            "type": "string",
                            "description": "Billing Meter ID (you can find this on your app's pricing page)"
                          },
                          "chargeId": {
                            "type": "string",
                            "description": "Charge ID"
                          },
                          "entityType": {
                            "type": "string",
                            "description": "Indicates who was charged? Currently, we support charges for 'location' only"
                          },
                          "entityId": {
                            "type": "string",
                            "description": "If the entityType is Location, entityld would be locationld."
                          },
                          "amountCharged": {
                            "type": "number",
                            "description": "Total amount charged"
                          },
                          "pricePerUnit": {
                            "type": "number",
                            "description": "Price per unit for the charge"
                          },
                          "transactionType": {
                            "type": "string",
                            "description": "This can be one of two values - 'charge' or 'refund'"
                          },
                          "units": {
                            "type": "number",
                            "description": "Number of units that the sub-account was charged for"
                          },
                          "meta": {
                            "type": "object",
                            "description": "meta object contains details that were sent while creating the charge via the API - eventID, description, eventTime, userld"
                          },
                          "createdAt": {
                            "type": "string",
                            "description": "Timestamp when the charge was created in our system",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "description": "Timestamp when the charge was last updated in our system",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access-Only": [
              "charges.readonly"
            ]
          }
        ]
      }
    },
    "/marketplace/marketplace/billing/charges/{chargeId}": {
      "delete": {
        "tags": [
          "Wallet Charges"
        ],
        "summary": "Delete a wallet charge",
        "description": "Delete a wallet charge",
        "operationId": "deleteCharge",
        "parameters": [
          {
            "name": "chargeId",
            "in": "path",
            "description": "ID of the charge to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Charge deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Charge not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Charge not found"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access-Only": [
              "charges.write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Wallet Charges"
        ],
        "summary": "Get specific wallet charge details",
        "description": "Get specific wallet charge details",
        "operationId": "getSpecificCharge",
        "parameters": [
          {
            "name": "chargeId",
            "in": "path",
            "description": "ID of the charge to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns charge details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refunded": {
                      "type": "boolean",
                      "description": "Value is 'true' if the charge has subsequently been refunded."
                    },
                    "currency": {
                      "type": "string",
                      "description": "Currency of the transaction. We currently support USD only."
                    },
                    "appId": {
                      "type": "string",
                      "description": "App ID"
                    },
                    "meterId": {
                      "type": "string",
                      "description": "Billing Meter ID (you can find this on your app's pricing page)"
                    },
                    "chargeId": {
                      "type": "string",
                      "description": "Charge ID"
                    },
                    "entityType": {
                      "type": "string",
                      "description": "Indicates who was charged? Currently, we support charges for 'location' only"
                    },
                    "entityId": {
                      "type": "string",
                      "description": "If the entityType is Location, entityld would be locationld."
                    },
                    "amountCharged": {
                      "type": "number",
                      "description": "Total amount charged"
                    },
                    "pricePerUnit": {
                      "type": "number",
                      "description": "Price per unit for the charge"
                    },
                    "transactionType": {
                      "type": "string",
                      "description": "This can be one of two values - 'charge' or 'refund'"
                    },
                    "units": {
                      "type": "number",
                      "description": "Number of units that the sub-account was charged for"
                    },
                    "meta": {
                      "type": "object",
                      "description": "meta object contains details that were sent while creating the charge via the API - eventID, description, eventTime, userld"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Timestamp when the charge was created in our system",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Timestamp when the charge was last updated in our system",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Charge not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Charge not found"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access-Only": [
              "charges.readonly"
            ]
          }
        ]
      }
    },
    "/marketplace/marketplace/billing/charges/has-funds": {
      "get": {
        "tags": [
          "Wallet Charges"
        ],
        "summary": "Check if account has sufficient funds",
        "description": "Check if account has sufficient funds",
        "operationId": "hasFunds",
        "responses": {
          "200": {
            "description": "Returns fund availability status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hasFunds": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access-Only": [
              "charges.readonly"
            ]
          }
        ]
      }
    },
    "/marketplace/marketplace/app/{appId}/installations": {
      "delete": {
        "tags": [
          "App Management"
        ],
        "summary": "Uninstall an application",
        "description": "Uninstalls an application from your company or a specific location. This will remove the application`s access and stop all its functionalities",
        "operationId": "uninstall-application",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The application id which is to be uninstalled.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "674587703dfd4161f1e3c557"
            }
          },
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteIntegrationBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully uninstalled the application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteIntegrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access-Only": [ ]
          },
          {
            "Agency-Access": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "App Management"
        ],
        "summary": "Get Installer Details",
        "description": "Fetches installer details for the authenticated user. This endpoint returns information about the company, location, user, and installation details associated with the current OAuth token.",
        "operationId": "get-installer-details",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "ID of the app to get installer details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved installer details. Returns company, location, user, and installation information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstallerDetailsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid request parameters or missing required data."
          },
          "403": {
            "description": "Forbidden. The client does not have necessary permissions to access installer details."
          }
        }
      }
    },
    "/conversations/conversations/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search Conversations",
        "description": "Returns a list of all conversations matching the search criteria along with the sort and filter options selected.",
        "operationId": "search-conversation",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ABCHkzuJQ8ZMd4Te84GK"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact Id",
            "schema": {
              "type": "string",
              "example": "9VEmS0si86GW6gXWU89b"
            }
          },
          {
            "name": "assignedTo",
            "in": "query",
            "description": "User IDs that conversations are assigned to. Multiple IDs can be provided as comma-separated values. Use \"unassigned\" to fetch conversations not assigned to any user.",
            "schema": {
              "type": "string",
              "example": "ABCHkzuJQ8ZMd4Te84GK,fGiae4CHkzoskh8thsik"
            }
          },
          {
            "name": "followers",
            "in": "query",
            "description": "User IDs of followers to filter conversations by. Multiple IDs can be provided as comma-separated values.",
            "schema": {
              "type": "string",
              "example": "ABCHkzuJQ8ZMd4Te84GK,fGiae4CHkzoskh8thsik"
            }
          },
          {
            "name": "mentions",
            "in": "query",
            "description": "User Id of the mention. Multiple values are comma separated.",
            "schema": {
              "type": "string",
              "example": "ABCHkzuJQ8ZMd4Te84GK,fGiae4CHkzoskh8thsik"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search paramater as a string",
            "schema": {
              "type": "string",
              "example": "Search string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort paramater - asc or desc",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "example": "asc"
            }
          },
          {
            "name": "startAfterDate",
            "in": "query",
            "description": "Search to begin after the specified date - should contain the sort value of the last document",
            "schema": {
              "example": 1600854
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Id of the conversation",
            "schema": {
              "type": "string",
              "example": "ABCHkzuJQ8ZMd4Te84GK"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of conversations - Default is 20",
            "schema": {
              "type": "number",
              "example": 20
            }
          },
          {
            "name": "lastMessageType",
            "in": "query",
            "description": "Type of the last message in the conversation as a string",
            "schema": {
              "enum": [
                "TYPE_CALL",
                "TYPE_SMS",
                "TYPE_EMAIL",
                "TYPE_SMS_REVIEW_REQUEST",
                "TYPE_WEBCHAT",
                "TYPE_SMS_NO_SHOW_REQUEST",
                "TYPE_CAMPAIGN_SMS",
                "TYPE_CAMPAIGN_CALL",
                "TYPE_CAMPAIGN_EMAIL",
                "TYPE_CAMPAIGN_VOICEMAIL",
                "TYPE_FACEBOOK",
                "TYPE_CAMPAIGN_FACEBOOK",
                "TYPE_CAMPAIGN_MANUAL_CALL",
                "TYPE_CAMPAIGN_MANUAL_SMS",
                "TYPE_GMB",
                "TYPE_CAMPAIGN_GMB",
                "TYPE_REVIEW",
                "TYPE_INSTAGRAM",
                "TYPE_WHATSAPP",
                "TYPE_CUSTOM_SMS",
                "TYPE_CUSTOM_EMAIL",
                "TYPE_CUSTOM_PROVIDER_SMS",
                "TYPE_CUSTOM_PROVIDER_EMAIL",
                "TYPE_IVR_CALL",
                "TYPE_ACTIVITY_CONTACT",
                "TYPE_ACTIVITY_INVOICE",
                "TYPE_ACTIVITY_PAYMENT",
                "TYPE_ACTIVITY_OPPORTUNITY",
                "TYPE_LIVE_CHAT",
                "TYPE_LIVE_CHAT_INFO_MESSAGE",
                "TYPE_ACTIVITY_APPOINTMENT",
                "TYPE_FACEBOOK_COMMENT",
                "TYPE_INSTAGRAM_COMMENT",
                "TYPE_CUSTOM_CALL",
                "TYPE_INTERNAL_COMMENT",
                "TYPE_ACTIVITY_EMPLOYEE_ACTION_LOG"
              ],
              "type": "string",
              "example": "TYPE_SMS"
            }
          },
          {
            "name": "lastMessageAction",
            "in": "query",
            "description": "Action of the last outbound message in the conversation as string.",
            "schema": {
              "enum": [
                "automated",
                "manual"
              ],
              "type": "string",
              "example": "manual"
            }
          },
          {
            "name": "lastMessageDirection",
            "in": "query",
            "description": "Direction of the last message in the conversation as string.",
            "schema": {
              "enum": [
                "inbound",
                "outbound"
              ],
              "type": "string",
              "example": "inbound"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of the conversation to be filtered - all, read, unread, starred ",
            "schema": {
              "enum": [
                "all",
                "read",
                "unread",
                "starred",
                "recents"
              ],
              "type": "string",
              "example": "all"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The sorting of the conversation to be filtered as - manual messages or all messages",
            "schema": {
              "enum": [
                "last_manual_message_date",
                "last_message_date",
                "score_profile"
              ],
              "type": "string",
              "example": "last_message_date"
            }
          },
          {
            "name": "sortScoreProfile",
            "in": "query",
            "description": "Id of score profile on which sortBy.ScoreProfile should sort on",
            "schema": {
              "type": "string",
              "example": "ABCHkzuJQ8ZMd4Te84GK"
            }
          },
          {
            "name": "scoreProfile",
            "in": "query",
            "description": "Id of score profile on which conversations should get filtered out, works with scoreProfileMin & scoreProfileMax",
            "schema": {
              "type": "string",
              "example": "ABCHkzuJQ8ZMd4Te84GK"
            }
          },
          {
            "name": "scoreProfileMin",
            "in": "query",
            "description": "Minimum value for score",
            "schema": {
              "type": "number",
              "example": "ABCHkzuJQ8ZMd4Te84GK"
            }
          },
          {
            "name": "scoreProfileMax",
            "in": "query",
            "description": "Maximum value for score",
            "schema": {
              "type": "number",
              "example": "ABCHkzuJQ8ZMd4Te84GK"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the conversations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendConversationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations.readonly"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/{conversationId}": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "Get Conversation",
        "description": "Get the conversation details based on the conversation ID",
        "operationId": "get-conversation",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConversationByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Conversations"
        ],
        "summary": "Update Conversation",
        "description": "Update the conversation details based on the conversation ID",
        "operationId": "update-conversation",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConversationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConversationSuccessfulResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Conversations"
        ],
        "summary": "Delete Conversation",
        "description": "Delete the conversation details based on the conversation ID",
        "operationId": "delete-conversation",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteConversationSuccessfulResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations.write"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/messages/email/{id}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Get email by Id",
        "description": "Get email by Id",
        "operationId": "get-email-by-id",
        "responses": {
          "200": {
            "description": "Email object for the id given.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEmailMessageResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/conversations/messages/email/{emailMessageId}/schedule": {
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Cancel a scheduled email message.",
        "description": "Post the messageId for the API to delete a scheduled email message. <br />",
        "operationId": "cancel-scheduled-email-message",
        "parameters": [
          {
            "name": "emailMessageId",
            "in": "path",
            "description": "Email Message Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The scheduled email message was cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelScheduledResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/conversations/messages/{id}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get message by message id",
        "description": "Get message by message id.",
        "operationId": "get-message",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message object for the id given.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations/message.readonly"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/{conversationId}/messages": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get messages by conversation id",
        "description": "Get messages by conversation id.",
        "operationId": "get-messages",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          },
          {
            "name": "lastMessageId",
            "in": "query",
            "description": "Message ID of the last message in the list as a string",
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of messages to be fetched from the conversation. Default limit is 20",
            "schema": {
              "type": "number",
              "example": 20
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Types of message to fetched separated with comma",
            "schema": {
              "enum": [
                "TYPE_CALL",
                "TYPE_SMS",
                "TYPE_EMAIL",
                "TYPE_FACEBOOK",
                "TYPE_GMB",
                "TYPE_INSTAGRAM",
                "TYPE_WHATSAPP",
                "TYPE_ACTIVITY_APPOINTMENT",
                "TYPE_ACTIVITY_CONTACT",
                "TYPE_ACTIVITY_INVOICE",
                "TYPE_ACTIVITY_PAYMENT",
                "TYPE_ACTIVITY_OPPORTUNITY",
                "TYPE_LIVE_CHAT",
                "TYPE_INTERNAL_COMMENTS",
                "TYPE_ACTIVITY_EMPLOYEE_ACTION_LOG"
              ],
              "type": "string",
              "example": "TYPE_SMS,TYPE_CALL"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages for the conversation id of the given type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessagesByConversationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations/message.readonly"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send a new message",
        "description": "Post the necessary fields for the API to send a new message.",
        "operationId": "send-a-new-message",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created the message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendMessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations/message.write"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/messages/inbound": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Add an inbound message",
        "description": "Post the necessary fields for the API to add a new inbound message. <br />",
        "operationId": "add-an-inbound-message",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessMessageBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created the message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessMessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations/message.write"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/messages/outbound": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Add an external outbound call",
        "description": "Post the necessary fields for the API to add a new outbound call.",
        "operationId": "add-an-outbound-message",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessOutboundMessageBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created the message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessMessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations/message.write"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/messages/{messageId}/schedule": {
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "Cancel a scheduled message.",
        "description": "Post the messageId for the API to delete a scheduled message. <br />",
        "operationId": "cancel-scheduled-message",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Message Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The scheduled message was cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelScheduledResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations/message.write"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/messages/upload": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Upload file attachments",
        "description": "Post the necessary fields for the API to upload files. The files need to be a buffer with the key \"fileAttachment\". <br /><br /> The allowed file types are: <br/> <ul><li>JPG</li><li>JPEG</li><li>PNG</li><li>MP4</li><li>MPEG</li><li>ZIP</li><li>RAR</li><li>PDF</li><li>DOC</li><li>DOCX</li><li>TXT</li><li>MP3</li><li>WAV</li></ul> <br /><br /> The API will return an object with the URLs",
        "operationId": "upload-file-attachments",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadFilesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Uploaded the file successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFilesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFilesErrorResponseDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFilesErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations/message.write"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/messages/{messageId}/status": {
      "put": {
        "tags": [
          "Messages"
        ],
        "summary": "Update message status",
        "description": "Post the necessary fields for the API to update message status.",
        "operationId": "update-message-status",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Message Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessageStatusDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created the message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendMessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations/message.write"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/messages/{messageId}/locations/{locationId}/recording": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get Recording by Message ID",
        "description": "Get the recording for a message by passing the message id",
        "operationId": "get-message-recording",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gives the attached recording to the message",
            "headers": {
              "Content-Type": {
                "description": "audio/x-wav"
              },
              "Content-Disposition": {
                "description": "Attachment; filename=audio.wav"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          },
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/conversations/conversations/locations/{locationId}/messages/{messageId}/transcription": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get transcription by Message ID",
        "description": "Get the recording transcription for a message by passing the message id",
        "operationId": "get-message-transcription",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gives the attached recording transcription to the message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessageTranscriptionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          },
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/conversations/conversations/locations/{locationId}/messages/{messageId}/transcription/download": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Download transcription by Message ID",
        "description": "Download the recording transcription for a message by passing the message id",
        "operationId": "download-message-transcription",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Location ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tDtDnQdgm2LXpyiqYvZ6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Downloads the attached transcription of the message",
            "headers": {
              "Content-Type": {
                "description": "text/plain"
              },
              "Content-Disposition": {
                "description": "Attachment; filename=\"transcription.txt\""
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [ ]
          },
          {
            "Location-Access": [ ]
          }
        ]
      }
    },
    "/conversations/conversations/providers/live-chat/typing": {
      "post": {
        "tags": [
          "Providers"
        ],
        "summary": "Agent/Ai-Bot is typing a message indicator for live chat",
        "description": "Agent/AI-Bot will call this when they are typing a message in live chat message",
        "operationId": "live-chat-agent-typing",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTypingBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Show typing indicator for live chat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLiveChatMessageFeedbackResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "conversations/livechat.write"
            ]
          }
        ]
      }
    },
    "/conversations/conversations/": {
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "Create Conversation",
        "description": "Creates a new conversation with the data provided",
        "operationId": "create-conversation",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-04-15"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConversationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "conversations.write"
            ]
          }
        ]
      }
    },
    "/courses/courses/courses-exporter/public/import": {
      "post": {
        "summary": "Import Courses",
        "description": "Import Courses through public channels",
        "operationId": "import-courses",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicExporterPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": [ ]
          }
        ]
      }
    },
    "/users/users/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search Users",
        "description": "Search Users",
        "operationId": "search-users",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company ID in which the search needs to be performed",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5DP41231LkQsiKESj6rh"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The search term for the user is matched based on the user full name, email or phone",
            "schema": {
              "type": "string",
              "example": "John"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "No of results to be skipped before returning the result",
            "schema": {
              "type": "string",
              "default": "0",
              "example": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "No of results to be limited before returning the result",
            "schema": {
              "type": "string",
              "default": "25",
              "example": "10"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location ID in which the search needs to be performed",
            "schema": {
              "type": "string",
              "example": "5DP41231LkQsiKESj6rh"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the users to be filtered in the search",
            "schema": {
              "type": "string",
              "example": "agency"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role of the users to be filtered in the search",
            "schema": {
              "type": "string",
              "example": "admin"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "List of User IDs to be filtered in the search",
            "schema": {
              "type": "string",
              "example": "5DP4iH6HLkQsiKESj6rh,5DP4iH6HLkQsiKESj34h"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The field on which sort is applied in which the results need to be sorted. Default is based on the first and last name",
            "schema": {
              "type": "string",
              "example": "dateAdded"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The direction in which the results need to be sorted",
            "schema": {
              "type": "string",
              "example": "asc"
            }
          },
          {
            "name": "enabled2waySync",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUserSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "users.readonly"
            ]
          },
          {
            "Location-Access": [
              "users.readonly"
            ]
          }
        ]
      }
    },
    "/users/users/search/filter-by-email": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Filter Users by Email",
        "description": "Filter users by company ID, deleted status, and email array",
        "operationId": "filter-users-by-email",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterByEmailDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUserSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "users.readonly"
            ]
          },
          {
            "Location-Access": [
              "users.readonly"
            ]
          }
        ]
      }
    },
    "/users/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "description": "Get User",
        "operationId": "get-user",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ve9EPM428h8vShlRW1KT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "users.readonly"
            ]
          },
          {
            "Location-Access": [
              "users.readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update User",
        "operationId": "update-user",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "users.write"
            ]
          },
          {
            "Location-Access": [
              "users.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete User",
        "operationId": "delete-user",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUserSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "users.write"
            ]
          },
          {
            "Location-Access": [
              "users.write"
            ]
          }
        ]
      }
    },
    "/users/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User by Location",
        "description": "Get User by Location",
        "operationId": "get-user-by-location",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "s4BtzHFWmT28mbb85uPa"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Location-Access": [
              "users.readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create User",
        "description": "Create User",
        "operationId": "create-user",
        "parameters": [
          {
            "name": "Version",
            "in": "header",
            "description": "API Version",
            "required": true,
            "schema": {
              "enum": [
                "2021-07-28"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSuccessfulResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/BadRequestDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnauthorizedDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../common/common-schemas.json#/components/schemas/UnprocessableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Agency-Access": [
              "users.write"
            ]
          },
          {
            "Location-Access": [
              "users.write"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ShippingZoneCountryStateDto": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "enum": [
              "AL",
              "AK",
              "AS",
              "AZ",
              "AR",
              "AA",
              "AE",
              "AP",
              "CA",
              "CO",
              "CT",
              "DE",
              "DC",
              "FM",
              "FL",
              "GA",
              "GU",
              "HI",
              "ID",
              "IL",
              "IN",
              "IA",
              "KS",
              "KY",
              "LA",
              "ME",
              "MH",
              "MD",
              "MA",
              "MI",
              "MN",
              "MS",
              "MO",
              "MT",
              "NE",
              "NV",
              "NH",
              "NJ",
              "NM",
              "NY",
              "NC",
              "ND",
              "MP",
              "OH",
              "OK",
              "OR",
              "PW",
              "PA",
              "PR",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VT",
              "VI",
              "VA",
              "WA",
              "WV",
              "WI",
              "WY",
              "AB",
              "BC",
              "MB",
              "NB",
              "NL",
              "NT",
              "NS",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YT",
              "BA",
              "CT",
              "CC",
              "CH",
              "CB",
              "CN",
              "ER",
              "FO",
              "JY",
              "LP",
              "LR",
              "MZ",
              "MN",
              "NQ",
              "RN",
              "SA",
              "SJ",
              "SL",
              "SC",
              "SF",
              "SE",
              "TF",
              "TU",
              "ACT",
              "NSW",
              "NT",
              "QLD",
              "SA",
              "TAS",
              "VIC",
              "WA",
              "AC",
              "AL",
              "AM",
              "AP",
              "BA",
              "CE",
              "DF",
              "ES",
              "GO",
              "MA",
              "MG",
              "MS",
              "MT",
              "PA",
              "PB",
              "PE",
              "PI",
              "PR",
              "RJ",
              "RN",
              "RO",
              "RR",
              "RS",
              "SC",
              "SE",
              "SP",
              "TO",
              "AI",
              "AN",
              "AP",
              "AT",
              "BI",
              "CO",
              "AR",
              "LI",
              "LL",
              "LR",
              "MA",
              "ML",
              "RM",
              "TA",
              "VS",
              "NB",
              "AMA",
              "ANT",
              "ARA",
              "ATL",
              "BOL",
              "BOY",
              "CAL",
              "CAQ",
              "CAS",
              "CAU",
              "CES",
              "CHO",
              "CUN",
              "COR",
              "GUA",
              "GUV",
              "HUI",
              "LAG",
              "MAG",
              "MET",
              "NAR",
              "NSA",
              "PUT",
              "QUI",
              "RIS",
              "SAP",
              "SAN",
              "SUC",
              "TOL",
              "VAC",
              "VAU",
              "VID",
              "CR-A",
              "CR-C",
              "CR-G",
              "CR-H",
              "CR-L",
              "CR-P",
              "CR-SJ",
              "GT-16",
              "GT-15",
              "GT-04",
              "GT-20",
              "GT-02",
              "GT-05",
              "GT-01",
              "GT-13",
              "GT-18",
              "GT-21",
              "GT-22",
              "GT-17",
              "GT-09",
              "GT-14",
              "GT-11",
              "GT-03",
              "GT-12",
              "GT-06",
              "GT-07",
              "GT-10",
              "GT-08",
              "GT-19",
              "HK",
              "KL",
              "NT",
              "AN",
              "AP",
              "AR",
              "AS",
              "BR",
              "CH",
              "CG",
              "DN",
              "DD",
              "DL",
              "GA",
              "GJ",
              "HR",
              "HP",
              "JK",
              "JH",
              "KA",
              "KL",
              "LA",
              "LD",
              "MP",
              "MH",
              "MN",
              "ML",
              "MZ",
              "NL",
              "OR",
              "PY",
              "PB",
              "RJ",
              "SK",
              "TN",
              "TS",
              "TR",
              "UP",
              "UK",
              "WB",
              "CW",
              "CN",
              "CE",
              "CO",
              "DL",
              "D",
              "G",
              "KY",
              "KE",
              "KK",
              "LS",
              "LM",
              "LK",
              "LD",
              "LH",
              "MO",
              "MH",
              "MN",
              "OY",
              "RN",
              "SO",
              "TA",
              "WD",
              "WH",
              "WX",
              "WW",
              "AG",
              "AL",
              "AN",
              "AO",
              "AR",
              "AP",
              "AT",
              "AV",
              "BA",
              "BT",
              "BL",
              "BN",
              "BG",
              "BI",
              "BO",
              "BZ",
              "BS",
              "BR",
              "CA",
              "CL",
              "CB",
              "CI",
              "CE",
              "CT",
              "CZ",
              "CH",
              "CO",
              "CS",
              "CR",
              "KR",
              "CN",
              "EN",
              "FM",
              "FE",
              "FI",
              "FG",
              "FC",
              "FR",
              "GE",
              "GO",
              "GR",
              "IM",
              "IS",
              "AQ",
              "SP",
              "LT",
              "LE",
              "LC",
              "LI",
              "LO",
              "LU",
              "MC",
              "MN",
              "MS",
              "MT",
              "VS",
              "ME",
              "MI",
              "MO",
              "MB",
              "NA",
              "NO",
              "NU",
              "OG",
              "OT",
              "OR",
              "PD",
              "PA",
              "PR",
              "PV",
              "PG",
              "PU",
              "PE",
              "PC",
              "PI",
              "PT",
              "PN",
              "PZ",
              "PO",
              "RG",
              "RA",
              "RC",
              "RE",
              "RI",
              "RN",
              "RM",
              "RO",
              "SA",
              "SS",
              "SV",
              "SI",
              "SR",
              "SO",
              "TA",
              "TE",
              "TR",
              "TO",
              "TP",
              "TN",
              "TV",
              "TS",
              "UD",
              "VA",
              "VE",
              "VB",
              "VC",
              "VR",
              "VV",
              "VI",
              "VT",
              "JP-23",
              "JP-05",
              "JP-02",
              "JP-12",
              "JP-38",
              "JP-18",
              "JP-40",
              "JP-07",
              "JP-21",
              "JP-10",
              "JP-34",
              "JP-01",
              "JP-28",
              "JP-08",
              "JP-17",
              "JP-03",
              "JP-37",
              "JP-46",
              "JP-14",
              "JP-39",
              "JP-43",
              "JP-26",
              "JP-24",
              "JP-04",
              "JP-45",
              "JP-20",
              "JP-42",
              "JP-29",
              "JP-15",
              "JP-44",
              "JP-33",
              "JP-47",
              "JP-27",
              "JP-41",
              "JP-11",
              "JP-25",
              "JP-32",
              "JP-22",
              "JP-09",
              "JP-36",
              "JP-13",
              "JP-31",
              "JP-16",
              "JP-30",
              "JP-06",
              "JP-35",
              "JP-19",
              "JHR",
              "KDH",
              "KTN",
              "KUL",
              "LBN",
              "MLK",
              "NSN",
              "PHG",
              "PNG",
              "PRK",
              "PLS",
              "PJY",
              "SBH",
              "SWK",
              "SGR",
              "TRG",
              "AGU",
              "BCN",
              "BCS",
              "CAM",
              "CHP",
              "CHH",
              "CMX",
              "COA",
              "COL",
              "DUR",
              "GUA",
              "GRO",
              "HID",
              "JAL",
              "MIC",
              "MOR",
              "MEX",
              "NAY",
              "NLE",
              "OAX",
              "PUE",
              "QUE",
              "ROO",
              "SLP",
              "SIN",
              "SON",
              "TAB",
              "TAM",
              "TLA",
              "VER",
              "YUC",
              "ZAC",
              "AUK",
              "BOP",
              "CAN",
              "CIT",
              "GIS",
              "HKB",
              "MWT",
              "MBH",
              "NSN",
              "NTL",
              "OTA",
              "STL",
              "TKI",
              "TAS",
              "WKO",
              "WGN",
              "WTC",
              "JK",
              "BA",
              "GB",
              "IS",
              "KP",
              "PB",
              "SD",
              "AMA",
              "ANC",
              "APU",
              "ARE",
              "AYA",
              "CAJ",
              "CAL",
              "CUS",
              "HUV",
              "HUC",
              "ICA",
              "JUN",
              "LAL",
              "LAM",
              "LIM",
              "LOR",
              "MDD",
              "MOQ",
              "PAS",
              "PIU",
              "PUN",
              "SAM",
              "TAC",
              "TUM",
              "UCA",
              "PH-ABR",
              "PH-AGN",
              "PH-AGS",
              "PH-AKL",
              "PH-ALB",
              "PH-ANT",
              "PH-APA",
              "PH-AUR",
              "PH-BAS",
              "PH-BAN",
              "PH-BTN",
              "PH-BTG",
              "PH-BEN",
              "PH-BIL",
              "PH-BOH",
              "PH-BUK",
              "PH-BUL",
              "PH-CAG",
              "PH-CAN",
              "PH-CAS",
              "PH-CAM",
              "PH-CAP",
              "PH-CAT",
              "PH-CAV",
              "PH-CEB",
              "PH-NCO",
              "PH-DAO",
              "PH-DAV",
              "PH-DAS",
              "PH-EAS",
              "PH-GUI",
              "PH-IFU",
              "PH-ILN",
              "PH-ILS",
              "PH-ILI",
              "PH-ISA",
              "PH-KAL",
              "PH-LUN",
              "PH-LAG",
              "PH-LAN",
              "PH-LAS",
              "PH-LEY",
              "PH-MAG",
              "PH-MAD",
              "PH-MAS",
              "PH-00",
              "PH-MSC",
              "PH-MSR",
              "PH-MOU",
              "PH-NEC",
              "PH-NER",
              "PH-NSA",
              "PH-NUE",
              "PH-NUV",
              "PH-MDC",
              "PH-MDR",
              "PH-PLW",
              "PH-PAM",
              "PH-PAN",
              "PH-QUE",
              "PH-QUI",
              "PH-RIZ",
              "PH-ROM",
              "PH-WSA",
              "PH-SAR",
              "PH-SIG",
              "PH-SOR",
              "PH-SCO",
              "PH-SLE",
              "PH-SUK",
              "PH-SLU",
              "PH-SUN",
              "PH-SUR",
              "PH-TAR",
              "PH-TAW",
              "PH-ZMB",
              "PH-ZAN",
              "PH-ZAS",
              "PH-ZSI",
              "PT-20",
              "PT-01",
              "PT-02",
              "PT-03",
              "PT-04",
              "PT-05",
              "PT-06",
              "PT-07",
              "PT-08",
              "PT-09",
              "PT-10",
              "PT-11",
              "PT-30",
              "PT-12",
              "PT-13",
              "PT-14",
              "PT-15",
              "PT-16",
              "PT-17",
              "PT-18",
              "AB",
              "AR",
              "AG",
              "BC",
              "BH",
              "BN",
              "BT",
              "BR",
              "BV",
              "B",
              "BZ",
              "CL",
              "CS",
              "CJ",
              "CT",
              "CV",
              "DB",
              "DJ",
              "GL",
              "GR",
              "GJ",
              "HR",
              "HD",
              "IL",
              "IS",
              "IF",
              "MM",
              "MH",
              "MS",
              "NT",
              "OT",
              "PH",
              "SJ",
              "SM",
              "SB",
              "SV",
              "TR",
              "TM",
              "TL",
              "VL",
              "VS",
              "VN",
              "KR-26",
              "KR-43",
              "KR-44",
              "KR-27",
              "KR-30",
              "KR-42",
              "KR-29",
              "KR-47",
              "KR-41",
              "KR-48",
              "KR-28",
              "KR-49",
              "KR-45",
              "KR-46",
              "KR-50",
              "KR-11",
              "KR-31",
              "C",
              "VI",
              "AB",
              "A",
              "AL",
              "O",
              "AV",
              "BA",
              "PM",
              "B",
              "BU",
              "CC",
              "CA",
              "S",
              "CS",
              "CE",
              "CR",
              "CO",
              "CU",
              "GI",
              "GR",
              "GU",
              "SS",
              "H",
              "HU",
              "J",
              "LO",
              "GC",
              "LE",
              "L",
              "LU",
              "M",
              "MA",
              "ML",
              "MU",
              "NA",
              "OR",
              "P",
              "PO",
              "SA",
              "TF",
              "SG",
              "SE",
              "SO",
              "T",
              "TE",
              "TO",
              "V",
              "VA",
              "BI",
              "ZA",
              "Z",
              "AZ",
              "AJ",
              "DU",
              "FU",
              "RK",
              "SH",
              "UQ",
              "BFP",
              "ENG",
              "NIR",
              "SCT",
              "WLS",
              "AR",
              "CA",
              "CL",
              "CO",
              "DU",
              "FS",
              "FD",
              "LA",
              "MA",
              "MO",
              "PA",
              "RN",
              "RV",
              "RO",
              "SA",
              "SJ",
              "SO",
              "TA",
              "TT"
            ],
            "type": "string",
            "description": "State code",
            "example": "VA"
          }
        }
      },
      "ShippingZoneCountryDto": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "enum": [
              [
                "US",
                "CA",
                "AF",
                "AX",
                "AL",
                "DZ",
                "AS",
                "AD",
                "AO",
                "AI",
                "AQ",
                "AG",
                "AR",
                "AM",
                "AW",
                "AU",
                "AT",
                "AZ",
                "BS",
                "BH",
                "BD",
                "BB",
                "BY",
                "BE",
                "BZ",
                "BJ",
                "BM",
                "BT",
                "BO",
                "BA",
                "BW",
                "BV",
                "BR",
                "IO",
                "BN",
                "BG",
                "BF",
                "BI",
                "KH",
                "CM",
                "CV",
                "KY",
                "CF",
                "TD",
                "CL",
                "CN",
                "CX",
                "CC",
                "CO",
                "KM",
                "CG",
                "CD",
                "CK",
                "CR",
                "CI",
                "HR",
                "CU",
                "CY",
                "CZ",
                "DK",
                "DJ",
                "DM",
                "DO",
                "EC",
                "EG",
                "SV",
                "GQ",
                "ER",
                "EE",
                "ET",
                "FK",
                "FO",
                "FJ",
                "FI",
                "FR",
                "GF",
                "PF",
                "TF",
                "GA",
                "GM",
                "GE",
                "DE",
                "GH",
                "GI",
                "GR",
                "GL",
                "GD",
                "GP",
                "GU",
                "GT",
                "GG",
                "GN",
                "GW",
                "GY",
                "HT",
                "HM",
                "VA",
                "HN",
                "HK",
                "HU",
                "IS",
                "IN",
                "ID",
                "IR",
                "IQ",
                "IE",
                "IM",
                "IL",
                "IT",
                "JM",
                "JP",
                "JE",
                "JO",
                "KZ",
                "KE",
                "KI",
                "KP",
                "XK",
                "KW",
                "KG",
                "LA",
                "LV",
                "LB",
                "LS",
                "LR",
                "LY",
                "LI",
                "LT",
                "LU",
                "MO",
                "MK",
                "MG",
                "MW",
                "MY",
                "MV",
                "ML",
                "MT",
                "MH",
                "MQ",
                "MR",
                "MU",
                "YT",
                "MX",
                "FM",
                "MD",
                "MC",
                "MN",
                "ME",
                "MS",
                "MA",
                "MZ",
                "MM",
                "NA",
                "NR",
                "NP",
                "NL",
                "AN",
                "NC",
                "NZ",
                "NI",
                "NE",
                "NG",
                "NU",
                "NF",
                "MP",
                "NO",
                "OM",
                "PK",
                "PW",
                "PS",
                "PA",
                "PG",
                "PY",
                "PE",
                "PH",
                "PN",
                "PL",
                "PT",
                "PR",
                "QA",
                "RE",
                "RO",
                "RU",
                "RW",
                "SH",
                "KN",
                "LC",
                "MF",
                "PM",
                "VC",
                "WS",
                "SM",
                "ST",
                "SA",
                "SN",
                "RS",
                "SC",
                "SL",
                "SG",
                "SX",
                "SK",
                "SI",
                "SB",
                "SO",
                "ZA",
                "GS",
                "KR",
                "ES",
                "LK",
                "SD",
                "SR",
                "SJ",
                "SZ",
                "SE",
                "CH",
                "SY",
                "TW",
                "TJ",
                "TZ",
                "TH",
                "TL",
                "TG",
                "TK",
                "TO",
                "TT",
                "TN",
                "TR",
                "TM",
                "TC",
                "TV",
                "UG",
                "UA",
                "AE",
                "GB",
                "UM",
                "UY",
                "UZ",
                "VU",
                "VE",
                "VN",
                "VG",
                "VI",
                "WF",
                "EH",
                "YE",
                "ZM",
                "ZW"
              ]
            ],
            "type": "number",
            "description": "Country code",
            "example": "US"
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingZoneCountryStateDto"
            },
            "description": "List of states that are available. If states is empty, then all states are available"
          }
        }
      },
      "CreateShippingZoneDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "countries"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping zone",
            "example": "North zone"
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingZoneCountryDto"
            },
            "description": "List of countries that are available"
          }
        }
      },
      "ShippingCarrierServiceDto": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the shipping carrier service",
            "example": "Priority Mail Express International"
          },
          "value": {
            "type": "string",
            "description": "Value of the shipping carrier service",
            "example": "PriorityMailExpressInternational"
          }
        }
      },
      "ShippingRateSchema": {
        "required": [
          "altId",
          "altType",
          "name",
          "currency",
          "amount",
          "conditionType",
          "minCondition",
          "maxCondition",
          "shippingCarrierId",
          "_id",
          "shippingZoneId",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping zone",
            "example": "North zone"
          },
          "description": {
            "type": "string",
            "description": "Delivery description",
            "example": "Ships next day"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the amount of the rate / handling fee",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the shipping rate if it is normal rate (0 means free ). Fixed Handling fee if it is a carrier rate (it will add to the carrier rate).",
            "example": 99.99
          },
          "conditionType": {
            "enum": [
              "none",
              "price",
              "weight"
            ],
            "type": "string",
            "description": "Type of condition to provide the conditional pricing",
            "example": "price"
          },
          "minCondition": {
            "type": "number",
            "description": "Minimum condition for applying this price. set 0 or null if there is no minimum",
            "example": 99.99
          },
          "maxCondition": {
            "type": "number",
            "description": "Maximum condition for applying this price. set 0 or null if there is no maximum",
            "example": 99.99
          },
          "isCarrierRate": {
            "type": "boolean",
            "description": "is this a carrier rate",
            "example": true
          },
          "shippingCarrierId": {
            "type": "string",
            "description": "Shipping carrier id",
            "example": "655b33a82209e60b6adb87a5"
          },
          "percentageOfRateFee": {
            "type": "number",
            "description": "Percentage of rate fee if it is a carrier rate.",
            "example": 10.99
          },
          "shippingCarrierServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCarrierServiceDto"
            },
            "description": "An array of items"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "The unique identifier for the shipping zone.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "ShippingZoneSchema": {
        "required": [
          "altId",
          "altType",
          "name",
          "countries",
          "_id",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping zone",
            "example": "North zone"
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingZoneCountryDto"
            },
            "description": "List of countries that are available"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "shippingRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingRateSchema"
            },
            "description": "Array of shipping rates under this shipping zone"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "CreateShippingZoneResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingZoneSchema"
              }
            ],
            "description": "Shipping zone data"
          }
        }
      },
      "ListShippingZoneResponseDto": {
        "required": [
          "total",
          "data"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of items",
            "example": 20
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingZoneSchema"
            },
            "description": "An array of items"
          }
        }
      },
      "GetShippingZoneResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingZoneSchema"
              }
            ],
            "description": "Shipping zone data"
          }
        }
      },
      "UpdateShippingZoneDto": {
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping zone",
            "example": "North zone"
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingZoneCountryDto"
            },
            "description": "List of countries that are available"
          }
        }
      },
      "UpdateShippingZoneResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingZoneSchema"
              }
            ],
            "description": "Shipping zone data"
          }
        }
      },
      "DeleteShippingZoneResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "ContactAddress": {
        "required": [
          "country"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the customer",
            "example": "John Doe"
          },
          "companyName": {
            "type": "string",
            "description": "Name of the Company",
            "example": "ABC Company"
          },
          "addressLine1": {
            "type": "string",
            "description": "Address line 1 of the customer",
            "example": "123 Main St."
          },
          "country": {
            "enum": [
              "US",
              "CA",
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KP",
              "XK",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SX",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "KR",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "UA",
              "AE",
              "GB",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ],
            "type": "string",
            "description": "Country code of the customer",
            "example": "US"
          },
          "state": {
            "enum": [
              "AL",
              "AK",
              "AS",
              "AZ",
              "AR",
              "AA",
              "AE",
              "AP",
              "CA",
              "CO",
              "CT",
              "DE",
              "DC",
              "FM",
              "FL",
              "GA",
              "GU",
              "HI",
              "ID",
              "IL",
              "IN",
              "IA",
              "KS",
              "KY",
              "LA",
              "ME",
              "MH",
              "MD",
              "MA",
              "MI",
              "MN",
              "MS",
              "MO",
              "MT",
              "NE",
              "NV",
              "NH",
              "NJ",
              "NM",
              "NY",
              "NC",
              "ND",
              "MP",
              "OH",
              "OK",
              "OR",
              "PW",
              "PA",
              "PR",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VT",
              "VI",
              "VA",
              "WA",
              "WV",
              "WI",
              "WY",
              "AB",
              "BC",
              "MB",
              "NB",
              "NL",
              "NT",
              "NS",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YT",
              "BA",
              "CT",
              "CC",
              "CH",
              "CB",
              "CN",
              "ER",
              "FO",
              "JY",
              "LP",
              "LR",
              "MZ",
              "MN",
              "NQ",
              "RN",
              "SA",
              "SJ",
              "SL",
              "SC",
              "SF",
              "SE",
              "TF",
              "TU",
              "ACT",
              "NSW",
              "NT",
              "QLD",
              "SA",
              "TAS",
              "VIC",
              "WA",
              "AC",
              "AL",
              "AM",
              "AP",
              "BA",
              "CE",
              "DF",
              "ES",
              "GO",
              "MA",
              "MG",
              "MS",
              "MT",
              "PA",
              "PB",
              "PE",
              "PI",
              "PR",
              "RJ",
              "RN",
              "RO",
              "RR",
              "RS",
              "SC",
              "SE",
              "SP",
              "TO",
              "AI",
              "AN",
              "AP",
              "AT",
              "BI",
              "CO",
              "AR",
              "LI",
              "LL",
              "LR",
              "MA",
              "ML",
              "RM",
              "TA",
              "VS",
              "NB",
              "AMA",
              "ANT",
              "ARA",
              "ATL",
              "BOL",
              "BOY",
              "CAL",
              "CAQ",
              "CAS",
              "CAU",
              "CES",
              "CHO",
              "CUN",
              "COR",
              "GUA",
              "GUV",
              "HUI",
              "LAG",
              "MAG",
              "MET",
              "NAR",
              "NSA",
              "PUT",
              "QUI",
              "RIS",
              "SAP",
              "SAN",
              "SUC",
              "TOL",
              "VAC",
              "VAU",
              "VID",
              "CR-A",
              "CR-C",
              "CR-G",
              "CR-H",
              "CR-L",
              "CR-P",
              "CR-SJ",
              "GT-16",
              "GT-15",
              "GT-04",
              "GT-20",
              "GT-02",
              "GT-05",
              "GT-01",
              "GT-13",
              "GT-18",
              "GT-21",
              "GT-22",
              "GT-17",
              "GT-09",
              "GT-14",
              "GT-11",
              "GT-03",
              "GT-12",
              "GT-06",
              "GT-07",
              "GT-10",
              "GT-08",
              "GT-19",
              "HK",
              "KL",
              "NT",
              "AN",
              "AP",
              "AR",
              "AS",
              "BR",
              "CH",
              "CG",
              "DN",
              "DD",
              "DL",
              "GA",
              "GJ",
              "HR",
              "HP",
              "JK",
              "JH",
              "KA",
              "KL",
              "LA",
              "LD",
              "MP",
              "MH",
              "MN",
              "ML",
              "MZ",
              "NL",
              "OR",
              "PY",
              "PB",
              "RJ",
              "SK",
              "TN",
              "TS",
              "TR",
              "UP",
              "UK",
              "WB",
              "CW",
              "CN",
              "CE",
              "CO",
              "DL",
              "D",
              "G",
              "KY",
              "KE",
              "KK",
              "LS",
              "LM",
              "LK",
              "LD",
              "LH",
              "MO",
              "MH",
              "MN",
              "OY",
              "RN",
              "SO",
              "TA",
              "WD",
              "WH",
              "WX",
              "WW",
              "AG",
              "AL",
              "AN",
              "AO",
              "AR",
              "AP",
              "AT",
              "AV",
              "BA",
              "BT",
              "BL",
              "BN",
              "BG",
              "BI",
              "BO",
              "BZ",
              "BS",
              "BR",
              "CA",
              "CL",
              "CB",
              "CI",
              "CE",
              "CT",
              "CZ",
              "CH",
              "CO",
              "CS",
              "CR",
              "KR",
              "CN",
              "EN",
              "FM",
              "FE",
              "FI",
              "FG",
              "FC",
              "FR",
              "GE",
              "GO",
              "GR",
              "IM",
              "IS",
              "AQ",
              "SP",
              "LT",
              "LE",
              "LC",
              "LI",
              "LO",
              "LU",
              "MC",
              "MN",
              "MS",
              "MT",
              "VS",
              "ME",
              "MI",
              "MO",
              "MB",
              "NA",
              "NO",
              "NU",
              "OG",
              "OT",
              "OR",
              "PD",
              "PA",
              "PR",
              "PV",
              "PG",
              "PU",
              "PE",
              "PC",
              "PI",
              "PT",
              "PN",
              "PZ",
              "PO",
              "RG",
              "RA",
              "RC",
              "RE",
              "RI",
              "RN",
              "RM",
              "RO",
              "SA",
              "SS",
              "SV",
              "SI",
              "SR",
              "SO",
              "TA",
              "TE",
              "TR",
              "TO",
              "TP",
              "TN",
              "TV",
              "TS",
              "UD",
              "VA",
              "VE",
              "VB",
              "VC",
              "VR",
              "VV",
              "VI",
              "VT",
              "JP-23",
              "JP-05",
              "JP-02",
              "JP-12",
              "JP-38",
              "JP-18",
              "JP-40",
              "JP-07",
              "JP-21",
              "JP-10",
              "JP-34",
              "JP-01",
              "JP-28",
              "JP-08",
              "JP-17",
              "JP-03",
              "JP-37",
              "JP-46",
              "JP-14",
              "JP-39",
              "JP-43",
              "JP-26",
              "JP-24",
              "JP-04",
              "JP-45",
              "JP-20",
              "JP-42",
              "JP-29",
              "JP-15",
              "JP-44",
              "JP-33",
              "JP-47",
              "JP-27",
              "JP-41",
              "JP-11",
              "JP-25",
              "JP-32",
              "JP-22",
              "JP-09",
              "JP-36",
              "JP-13",
              "JP-31",
              "JP-16",
              "JP-30",
              "JP-06",
              "JP-35",
              "JP-19",
              "JHR",
              "KDH",
              "KTN",
              "KUL",
              "LBN",
              "MLK",
              "NSN",
              "PHG",
              "PNG",
              "PRK",
              "PLS",
              "PJY",
              "SBH",
              "SWK",
              "SGR",
              "TRG",
              "AGU",
              "BCN",
              "BCS",
              "CAM",
              "CHP",
              "CHH",
              "CMX",
              "COA",
              "COL",
              "DUR",
              "GUA",
              "GRO",
              "HID",
              "JAL",
              "MIC",
              "MOR",
              "MEX",
              "NAY",
              "NLE",
              "OAX",
              "PUE",
              "QUE",
              "ROO",
              "SLP",
              "SIN",
              "SON",
              "TAB",
              "TAM",
              "TLA",
              "VER",
              "YUC",
              "ZAC",
              "AUK",
              "BOP",
              "CAN",
              "CIT",
              "GIS",
              "HKB",
              "MWT",
              "MBH",
              "NSN",
              "NTL",
              "OTA",
              "STL",
              "TKI",
              "TAS",
              "WKO",
              "WGN",
              "WTC",
              "JK",
              "BA",
              "GB",
              "IS",
              "KP",
              "PB",
              "SD",
              "AMA",
              "ANC",
              "APU",
              "ARE",
              "AYA",
              "CAJ",
              "CAL",
              "CUS",
              "HUV",
              "HUC",
              "ICA",
              "JUN",
              "LAL",
              "LAM",
              "LIM",
              "LOR",
              "MDD",
              "MOQ",
              "PAS",
              "PIU",
              "PUN",
              "SAM",
              "TAC",
              "TUM",
              "UCA",
              "PH-ABR",
              "PH-AGN",
              "PH-AGS",
              "PH-AKL",
              "PH-ALB",
              "PH-ANT",
              "PH-APA",
              "PH-AUR",
              "PH-BAS",
              "PH-BAN",
              "PH-BTN",
              "PH-BTG",
              "PH-BEN",
              "PH-BIL",
              "PH-BOH",
              "PH-BUK",
              "PH-BUL",
              "PH-CAG",
              "PH-CAN",
              "PH-CAS",
              "PH-CAM",
              "PH-CAP",
              "PH-CAT",
              "PH-CAV",
              "PH-CEB",
              "PH-NCO",
              "PH-DAO",
              "PH-DAV",
              "PH-DAS",
              "PH-EAS",
              "PH-GUI",
              "PH-IFU",
              "PH-ILN",
              "PH-ILS",
              "PH-ILI",
              "PH-ISA",
              "PH-KAL",
              "PH-LUN",
              "PH-LAG",
              "PH-LAN",
              "PH-LAS",
              "PH-LEY",
              "PH-MAG",
              "PH-MAD",
              "PH-MAS",
              "PH-00",
              "PH-MSC",
              "PH-MSR",
              "PH-MOU",
              "PH-NEC",
              "PH-NER",
              "PH-NSA",
              "PH-NUE",
              "PH-NUV",
              "PH-MDC",
              "PH-MDR",
              "PH-PLW",
              "PH-PAM",
              "PH-PAN",
              "PH-QUE",
              "PH-QUI",
              "PH-RIZ",
              "PH-ROM",
              "PH-WSA",
              "PH-SAR",
              "PH-SIG",
              "PH-SOR",
              "PH-SCO",
              "PH-SLE",
              "PH-SUK",
              "PH-SLU",
              "PH-SUN",
              "PH-SUR",
              "PH-TAR",
              "PH-TAW",
              "PH-ZMB",
              "PH-ZAN",
              "PH-ZAS",
              "PH-ZSI",
              "PT-20",
              "PT-01",
              "PT-02",
              "PT-03",
              "PT-04",
              "PT-05",
              "PT-06",
              "PT-07",
              "PT-08",
              "PT-09",
              "PT-10",
              "PT-11",
              "PT-30",
              "PT-12",
              "PT-13",
              "PT-14",
              "PT-15",
              "PT-16",
              "PT-17",
              "PT-18",
              "AB",
              "AR",
              "AG",
              "BC",
              "BH",
              "BN",
              "BT",
              "BR",
              "BV",
              "B",
              "BZ",
              "CL",
              "CS",
              "CJ",
              "CT",
              "CV",
              "DB",
              "DJ",
              "GL",
              "GR",
              "GJ",
              "HR",
              "HD",
              "IL",
              "IS",
              "IF",
              "MM",
              "MH",
              "MS",
              "NT",
              "OT",
              "PH",
              "SJ",
              "SM",
              "SB",
              "SV",
              "TR",
              "TM",
              "TL",
              "VL",
              "VS",
              "VN",
              "KR-26",
              "KR-43",
              "KR-44",
              "KR-27",
              "KR-30",
              "KR-42",
              "KR-29",
              "KR-47",
              "KR-41",
              "KR-48",
              "KR-28",
              "KR-49",
              "KR-45",
              "KR-46",
              "KR-50",
              "KR-11",
              "KR-31",
              "C",
              "VI",
              "AB",
              "A",
              "AL",
              "O",
              "AV",
              "BA",
              "PM",
              "B",
              "BU",
              "CC",
              "CA",
              "S",
              "CS",
              "CE",
              "CR",
              "CO",
              "CU",
              "GI",
              "GR",
              "GU",
              "SS",
              "H",
              "HU",
              "J",
              "LO",
              "GC",
              "LE",
              "L",
              "LU",
              "M",
              "MA",
              "ML",
              "MU",
              "NA",
              "OR",
              "P",
              "PO",
              "SA",
              "TF",
              "SG",
              "SE",
              "SO",
              "T",
              "TE",
              "TO",
              "V",
              "VA",
              "BI",
              "ZA",
              "Z",
              "AZ",
              "AJ",
              "DU",
              "FU",
              "RK",
              "SH",
              "UQ",
              "BFP",
              "ENG",
              "NIR",
              "SCT",
              "WLS",
              "AR",
              "CA",
              "CL",
              "CO",
              "DU",
              "FS",
              "FD",
              "LA",
              "MA",
              "MO",
              "PA",
              "RN",
              "RV",
              "RO",
              "SA",
              "SJ",
              "SO",
              "TA",
              "TT"
            ],
            "type": "string",
            "description": "State code of the customer",
            "example": "US"
          },
          "city": {
            "type": "string",
            "description": "City of the customer",
            "example": "New York"
          },
          "zip": {
            "type": "string",
            "description": "Zip code of the customer",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the customer",
            "example": "1234567890"
          },
          "email": {
            "type": "string",
            "description": "Email of the customer",
            "example": "abu@example.com"
          }
        }
      },
      "OrderSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "funnel",
              "website",
              "invoice",
              "calendar",
              "text2Pay",
              "document_contracts",
              "membership",
              "mobile_app",
              "communities",
              "point_of_sale",
              "manual",
              "form",
              "survey",
              "payment_link",
              "external"
            ],
            "type": "string",
            "description": "Source of order",
            "example": "website"
          },
          "subType": {
            "enum": [
              "one_step_order_form",
              "two_step_order_form",
              "upsell",
              "tap_to_pay",
              "card_payment",
              "store",
              "contact_view",
              "email_campaign",
              "payments_dashboard",
              "shopify",
              "subscription_view",
              "store_upsell",
              "woocommerce",
              "service",
              "meeting",
              "imported_csv",
              "qr_code"
            ],
            "type": "string",
            "description": "Source subtype of order",
            "example": "store"
          }
        }
      },
      "ProductItem": {
        "required": [
          "id",
          "qty"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of product"
          },
          "qty": {
            "type": "number",
            "description": "No of quantities"
          }
        }
      },
      "GetAvailableShippingRates": {
        "required": [
          "altId",
          "altType",
          "country",
          "totalOrderAmount",
          "totalOrderWeight",
          "source",
          "products"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "country": {
            "enum": [
              "US",
              "CA",
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KP",
              "XK",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SX",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "KR",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "UA",
              "AE",
              "GB",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ],
            "type": "string",
            "description": "Country code of the customer",
            "example": "US"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactAddress"
              }
            ],
            "description": "Address of the customer"
          },
          "amountAvailable": {
            "enum": [
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CA",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KP",
              "KR",
              "XK",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SX",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "GB",
              "UA",
              "AE",
              "US",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ],
            "type": "string",
            "description": "it will not calculate the order amount form backend if it is true",
            "example": "US"
          },
          "totalOrderAmount": {
            "type": "number",
            "description": "The amount of the price. ( min: 0.01 )",
            "example": 99.99
          },
          "weightAvailable": {
            "type": "boolean",
            "description": "Flag to pass when the weight is already calculated and should not calculate again",
            "example": true
          },
          "totalOrderWeight": {
            "type": "number",
            "description": "Estimated weight of the order calculated from the order creation side in kg(s)",
            "example": 10
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderSource"
              }
            ],
            "description": "Source of the order",
            "example": {
              "type": "order",
              "subType": "store"
            }
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductItem"
            },
            "description": "An array of price IDs and quantity"
          },
          "couponCode": {
            "type": "string",
            "description": "Coupon code",
            "example": "TEST"
          }
        }
      },
      "AvailableShippingRate": {
        "required": [
          "name",
          "currency",
          "amount",
          "shippingCarrierId",
          "_id",
          "shippingZoneId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the shipping zone",
            "example": "North zone"
          },
          "description": {
            "type": "string",
            "description": "Delivery description",
            "example": "Ships next day"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the amount of the rate / handling fee",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the shipping rate if it is normal rate (0 means free ). Fixed Handling fee if it is a carrier rate (it will add to the carrier rate).",
            "example": 99.99
          },
          "isCarrierRate": {
            "type": "boolean",
            "description": "is this a carrier rate",
            "example": true
          },
          "shippingCarrierId": {
            "type": "string",
            "description": "Shipping carrier id",
            "example": "655b33a82209e60b6adb87a5"
          },
          "percentageOfRateFee": {
            "type": "number",
            "description": "Percentage of rate fee if it is a carrier rate.",
            "example": 10.99
          },
          "shippingCarrierServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCarrierServiceDto"
            },
            "description": "An array of items"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "The unique identifier for the shipping zone.",
            "example": "655b33a82209e60b6adb87a5"
          }
        }
      },
      "GetAvailableShippingRatesResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableShippingRate"
            },
            "description": "Shipping rate data"
          }
        }
      },
      "CreateShippingRateDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "currency",
          "amount",
          "conditionType",
          "minCondition",
          "maxCondition",
          "shippingCarrierId"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping zone",
            "example": "North zone"
          },
          "description": {
            "type": "string",
            "description": "Delivery description",
            "example": "Ships next day"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the amount of the rate / handling fee",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the shipping rate if it is normal rate (0 means free ). Fixed Handling fee if it is a carrier rate (it will add to the carrier rate).",
            "example": 99.99
          },
          "conditionType": {
            "enum": [
              "none",
              "price",
              "weight"
            ],
            "type": "string",
            "description": "Type of condition to provide the conditional pricing",
            "example": "price"
          },
          "minCondition": {
            "type": "number",
            "description": "Minimum condition for applying this price. set 0 or null if there is no minimum",
            "example": 99.99
          },
          "maxCondition": {
            "type": "number",
            "description": "Maximum condition for applying this price. set 0 or null if there is no maximum",
            "example": 99.99
          },
          "isCarrierRate": {
            "type": "boolean",
            "description": "is this a carrier rate",
            "example": true
          },
          "shippingCarrierId": {
            "type": "string",
            "description": "Shipping carrier id",
            "example": "655b33a82209e60b6adb87a5"
          },
          "percentageOfRateFee": {
            "type": "number",
            "description": "Percentage of rate fee if it is a carrier rate.",
            "example": 10.99
          },
          "shippingCarrierServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCarrierServiceDto"
            },
            "description": "An array of items"
          }
        }
      },
      "CreateShippingRateResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingRateSchema"
              }
            ],
            "description": "Shipping zone data"
          }
        }
      },
      "ListShippingRateResponseDto": {
        "required": [
          "total",
          "data"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of items",
            "example": 20
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingRateSchema"
            },
            "description": "An array of items"
          }
        }
      },
      "GetShippingRateResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingRateSchema"
              }
            ],
            "description": "Shipping zone data"
          }
        }
      },
      "UpdateShippingRateDto": {
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping zone",
            "example": "North zone"
          },
          "description": {
            "type": "string",
            "description": "Delivery description",
            "example": "Ships next day"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the amount of the rate / handling fee",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the shipping rate if it is normal rate (0 means free ). Fixed Handling fee if it is a carrier rate (it will add to the carrier rate).",
            "example": 99.99
          },
          "conditionType": {
            "enum": [
              "none",
              "price",
              "weight"
            ],
            "type": "string",
            "description": "Type of condition to provide the conditional pricing",
            "example": "price"
          },
          "minCondition": {
            "type": "number",
            "description": "Minimum condition for applying this price. set 0 or null if there is no minimum",
            "example": 99.99
          },
          "maxCondition": {
            "type": "number",
            "description": "Maximum condition for applying this price. set 0 or null if there is no maximum",
            "example": 99.99
          },
          "isCarrierRate": {
            "type": "boolean",
            "description": "is this a carrier rate",
            "example": true
          },
          "shippingCarrierId": {
            "type": "string",
            "description": "Shipping carrier id",
            "example": "655b33a82209e60b6adb87a5"
          },
          "percentageOfRateFee": {
            "type": "number",
            "description": "Percentage of rate fee if it is a carrier rate.",
            "example": 10.99
          },
          "shippingCarrierServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCarrierServiceDto"
            },
            "description": "An array of items"
          }
        }
      },
      "UpdateShippingRateResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingRateSchema"
              }
            ],
            "description": "Shipping zone data"
          }
        }
      },
      "DeleteShippingRateResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "CreateShippingCarrierDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "callbackUrl"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping carrier",
            "example": "FedEx"
          },
          "callbackUrl": {
            "type": "string",
            "description": "The URL endpoint that GHL needs to retrieve shipping rates. This must be a public URL.",
            "example": "https://example.com/get-shipping-rates"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCarrierServiceDto"
            },
            "description": "An array of available shipping carrier services"
          },
          "allowsMultipleServiceSelection": {
            "type": "boolean",
            "description": "The seller can choose multiple services while creating shipping rates if this is true.",
            "example": true
          }
        }
      },
      "ShippingCarrierSchema": {
        "required": [
          "altId",
          "altType",
          "name",
          "callbackUrl",
          "_id",
          "marketplaceAppId",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping carrier",
            "example": "FedEx"
          },
          "callbackUrl": {
            "type": "string",
            "description": "The URL endpoint that GHL needs to retrieve shipping rates. This must be a public URL.",
            "example": "https://example.com/get-shipping-rates"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCarrierServiceDto"
            },
            "description": "An array of available shipping carrier services"
          },
          "allowsMultipleServiceSelection": {
            "type": "boolean",
            "description": "The seller can choose multiple services while creating shipping rates if this is true.",
            "example": true
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "marketplaceAppId": {
            "type": "string",
            "description": "The unique identifier for the marketplace app.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "CreateShippingCarrierResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingCarrierSchema"
              }
            ],
            "description": "Shipping carrier data"
          }
        }
      },
      "ListShippingCarrierResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCarrierSchema"
            },
            "description": "An array of items"
          }
        }
      },
      "GetShippingCarrierResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingCarrierSchema"
              }
            ],
            "description": "Shipping carrier data"
          }
        }
      },
      "UpdateShippingCarrierDto": {
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping carrier",
            "example": "FedEx"
          },
          "callbackUrl": {
            "type": "string",
            "description": "The URL endpoint that GHL needs to retrieve shipping rates. This must be a public URL.",
            "example": "https://example.com/get-shipping-rates"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingCarrierServiceDto"
            },
            "description": "An array of available shipping carrier services"
          },
          "allowsMultipleServiceSelection": {
            "type": "boolean",
            "description": "The seller can choose multiple services while creating shipping rates if this is true.",
            "example": true
          }
        }
      },
      "UpdateShippingCarrierResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingCarrierSchema"
              }
            ],
            "description": "Shipping carrier data"
          }
        }
      },
      "DeleteShippingCarrierResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "StoreShippingOriginDto": {
        "required": [
          "name",
          "country",
          "city",
          "street1",
          "zip"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the store / company",
            "example": "ABC Store"
          },
          "country": {
            "enum": [
              [
                "US",
                "CA",
                "AF",
                "AX",
                "AL",
                "DZ",
                "AS",
                "AD",
                "AO",
                "AI",
                "AQ",
                "AG",
                "AR",
                "AM",
                "AW",
                "AU",
                "AT",
                "AZ",
                "BS",
                "BH",
                "BD",
                "BB",
                "BY",
                "BE",
                "BZ",
                "BJ",
                "BM",
                "BT",
                "BO",
                "BA",
                "BW",
                "BV",
                "BR",
                "IO",
                "BN",
                "BG",
                "BF",
                "BI",
                "KH",
                "CM",
                "CV",
                "KY",
                "CF",
                "TD",
                "CL",
                "CN",
                "CX",
                "CC",
                "CO",
                "KM",
                "CG",
                "CD",
                "CK",
                "CR",
                "CI",
                "HR",
                "CU",
                "CY",
                "CZ",
                "DK",
                "DJ",
                "DM",
                "DO",
                "EC",
                "EG",
                "SV",
                "GQ",
                "ER",
                "EE",
                "ET",
                "FK",
                "FO",
                "FJ",
                "FI",
                "FR",
                "GF",
                "PF",
                "TF",
                "GA",
                "GM",
                "GE",
                "DE",
                "GH",
                "GI",
                "GR",
                "GL",
                "GD",
                "GP",
                "GU",
                "GT",
                "GG",
                "GN",
                "GW",
                "GY",
                "HT",
                "HM",
                "VA",
                "HN",
                "HK",
                "HU",
                "IS",
                "IN",
                "ID",
                "IR",
                "IQ",
                "IE",
                "IM",
                "IL",
                "IT",
                "JM",
                "JP",
                "JE",
                "JO",
                "KZ",
                "KE",
                "KI",
                "KP",
                "XK",
                "KW",
                "KG",
                "LA",
                "LV",
                "LB",
                "LS",
                "LR",
                "LY",
                "LI",
                "LT",
                "LU",
                "MO",
                "MK",
                "MG",
                "MW",
                "MY",
                "MV",
                "ML",
                "MT",
                "MH",
                "MQ",
                "MR",
                "MU",
                "YT",
                "MX",
                "FM",
                "MD",
                "MC",
                "MN",
                "ME",
                "MS",
                "MA",
                "MZ",
                "MM",
                "NA",
                "NR",
                "NP",
                "NL",
                "AN",
                "NC",
                "NZ",
                "NI",
                "NE",
                "NG",
                "NU",
                "NF",
                "MP",
                "NO",
                "OM",
                "PK",
                "PW",
                "PS",
                "PA",
                "PG",
                "PY",
                "PE",
                "PH",
                "PN",
                "PL",
                "PT",
                "PR",
                "QA",
                "RE",
                "RO",
                "RU",
                "RW",
                "SH",
                "KN",
                "LC",
                "MF",
                "PM",
                "VC",
                "WS",
                "SM",
                "ST",
                "SA",
                "SN",
                "RS",
                "SC",
                "SL",
                "SG",
                "SX",
                "SK",
                "SI",
                "SB",
                "SO",
                "ZA",
                "GS",
                "KR",
                "ES",
                "LK",
                "SD",
                "SR",
                "SJ",
                "SZ",
                "SE",
                "CH",
                "SY",
                "TW",
                "TJ",
                "TZ",
                "TH",
                "TL",
                "TG",
                "TK",
                "TO",
                "TT",
                "TN",
                "TR",
                "TM",
                "TC",
                "TV",
                "UG",
                "UA",
                "AE",
                "GB",
                "UM",
                "UY",
                "UZ",
                "VU",
                "VE",
                "VN",
                "VG",
                "VI",
                "WF",
                "EH",
                "YE",
                "ZM",
                "ZW"
              ]
            ],
            "type": "number",
            "description": "Country code",
            "example": "US"
          },
          "state": {
            "enum": [
              "AL",
              "AK",
              "AS",
              "AZ",
              "AR",
              "AA",
              "AE",
              "AP",
              "CA",
              "CO",
              "CT",
              "DE",
              "DC",
              "FM",
              "FL",
              "GA",
              "GU",
              "HI",
              "ID",
              "IL",
              "IN",
              "IA",
              "KS",
              "KY",
              "LA",
              "ME",
              "MH",
              "MD",
              "MA",
              "MI",
              "MN",
              "MS",
              "MO",
              "MT",
              "NE",
              "NV",
              "NH",
              "NJ",
              "NM",
              "NY",
              "NC",
              "ND",
              "MP",
              "OH",
              "OK",
              "OR",
              "PW",
              "PA",
              "PR",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VT",
              "VI",
              "VA",
              "WA",
              "WV",
              "WI",
              "WY",
              "AB",
              "BC",
              "MB",
              "NB",
              "NL",
              "NT",
              "NS",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YT",
              "BA",
              "CT",
              "CC",
              "CH",
              "CB",
              "CN",
              "ER",
              "FO",
              "JY",
              "LP",
              "LR",
              "MZ",
              "MN",
              "NQ",
              "RN",
              "SA",
              "SJ",
              "SL",
              "SC",
              "SF",
              "SE",
              "TF",
              "TU",
              "ACT",
              "NSW",
              "NT",
              "QLD",
              "SA",
              "TAS",
              "VIC",
              "WA",
              "AC",
              "AL",
              "AM",
              "AP",
              "BA",
              "CE",
              "DF",
              "ES",
              "GO",
              "MA",
              "MG",
              "MS",
              "MT",
              "PA",
              "PB",
              "PE",
              "PI",
              "PR",
              "RJ",
              "RN",
              "RO",
              "RR",
              "RS",
              "SC",
              "SE",
              "SP",
              "TO",
              "AI",
              "AN",
              "AP",
              "AT",
              "BI",
              "CO",
              "AR",
              "LI",
              "LL",
              "LR",
              "MA",
              "ML",
              "RM",
              "TA",
              "VS",
              "NB",
              "AMA",
              "ANT",
              "ARA",
              "ATL",
              "BOL",
              "BOY",
              "CAL",
              "CAQ",
              "CAS",
              "CAU",
              "CES",
              "CHO",
              "CUN",
              "COR",
              "GUA",
              "GUV",
              "HUI",
              "LAG",
              "MAG",
              "MET",
              "NAR",
              "NSA",
              "PUT",
              "QUI",
              "RIS",
              "SAP",
              "SAN",
              "SUC",
              "TOL",
              "VAC",
              "VAU",
              "VID",
              "CR-A",
              "CR-C",
              "CR-G",
              "CR-H",
              "CR-L",
              "CR-P",
              "CR-SJ",
              "GT-16",
              "GT-15",
              "GT-04",
              "GT-20",
              "GT-02",
              "GT-05",
              "GT-01",
              "GT-13",
              "GT-18",
              "GT-21",
              "GT-22",
              "GT-17",
              "GT-09",
              "GT-14",
              "GT-11",
              "GT-03",
              "GT-12",
              "GT-06",
              "GT-07",
              "GT-10",
              "GT-08",
              "GT-19",
              "HK",
              "KL",
              "NT",
              "AN",
              "AP",
              "AR",
              "AS",
              "BR",
              "CH",
              "CG",
              "DN",
              "DD",
              "DL",
              "GA",
              "GJ",
              "HR",
              "HP",
              "JK",
              "JH",
              "KA",
              "KL",
              "LA",
              "LD",
              "MP",
              "MH",
              "MN",
              "ML",
              "MZ",
              "NL",
              "OR",
              "PY",
              "PB",
              "RJ",
              "SK",
              "TN",
              "TS",
              "TR",
              "UP",
              "UK",
              "WB",
              "CW",
              "CN",
              "CE",
              "CO",
              "DL",
              "D",
              "G",
              "KY",
              "KE",
              "KK",
              "LS",
              "LM",
              "LK",
              "LD",
              "LH",
              "MO",
              "MH",
              "MN",
              "OY",
              "RN",
              "SO",
              "TA",
              "WD",
              "WH",
              "WX",
              "WW",
              "AG",
              "AL",
              "AN",
              "AO",
              "AR",
              "AP",
              "AT",
              "AV",
              "BA",
              "BT",
              "BL",
              "BN",
              "BG",
              "BI",
              "BO",
              "BZ",
              "BS",
              "BR",
              "CA",
              "CL",
              "CB",
              "CI",
              "CE",
              "CT",
              "CZ",
              "CH",
              "CO",
              "CS",
              "CR",
              "KR",
              "CN",
              "EN",
              "FM",
              "FE",
              "FI",
              "FG",
              "FC",
              "FR",
              "GE",
              "GO",
              "GR",
              "IM",
              "IS",
              "AQ",
              "SP",
              "LT",
              "LE",
              "LC",
              "LI",
              "LO",
              "LU",
              "MC",
              "MN",
              "MS",
              "MT",
              "VS",
              "ME",
              "MI",
              "MO",
              "MB",
              "NA",
              "NO",
              "NU",
              "OG",
              "OT",
              "OR",
              "PD",
              "PA",
              "PR",
              "PV",
              "PG",
              "PU",
              "PE",
              "PC",
              "PI",
              "PT",
              "PN",
              "PZ",
              "PO",
              "RG",
              "RA",
              "RC",
              "RE",
              "RI",
              "RN",
              "RM",
              "RO",
              "SA",
              "SS",
              "SV",
              "SI",
              "SR",
              "SO",
              "TA",
              "TE",
              "TR",
              "TO",
              "TP",
              "TN",
              "TV",
              "TS",
              "UD",
              "VA",
              "VE",
              "VB",
              "VC",
              "VR",
              "VV",
              "VI",
              "VT",
              "JP-23",
              "JP-05",
              "JP-02",
              "JP-12",
              "JP-38",
              "JP-18",
              "JP-40",
              "JP-07",
              "JP-21",
              "JP-10",
              "JP-34",
              "JP-01",
              "JP-28",
              "JP-08",
              "JP-17",
              "JP-03",
              "JP-37",
              "JP-46",
              "JP-14",
              "JP-39",
              "JP-43",
              "JP-26",
              "JP-24",
              "JP-04",
              "JP-45",
              "JP-20",
              "JP-42",
              "JP-29",
              "JP-15",
              "JP-44",
              "JP-33",
              "JP-47",
              "JP-27",
              "JP-41",
              "JP-11",
              "JP-25",
              "JP-32",
              "JP-22",
              "JP-09",
              "JP-36",
              "JP-13",
              "JP-31",
              "JP-16",
              "JP-30",
              "JP-06",
              "JP-35",
              "JP-19",
              "JHR",
              "KDH",
              "KTN",
              "KUL",
              "LBN",
              "MLK",
              "NSN",
              "PHG",
              "PNG",
              "PRK",
              "PLS",
              "PJY",
              "SBH",
              "SWK",
              "SGR",
              "TRG",
              "AGU",
              "BCN",
              "BCS",
              "CAM",
              "CHP",
              "CHH",
              "CMX",
              "COA",
              "COL",
              "DUR",
              "GUA",
              "GRO",
              "HID",
              "JAL",
              "MIC",
              "MOR",
              "MEX",
              "NAY",
              "NLE",
              "OAX",
              "PUE",
              "QUE",
              "ROO",
              "SLP",
              "SIN",
              "SON",
              "TAB",
              "TAM",
              "TLA",
              "VER",
              "YUC",
              "ZAC",
              "AUK",
              "BOP",
              "CAN",
              "CIT",
              "GIS",
              "HKB",
              "MWT",
              "MBH",
              "NSN",
              "NTL",
              "OTA",
              "STL",
              "TKI",
              "TAS",
              "WKO",
              "WGN",
              "WTC",
              "JK",
              "BA",
              "GB",
              "IS",
              "KP",
              "PB",
              "SD",
              "AMA",
              "ANC",
              "APU",
              "ARE",
              "AYA",
              "CAJ",
              "CAL",
              "CUS",
              "HUV",
              "HUC",
              "ICA",
              "JUN",
              "LAL",
              "LAM",
              "LIM",
              "LOR",
              "MDD",
              "MOQ",
              "PAS",
              "PIU",
              "PUN",
              "SAM",
              "TAC",
              "TUM",
              "UCA",
              "PH-ABR",
              "PH-AGN",
              "PH-AGS",
              "PH-AKL",
              "PH-ALB",
              "PH-ANT",
              "PH-APA",
              "PH-AUR",
              "PH-BAS",
              "PH-BAN",
              "PH-BTN",
              "PH-BTG",
              "PH-BEN",
              "PH-BIL",
              "PH-BOH",
              "PH-BUK",
              "PH-BUL",
              "PH-CAG",
              "PH-CAN",
              "PH-CAS",
              "PH-CAM",
              "PH-CAP",
              "PH-CAT",
              "PH-CAV",
              "PH-CEB",
              "PH-NCO",
              "PH-DAO",
              "PH-DAV",
              "PH-DAS",
              "PH-EAS",
              "PH-GUI",
              "PH-IFU",
              "PH-ILN",
              "PH-ILS",
              "PH-ILI",
              "PH-ISA",
              "PH-KAL",
              "PH-LUN",
              "PH-LAG",
              "PH-LAN",
              "PH-LAS",
              "PH-LEY",
              "PH-MAG",
              "PH-MAD",
              "PH-MAS",
              "PH-00",
              "PH-MSC",
              "PH-MSR",
              "PH-MOU",
              "PH-NEC",
              "PH-NER",
              "PH-NSA",
              "PH-NUE",
              "PH-NUV",
              "PH-MDC",
              "PH-MDR",
              "PH-PLW",
              "PH-PAM",
              "PH-PAN",
              "PH-QUE",
              "PH-QUI",
              "PH-RIZ",
              "PH-ROM",
              "PH-WSA",
              "PH-SAR",
              "PH-SIG",
              "PH-SOR",
              "PH-SCO",
              "PH-SLE",
              "PH-SUK",
              "PH-SLU",
              "PH-SUN",
              "PH-SUR",
              "PH-TAR",
              "PH-TAW",
              "PH-ZMB",
              "PH-ZAN",
              "PH-ZAS",
              "PH-ZSI",
              "PT-20",
              "PT-01",
              "PT-02",
              "PT-03",
              "PT-04",
              "PT-05",
              "PT-06",
              "PT-07",
              "PT-08",
              "PT-09",
              "PT-10",
              "PT-11",
              "PT-30",
              "PT-12",
              "PT-13",
              "PT-14",
              "PT-15",
              "PT-16",
              "PT-17",
              "PT-18",
              "AB",
              "AR",
              "AG",
              "BC",
              "BH",
              "BN",
              "BT",
              "BR",
              "BV",
              "B",
              "BZ",
              "CL",
              "CS",
              "CJ",
              "CT",
              "CV",
              "DB",
              "DJ",
              "GL",
              "GR",
              "GJ",
              "HR",
              "HD",
              "IL",
              "IS",
              "IF",
              "MM",
              "MH",
              "MS",
              "NT",
              "OT",
              "PH",
              "SJ",
              "SM",
              "SB",
              "SV",
              "TR",
              "TM",
              "TL",
              "VL",
              "VS",
              "VN",
              "KR-26",
              "KR-43",
              "KR-44",
              "KR-27",
              "KR-30",
              "KR-42",
              "KR-29",
              "KR-47",
              "KR-41",
              "KR-48",
              "KR-28",
              "KR-49",
              "KR-45",
              "KR-46",
              "KR-50",
              "KR-11",
              "KR-31",
              "C",
              "VI",
              "AB",
              "A",
              "AL",
              "O",
              "AV",
              "BA",
              "PM",
              "B",
              "BU",
              "CC",
              "CA",
              "S",
              "CS",
              "CE",
              "CR",
              "CO",
              "CU",
              "GI",
              "GR",
              "GU",
              "SS",
              "H",
              "HU",
              "J",
              "LO",
              "GC",
              "LE",
              "L",
              "LU",
              "M",
              "MA",
              "ML",
              "MU",
              "NA",
              "OR",
              "P",
              "PO",
              "SA",
              "TF",
              "SG",
              "SE",
              "SO",
              "T",
              "TE",
              "TO",
              "V",
              "VA",
              "BI",
              "ZA",
              "Z",
              "AZ",
              "AJ",
              "DU",
              "FU",
              "RK",
              "SH",
              "UQ",
              "BFP",
              "ENG",
              "NIR",
              "SCT",
              "WLS",
              "AR",
              "CA",
              "CL",
              "CO",
              "DU",
              "FS",
              "FD",
              "LA",
              "MA",
              "MO",
              "PA",
              "RN",
              "RV",
              "RO",
              "SA",
              "SJ",
              "SO",
              "TA",
              "TT"
            ],
            "type": "string",
            "description": "State code",
            "example": "VA"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "Tokyo"
          },
          "street1": {
            "type": "string",
            "description": "Street address line 1",
            "example": "Street 1"
          },
          "street2": {
            "type": "string",
            "description": "Street address line 2",
            "example": "Street 2"
          },
          "zip": {
            "type": "string",
            "description": "Zip code",
            "example": "674561"
          },
          "phone": {
            "type": "string",
            "description": "Business Phone Number",
            "example": "+1-214-559-6993"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "example": "john@deo.com"
          }
        }
      },
      "StoreOrderNotificationDto": {
        "required": [
          "enabled",
          "subject",
          "emailTemplateId",
          "defaultEmailTemplateId"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Store order notification enabled",
            "example": true
          },
          "subject": {
            "type": "string",
            "description": "Store order email subject",
            "example": "Your order is placed !"
          },
          "emailTemplateId": {
            "type": "string",
            "description": "Email Template Id",
            "example": "6788d542f0462ffd6bc29bb9"
          },
          "defaultEmailTemplateId": {
            "type": "string",
            "description": "Default Email Template Id",
            "example": "6788d542f0462ffd6bc29bb9"
          }
        }
      },
      "StoreOrderFulfillmentNotificationDto": {
        "required": [
          "enabled",
          "subject",
          "emailTemplateId",
          "defaultEmailTemplateId"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Store order fulfillment notification enabled",
            "example": true
          },
          "subject": {
            "type": "string",
            "description": "Store order fulfillment email subject",
            "example": "Order fulfilled"
          },
          "emailTemplateId": {
            "type": "string",
            "description": "Email Template Id",
            "example": "6788d542f0462ffd6bc29bb9"
          },
          "defaultEmailTemplateId": {
            "type": "string",
            "description": "Default Email Template Id",
            "example": "6788d542f0462ffd6bc29bb9"
          }
        }
      },
      "CreateStoreSettingDto": {
        "required": [
          "altId",
          "altType",
          "shippingOrigin"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "shippingOrigin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoreShippingOriginDto"
              }
            ],
            "description": "Shipping origin address"
          },
          "storeOrderNotification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoreOrderNotificationDto"
              }
            ],
            "description": "Store order notification email"
          },
          "storeOrderFulfillmentNotification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoreOrderFulfillmentNotificationDto"
              }
            ],
            "description": "Store order fulfillment notification email"
          }
        }
      },
      "StoreSettingSchema": {
        "required": [
          "altId",
          "altType",
          "shippingOrigin",
          "_id",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "shippingOrigin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoreShippingOriginDto"
              }
            ],
            "description": "Shipping origin address"
          },
          "storeOrderNotification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoreOrderNotificationDto"
              }
            ],
            "description": "Store order notification email"
          },
          "storeOrderFulfillmentNotification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoreOrderFulfillmentNotificationDto"
              }
            ],
            "description": "Store order fulfillment notification email"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the settings.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "CreateStoreSettingResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoreSettingSchema"
              }
            ],
            "description": "Shipping carrier data"
          }
        }
      },
      "GetStoreSettingResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoreSettingSchema"
              }
            ],
            "description": "Shipping carrier data"
          }
        }
      },
      "IOnboardingDto": {
        "required": [
          "pending"
        ],
        "type": "object",
        "properties": {
          "pending": {
            "type": "boolean",
            "example": "true"
          },
          "haveWebsite": {
            "type": "boolean",
            "example": ""
          },
          "websiteUrl": {
            "type": "string",
            "example": ""
          },
          "industryServed": {
            "type": "string",
            "example": ""
          },
          "customerCount": {
            "type": "string",
            "example": ""
          },
          "tools": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ""
          },
          "location": {
            "type": "boolean",
            "example": ""
          },
          "conversationDemo": {
            "type": "boolean",
            "example": ""
          },
          "locationId": {
            "type": "string",
            "example": ""
          },
          "snapshotId": {
            "type": "string",
            "example": ""
          },
          "planId": {
            "type": "string",
            "description": "Selected agency plan unique plan Id",
            "example": "plan_EOi37NLV12u68i"
          },
          "affiliateSignup": {
            "type": "boolean",
            "description": "Set to true if it is from affiliate",
            "example": true
          },
          "hasJoinedKickoffCall": {
            "type": "boolean",
            "description": "Set to true if user joined onboarding call",
            "example": true
          },
          "kickoffActionTaken": {
            "type": "boolean",
            "description": "Set to true if user joined onboarding call",
            "example": true
          },
          "hasJoinedImplementationCall": {
            "type": "boolean",
            "description": "Set to true if user joined implementation call",
            "example": true
          },
          "version": {
            "type": "string",
            "description": "This helps in A/B tracking of onboarding flow",
            "example": "1"
          },
          "metaData": {
            "type": "object",
            "description": "metaData for onboarding",
            "example": true
          }
        }
      },
      "GetCompanyByIdSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "seD4PfOuKoVMLkEZqohJ"
          },
          "name": {
            "type": "string",
            "example": "Tesla inc"
          },
          "email": {
            "type": "string",
            "example": "john@deo.com"
          },
          "logoUrl": {
            "type": "string",
            "example": "https://firebasestorage.googleapis.com/v0/b/highlevel-staging.appspot.com/o/companyPhotos%2F5DP4iH6HLkQsiKESj6rh.gif?alt=media&token=2aec9720-59a7-46af-a187-d4a2774ee873"
          },
          "phone": {
            "type": "string",
            "example": "+1202-555-0107"
          },
          "website": {
            "type": "string",
            "example": "https://www.tesla.com"
          },
          "domain": {
            "type": "string",
            "example": "https://app.myawesomedomain.com"
          },
          "spareDomain": {
            "type": "string",
            "example": "link.msgsndr.com"
          },
          "privacyPolicy": {
            "type": "string",
            "example": "https://app.gohighlevel.com/privacy_policy"
          },
          "termsConditions": {
            "type": "string",
            "example": "https://app.gohighlevel.com/terms-of-service"
          },
          "address": {
            "type": "string",
            "example": "3500 Deer Creek Road"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "postalCode": {
            "type": "string",
            "example": "94304"
          },
          "country": {
            "type": "string",
            "example": "US"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "timezone": {
            "type": "string",
            "example": "US/Central"
          },
          "relationshipNumber": {
            "type": "string",
            "example": "x-xxx-xxx"
          },
          "subdomain": {
            "type": "string",
            "example": "https://app.myawesomedomain.com/subdomain"
          },
          "plan": {
            "type": "number",
            "example": 1
          },
          "currency": {
            "type": "string",
            "example": ""
          },
          "customerType": {
            "type": "string",
            "example": "agency"
          },
          "termsOfServiceVersion": {
            "type": "string",
            "example": "06/01/2022"
          },
          "termsOfServiceAcceptedBy": {
            "type": "string",
            "example": "SDfdf355Dfggdee"
          },
          "twilioTrialMode": {
            "type": "boolean",
            "example": true
          },
          "twilioFreeCredits": {
            "type": "number",
            "example": 100
          },
          "termsOfServiceAcceptedDate": {
            "type": "string",
            "example": ""
          },
          "privacyPolicyVersion": {
            "type": "string",
            "example": "06/01/2022"
          },
          "privacyPolicyAcceptedBy": {
            "type": "string",
            "example": "SDfdf355Dfggdee"
          },
          "privacyPolicyAcceptedDate": {
            "type": "string",
            "example": ""
          },
          "affiliatePolicyVersion": {
            "type": "string",
            "example": "06/01/2022"
          },
          "affiliatePolicyAcceptedBy": {
            "type": "string",
            "example": "SDfdf355Dfggdee"
          },
          "affiliatePolicyAcceptedDate": {
            "type": "string",
            "example": ""
          },
          "isReselling": {
            "type": "boolean",
            "example": true
          },
          "onboardingInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IOnboardingDto"
              }
            ],
            "example": ""
          },
          "upgradeEnabledForClients": {
            "type": "boolean",
            "description": "Flag to set if upgrade plan is enabled",
            "example": true
          },
          "cancelEnabledForClients": {
            "type": "boolean",
            "description": "Flag to set if cancel plan is enabled",
            "example": true
          },
          "autoSuspendEnabled": {
            "type": "boolean",
            "description": "Flag to set if auto suspend is enabled",
            "example": true
          },
          "saasSettings": {
            "type": "object",
            "description": "Saas Settings",
            "example": {
              "agencyDashboardVisibleTo": "string",
              "stripeConnectInitiatedBy": "string"
            }
          },
          "stripeConnectId": {
            "type": "string",
            "example": ""
          },
          "enableDepreciatedFeatures": {
            "type": "boolean",
            "example": true
          },
          "premiumUpgraded": {
            "type": "boolean",
            "description": "If you want to enable / disable Priority Support for any agency. Default value is false.",
            "default": false,
            "example": false
          },
          "status": {
            "type": "string",
            "example": "active-trial"
          },
          "locationCount": {
            "type": "number",
            "example": 10
          },
          "disableEmailService": {
            "type": "boolean",
            "example": false
          },
          "referralId": {
            "type": "string",
            "example": "john-doe-21"
          },
          "isEnterpriseAccount": {
            "type": "boolean",
            "example": true
          },
          "businessNiche": {
            "type": "string",
            "description": "The business niche in which the agency is operating",
            "example": "Accounting School"
          },
          "businessCategory": {
            "type": "string",
            "description": "Business category",
            "example": "Automotive"
          },
          "businessAffinityGroup": {
            "type": "string",
            "description": "The affinity group of the agency",
            "example": "Vehicle Dealerships"
          },
          "isSandboxAccount": {
            "type": "boolean",
            "example": true
          },
          "enableNewSubAccountDefaultData": {
            "type": "boolean",
            "description": "Flag to determine if new sub-accounts should use default data",
            "example": false
          }
        }
      },
      "GetCompanyByIdSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/GetCompanyByIdSchema"
          }
        }
      },
      "GetAccessCodebodyDto": {
        "required": [
          "client_id",
          "client_secret",
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "The ID provided by GHL for your integration"
          },
          "client_secret": {
            "type": "string"
          },
          "grant_type": {
            "enum": [
              "authorization_code",
              "refresh_token",
              "client_credentials"
            ],
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "user_type": {
            "enum": [
              "Company",
              "Location"
            ],
            "type": "string",
            "description": "The type of token to be requested",
            "example": "Location"
          },
          "redirect_uri": {
            "type": "string",
            "description": "The redirect URI for your application",
            "example": "https://myapp.com/oauth/callback/gohighlevel"
          }
        }
      },
      "GetAccessCodeSuccessfulResponseDto": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "ab12dc0ae1234a7898f9ff06d4f69gh"
          },
          "token_type": {
            "type": "string",
            "example": "Bearer"
          },
          "expires_in": {
            "type": "number",
            "example": 86399
          },
          "refresh_token": {
            "type": "string",
            "example": "xy34dc0ae1234a4858f9ff06d4f66ba"
          },
          "scope": {
            "type": "string",
            "example": "conversations/message.readonly conversations/message.write"
          },
          "userType": {
            "type": "string",
            "example": "Location"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID - Present only for Sub-Account Access Token",
            "example": "l1C08ntBrFjLS0elLIYU"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "l1C08ntBrFjLS0elLIYU"
          },
          "approvedLocations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Approved locations to generate location access token",
            "example": [
              "l1C08ntBrFjLS0elLIYU"
            ]
          },
          "userId": {
            "type": "string",
            "description": "USER ID - Represent user id of person who performed installation",
            "example": "l1C08ntBrFjLS0elLIYU"
          },
          "planId": {
            "type": "string",
            "description": "Plan Id of the subscribed plan in paid apps.",
            "example": "l1C08ntBrFjLS0elLIYU"
          },
          "isBulkInstallation": {
            "type": "boolean",
            "example": "Bearer"
          }
        }
      },
      "GetLocationAccessCodeBodyDto": {
        "required": [
          "companyId",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Company Id of location you want to request token for"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID for which you want to obtain accessToken"
          }
        }
      },
      "GetLocationAccessTokenSuccessfulResponseDto": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Location access token which can be used to authenticate & authorize API under following scope",
            "example": "ab12dc0ae1234a7898f9ff06d4f69gh"
          },
          "token_type": {
            "type": "string",
            "example": "Bearer"
          },
          "expires_in": {
            "type": "number",
            "description": "Time in seconds remaining for token to expire",
            "example": 86399
          },
          "scope": {
            "type": "string",
            "description": "Scopes the following accessToken have access to",
            "example": "conversations/message.readonly conversations/message.write"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID - Present only for Sub-Account Access Token",
            "example": "l1C08ntBrFjLS0elLIYU"
          },
          "planId": {
            "type": "string",
            "description": "Plan Id of the subscribed plan in paid apps.",
            "example": "l1C08ntBrFjLS0elLIYU"
          },
          "userId": {
            "type": "string",
            "description": "USER ID - Represent user id of person who performed installation",
            "example": "l1C08ntBrFjLS0elLIYU"
          }
        }
      },
      "InstalledLocationSchema": {
        "required": [
          "_id",
          "name",
          "address"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Location ID",
            "example": "0IHuJvc2ofPAAA8GzTRi"
          },
          "name": {
            "type": "string",
            "description": "Name of the location",
            "example": "John Deo"
          },
          "address": {
            "type": "string",
            "description": "Address linked to location",
            "example": "47 W 13th St, New York, NY 10011, USA"
          },
          "isInstalled": {
            "type": "boolean",
            "description": "Check if the requested app is installed for following location",
            "example": true
          }
        }
      },
      "GetInstalledLocationsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstalledLocationSchema"
            }
          },
          "count": {
            "type": "number",
            "description": "Total location count under the company",
            "example": 1231
          },
          "installToFutureLocations": {
            "type": "boolean",
            "description": "Boolean to control if user wants app to be automatically installed to future locations",
            "example": true
          }
        }
      },
      "GoogleLocationSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "accounts/114659701071209971352"
          },
          "storeCode": {
            "type": "string",
            "example": "w37swmmLbA02zgqKPpxITe"
          },
          "title": {
            "type": "string",
            "example": "Location Title"
          },
          "metadata": {
            "type": "object",
            "description": "Meta data not related to User"
          },
          "storefrontAddress": {
            "type": "object",
            "description": "Store front address"
          },
          "relationshipData": {
            "type": "object",
            "description": "All locations and chain related to this one"
          },
          "maxLocation": {
            "type": "boolean",
            "example": true
          },
          "isVerified": {
            "type": "boolean",
            "example": true
          },
          "isConnected": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "GoogleAccountsSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "accounts/114659701071209971352"
          },
          "accountName": {
            "type": "string",
            "example": "Account Name Test"
          },
          "type": {
            "type": "string",
            "example": "PERSONAL"
          },
          "verificationState": {
            "type": "string",
            "example": "UNVERIFIED"
          },
          "vettedState": {
            "type": "string",
            "example": "NOT_VETTED"
          }
        }
      },
      "GetGoogleLocationSchema": {
        "type": "object",
        "properties": {
          "location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GoogleLocationSchema"
              }
            ],
            "description": "Google Location Details"
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GoogleAccountsSchema"
              }
            ],
            "description": "Google Account Details"
          }
        }
      },
      "GetGoogleLocationAccountSchema": {
        "type": "object",
        "properties": {
          "locations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetGoogleLocationSchema"
              }
            ],
            "description": "Locations"
          }
        }
      },
      "GetGoogleLocationResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Google Business Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetGoogleLocationAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "AttachGMBLocationDTO": {
        "type": "object",
        "properties": {
          "location": {
            "type": "object"
          },
          "account": {
            "type": "object"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "SocialGoogleMediaAccountSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "65f2d989a4f2f1e5322c3856"
          },
          "oAuthId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "oldId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "locationId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "originId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "platform": {
            "type": "object",
            "example": "google"
          },
          "type": {
            "type": "object",
            "example": "location"
          },
          "name": {
            "type": "string",
            "example": "Account Name"
          },
          "avatar": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "meta": {
            "type": "object",
            "example": {
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name",
                "avatar": "u37swmmLbA02zgqKPpxITe2"
              },
              "storeCode": "122",
              "isVerified": "true",
              "verified": true,
              "protected": true,
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "storefrontAddress": {
                "regionCode": "30021",
                "languageCode": "E001",
                "postalCode": "1221",
                "administrativeArea": "Down Town",
                "locality": "Louis Street",
                "addressLines": [
                  "207",
                  "county"
                ]
              }
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "created date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          }
        }
      },
      "SocialMediaGmbAccountResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Added Google Business Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialGoogleMediaAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "SearchPostDTO": {
        "required": [
          "skip",
          "limit",
          "fromDate",
          "toDate",
          "includeUsers"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type must be one of the following values: recent, all, scheduled, draft, failed, in_review, published, in_progress and deleted",
            "default": "all",
            "example": "Filter type"
          },
          "accounts": {
            "type": "string",
            "description": "List of account Ids seperated by comma as a string",
            "example": "660a83fc29deacac50033e2b_omaDY3RbWtTP511e808O_17841465964543589, 38bF83fc29deacac50033e2b_omaDY3RbWtr3P11e808O_17841465964543998"
          },
          "skip": {
            "type": "string",
            "default": "0",
            "example": "1"
          },
          "limit": {
            "type": "string",
            "default": "10",
            "example": "10"
          },
          "fromDate": {
            "type": "string",
            "description": "From Date",
            "example": "2024-01-22T05:32:49.463Z"
          },
          "toDate": {
            "type": "string",
            "description": "To Date",
            "example": "2024-03-20T05:32:49.463Z"
          },
          "includeUsers": {
            "type": "string",
            "description": "Include User Data",
            "example": "true"
          },
          "postType": {
            "type": "object",
            "description": "Post Type must be one of the following values: - post, story, reel",
            "example": "post"
          }
        }
      },
      "PostMediaSchema": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://i0.wp.com/www.lifeofanarchitect.com/wp-content/uploads/2021/10/architectural-model-making-stairs.jpg"
          },
          "caption": {
            "type": "string",
            "example": "Caption 1"
          },
          "type": {
            "type": "string",
            "example": "video/mp4 or image/png"
          },
          "thumbnail": {
            "type": "string",
            "example": "https://storage.googleapis.com/test/test/media/test.jpeg"
          },
          "defaultThumb": {
            "type": "string",
            "example": "https://storage.googleapis.com/test/test/media/test.jpeg"
          },
          "id": {
            "type": "string",
            "example": "Edf3323fsfsdsd"
          }
        }
      },
      "OgTagsSchema": {
        "type": "object",
        "properties": {
          "metaImage": {
            "type": "string",
            "description": "Meta Image",
            "example": "https://wwww.lifeofanarchitect.com/wp-content/uploads/2021/10/architectural-model-making-stairs.jpg"
          },
          "metaLink": {
            "type": "string",
            "description": "Meta Link"
          }
        }
      },
      "PostUserSchema": {
        "required": [
          "id",
          "title",
          "firstName",
          "lastName",
          "profilePhoto",
          "phone",
          "email"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User Id",
            "example": "6284c43d519161e96cc09c13"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Mr"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "Harry"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "example": "Spencer"
          },
          "profilePhoto": {
            "type": "string",
            "description": "Profile photo",
            "example": "https://storage.googleapis.com/user/kCrjKGHZQ2/profile/1dca8c-61c9-404d-a459-751fbcb.jpeg"
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": "901111119"
          },
          "email": {
            "type": "string",
            "description": "Email Id",
            "example": "abc@xyc.com"
          }
        }
      },
      "FormatedApprovalDetails": {
        "type": "object",
        "properties": {
          "approver": {
            "type": "string",
            "description": "Approver",
            "example": "iVrVJ2uoXNF0wzcBzgl5"
          },
          "requesterNote": {
            "type": "string",
            "description": "Requester Notes",
            "example": "Test suggestion"
          },
          "approverNote": {
            "type": "string",
            "description": "Approver Notes",
            "example": "Test suggestion"
          },
          "approvalStatus": {
            "type": "object",
            "description": "Approval Status must be one of the following values: pending, approved, rejected, not_required",
            "example": "approved"
          },
          "approverUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostUserSchema"
              }
            ],
            "description": "Approver User Details"
          }
        }
      },
      "TiktokPostSchema": {
        "type": "object",
        "properties": {
          "privacyLevel": {
            "type": "object",
            "description": "privacy level is an enum and must be one of the following values: PUBLIC_TO_EVERYONE, MUTUAL_FOLLOW_FRIENDS, SELF_ONLY",
            "example": "PUBLIC_TO_EVERYONE"
          },
          "promoteOtherBrand": {
            "type": "boolean",
            "description": "promote other brand",
            "example": true
          },
          "enableComment": {
            "type": "boolean",
            "description": "enable comment",
            "example": true
          },
          "enableDuet": {
            "type": "boolean",
            "description": "enable duet",
            "example": true
          },
          "enableStitch": {
            "type": "boolean",
            "description": "enable stitch",
            "example": true
          },
          "videoDisclosure": {
            "type": "boolean",
            "description": "video disclosure",
            "example": true
          },
          "promoteYourBrand": {
            "type": "boolean",
            "description": "promote your brand",
            "example": true
          }
        }
      },
      "DateSchema": {
        "required": [
          "year",
          "month",
          "day"
        ],
        "type": "object",
        "properties": {
          "year": {
            "type": "number",
            "example": 2022
          },
          "month": {
            "type": "number",
            "example": 1
          },
          "day": {
            "type": "number",
            "example": 1
          }
        }
      },
      "TimeSchema": {
        "required": [
          "hours",
          "minutes",
          "seconds"
        ],
        "type": "object",
        "properties": {
          "hours": {
            "type": "number",
            "example": 23
          },
          "minutes": {
            "type": "number",
            "example": 56
          },
          "seconds": {
            "type": "number",
            "example": 34
          }
        }
      },
      "StartDateSchema": {
        "type": "object",
        "properties": {
          "startDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateSchema"
              }
            ],
            "description": "Start Date"
          },
          "startTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeSchema"
              }
            ],
            "description": "Start Time"
          }
        }
      },
      "EndDateSchema": {
        "type": "object",
        "properties": {
          "endDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateSchema"
              }
            ],
            "description": "End Date"
          },
          "endTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeSchema"
              }
            ],
            "description": "End Time"
          }
        }
      },
      "GMBPostSchema": {
        "type": "object",
        "properties": {
          "gmbEventType": {
            "type": "string",
            "description": "gmbEventType must be one of the following values: STANDARD, EVENT, OFFER",
            "example": "STANDARD"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Event Title"
          },
          "offerTitle": {
            "type": "string",
            "description": "Offer Title",
            "example": "Hey"
          },
          "startDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StartDateSchema"
              }
            ],
            "description": "Start Date"
          },
          "endDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndDateSchema"
              }
            ],
            "description": "End Date"
          },
          "termsConditions": {
            "type": "string",
            "description": "Terms Condition Url",
            "example": "https://google.com/privacy"
          },
          "url": {
            "type": "string",
            "description": "Url",
            "example": "https://google.com"
          },
          "couponCode": {
            "type": "string",
            "description": "Coupon Code",
            "example": "BOGO-50"
          },
          "redeemOnlineUrl": {
            "type": "string",
            "description": "Redeem Online Url",
            "example": "https://google.com"
          },
          "actionType": {
            "type": "object",
            "description": "Action Type must be one of the following values: none, order, book, shop, learn_more, call, sign_up",
            "example": "book"
          }
        }
      },
      "GetPostFormattedSchema": {
        "required": [
          "locationId",
          "error",
          "type"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "61bb16833b3f2791f9715be2"
          },
          "source": {
            "enum": [
              "composer",
              "csv",
              "recurring",
              "review",
              "rss"
            ],
            "type": "string",
            "description": "source must be one of the following values: composer, recurring, csv",
            "example": "composer"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "platform": {
            "type": "string",
            "description": "platform must be one of the following values: google, facebook, instagram, linkedin, twitter, tiktok",
            "example": "google"
          },
          "displayDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          },
          "accountId": {
            "type": "string",
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe"
          },
          "error": {
            "type": "string",
            "description": "Error",
            "example": "Failed due to auth token"
          },
          "postId": {
            "type": "string",
            "example": "323534534435"
          },
          "publishedAt": {
            "type": "string",
            "example": "2021-06-22T05:32:49.463Z"
          },
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Account Ids",
            "example": [
              "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
            ]
          },
          "summary": {
            "type": "string",
            "example": "Sample Summary"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostMediaSchema"
            },
            "description": "Post Media Data \n The limitations of media as per the platforms is provided through the reference link in API description"
          },
          "status": {
            "type": "object",
            "description": "Status must be one of the following values: in_progress, draft, failed, published, scheduled, in_review, notification_sent, deleted",
            "example": "published"
          },
          "createdBy": {
            "type": "string",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "type": {
            "type": "object",
            "description": "Post Type must be one of the following values: - post, story, reel",
            "example": "post"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tag Ids",
            "example": [
              "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
            ]
          },
          "ogTagsDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OgTagsSchema"
              }
            ],
            "description": "Og Tags Meta Data"
          },
          "postApprovalDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FormatedApprovalDetails"
              }
            ],
            "description": "Post Approval Details"
          },
          "tiktokPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TiktokPostSchema"
              }
            ],
            "description": "Tiktok Post Details"
          },
          "gmbPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GMBPostSchema"
              }
            ],
            "description": "GMB Post Details"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostUserSchema"
              }
            ],
            "description": "User"
          }
        }
      },
      "PostSuccessfulResponseSchema": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPostFormattedSchema"
            },
            "description": "Post Data"
          },
          "count": {
            "type": "number",
            "example": 6
          }
        }
      },
      "PostSuccessfulResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Posts"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostSuccessfulResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "PostApprovalSchema": {
        "type": "object",
        "properties": {
          "approver": {
            "type": "string",
            "description": "Approver",
            "example": "iVrVJ2uoXNF0wzcBzgl5"
          },
          "requesterNote": {
            "type": "string",
            "description": "Requester Notes",
            "example": "Test suggestion"
          },
          "approverNote": {
            "type": "string",
            "description": "Approver Notes",
            "example": "Test suggestion"
          },
          "approvalStatus": {
            "type": "object",
            "description": "Approval Status must be one of the following values: pending, approved, rejected, not_required",
            "example": "approved"
          }
        }
      },
      "CreatePostDTO": {
        "required": [
          "type",
          "accountIds",
          "userId"
        ],
        "type": "object",
        "properties": {
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Account Ids",
            "example": [
              "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
            ]
          },
          "summary": {
            "type": "string",
            "description": "Post Content \n The limitations of content as per the platforms is provided through the reference link in API description. The summary will be trimmed based on the limit",
            "example": "Hello World"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostMediaSchema"
            },
            "description": "Post Media Data \n The limitations of media as per the platforms is provided through the reference link in API description"
          },
          "status": {
            "type": "object",
            "description": "Status must be one of the following values: null, in_progress, draft, failed, published, scheduled, in_review, notification_sent, deleted",
            "example": "draft"
          },
          "scheduleDate": {
            "type": "string",
            "description": "Schedule Date"
          },
          "createdBy": {
            "type": "string",
            "description": "Created By"
          },
          "followUpComment": {
            "type": "string",
            "description": "Follow Up Comment on platform. It is not allowed on Tiktok and GMB accounts and there is a limit of 280 charecters for twitter account",
            "example": "First comment"
          },
          "ogTagsDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OgTagsSchema"
              }
            ],
            "description": "Og Tags Meta Data"
          },
          "type": {
            "type": "object",
            "description": "Post Type must be one of the following values: - post, story, reel",
            "example": "post"
          },
          "postApprovalDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostApprovalSchema"
              }
            ],
            "description": "Post Approval Details"
          },
          "scheduleTimeUpdated": {
            "type": "boolean",
            "description": "if schedule datetime is updated",
            "example": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of Tag Value",
            "example": [
              "65f151c99bc2bf3aaf970d72"
            ]
          },
          "categoryId": {
            "type": "string",
            "description": "Category Id",
            "example": "65f151c99bc2bf3aaf970d72"
          },
          "tiktokPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TiktokPostSchema"
              }
            ],
            "description": "Tiktok Post Details"
          },
          "gmbPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GMBPostSchema"
              }
            ],
            "description": "GMB Post Details"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "CreatePostSuccessfulResponseSchema": {
        "type": "object",
        "properties": {
          "post": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetPostFormattedSchema"
              }
            ],
            "description": "Post Data"
          }
        }
      },
      "CreatePostSuccessfulResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Created Post"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatePostSuccessfulResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "GetPostSuccessfulResponseSchema": {
        "type": "object",
        "properties": {
          "post": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetPostFormattedSchema"
              }
            ],
            "description": "Post Data"
          }
        }
      },
      "GetPostSuccessfulResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Post"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetPostSuccessfulResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "PostCreateRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Account Ids",
            "example": [
              "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
            ]
          },
          "summary": {
            "type": "string",
            "description": "Post Content \n The limitations of content as per the platforms is provided through the reference link in API description",
            "example": "Hello World"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostMediaSchema"
            },
            "description": "Post Media Data \n The limitations of media as per the platforms is provided through the reference link in API description"
          },
          "status": {
            "type": "object",
            "description": "Status must be one of the following values: in_progress, draft, failed, published, scheduled, in_review, notification_sent, deleted",
            "example": "draft"
          },
          "scheduleDate": {
            "type": "string",
            "description": "Schedule Date"
          },
          "createdBy": {
            "type": "string",
            "description": "Created By"
          },
          "followUpComment": {
            "type": "string",
            "description": "Follow Up Comment on platform. It is not allowed on Tiktok and GMB accounts and there is a limit of 280 charecters for twitter account",
            "example": "First comment"
          },
          "ogTagsDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OgTagsSchema"
              }
            ],
            "description": "Og Tags Meta Data"
          },
          "type": {
            "type": "object",
            "description": "Post Type must be one of the following values: - post, story, reel",
            "example": "post"
          },
          "postApprovalDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostApprovalSchema"
              }
            ],
            "description": "Post Approval Details"
          },
          "scheduleTimeUpdated": {
            "type": "boolean",
            "description": "if schedule datetime is updated",
            "example": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of Tag Value",
            "example": [
              "Tag1"
            ]
          },
          "categoryId": {
            "type": "string",
            "description": "Category Id"
          },
          "tiktokPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TiktokPostSchema"
              }
            ],
            "description": "Tiktok Post Details"
          },
          "gmbPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GMBPostSchema"
              }
            ],
            "description": "GMB Post Details"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "UpdatePostSuccessfulResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Updated Post"
          }
        }
      },
      "DeletePostSuccessfulResponseSchema": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string"
          }
        }
      },
      "DeletePostSuccessfulResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Deleted Post"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeletePostSuccessfulResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "GetAccountSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aF3KhyL8JIuBwzK3m7Ly_Lx1EI6YIgQYMQi0ytFXv_12554616564525983496"
          },
          "oauthId": {
            "type": "string",
            "example": "aF3KhyL8JIuBwzK3m7Ly"
          },
          "profileId": {
            "type": "string",
            "example": "aF3KhyL8JIuBwzK3m7Ly"
          },
          "name": {
            "type": "string",
            "example": "Sample Account"
          },
          "platform": {
            "type": "string",
            "description": "platform must be one of the following values: google, facebook, instagram, linkedin, twitter, tiktok",
            "example": "google"
          },
          "type": {
            "type": "string",
            "example": "location"
          },
          "expire": {
            "type": "string",
            "example": "2024-03-11T19:29:59.785Z"
          },
          "isExpired": {
            "type": "boolean",
            "example": false
          },
          "meta": {
            "type": "object",
            "example": {
              "hasGoogleUpdated": true,
              "canDelete": true
            }
          }
        }
      },
      "GetGroupSchema": {
        "required": [
          "id",
          "name",
          "accountIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group Id",
            "example": "6284c43d519161e96cc09c13"
          },
          "name": {
            "type": "string",
            "description": "name of group",
            "example": "Primary"
          },
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "6494063f4260855c1c5776b5_mhoUgTPkz19vjF5Qu7Av_2774080328752823730"
            ]
          }
        }
      },
      "AccountsListResponseSchema": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAccountSchema"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetGroupSchema"
            }
          }
        }
      },
      "AccountsListResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Accounts"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountsListResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "DeleteAccountResponseSchema": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "id": {
            "type": "string",
            "description": "Id",
            "example": "65fac446d599990d1313c1dd"
          }
        }
      },
      "LocationAndAccountDeleteResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Deleted Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeleteAccountResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "FacebookPageSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "name": {
            "type": "string",
            "example": "FB Page"
          },
          "avatar": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "isOwned": {
            "type": "boolean",
            "example": true
          },
          "isConnected": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "GetFacebookAccountsSchema": {
        "type": "object",
        "properties": {
          "pages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacebookPageSchema"
            },
            "description": "Facebook Pages Details"
          }
        }
      },
      "GetFacebookAccountsResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Facebook Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetFacebookAccountsSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "AttachFBAccountDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object",
            "example": "page"
          },
          "originId": {
            "type": "string",
            "example": "244405****11687"
          },
          "name": {
            "type": "string",
            "example": "JOHN_DEO"
          },
          "avatar": {
            "type": "string",
            "example": "https://storage.googleapis.com/2ad21ebc23/test"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "SocialMediaFacebookAccountSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "65f2d989a4f2f1e5322c3856"
          },
          "oAuthId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "oldId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "locationId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "originId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "platform": {
            "type": "object",
            "example": "facebook"
          },
          "type": {
            "type": "object",
            "description": "type value must be page",
            "example": "page"
          },
          "name": {
            "type": "string",
            "example": "Account Name"
          },
          "avatar": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "meta": {
            "type": "object",
            "example": {
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name",
                "avatar": "u37swmmLbA02zgqKPpxITe2"
              },
              "storeCode": "122",
              "isVerified": "true",
              "verified": true,
              "protected": true,
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "storefrontAddress": {
                "regionCode": "30021",
                "languageCode": "E001",
                "postalCode": "1221",
                "administrativeArea": "Down Town",
                "locality": "Louis Street",
                "addressLines": [
                  "207",
                  "county"
                ]
              }
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "created date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          }
        }
      },
      "SocialMediaFBAccountResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Added Facebook Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaFacebookAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "InstagramAccountSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "idu37swmmLbA02zgqKPpxITe2"
          },
          "name": {
            "type": "string",
            "example": "Insta account"
          },
          "avatar": {
            "type": "string",
            "example": "avau37swmmLbA02zgqKPpxITe2"
          },
          "pageId": {
            "type": "string",
            "example": "pidu37swmmLbA02zgqKPpxITe2"
          },
          "isConnected": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "GetInstagramAccountsSchema": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstagramAccountSchema"
            },
            "description": "Instagram Account Details"
          }
        }
      },
      "GetInstagramAccountsResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Instagram Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetInstagramAccountsSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "AttachIGAccountDTO": {
        "required": [
          "pageId"
        ],
        "type": "object",
        "properties": {
          "originId": {
            "type": "string",
            "example": "244405****11687"
          },
          "name": {
            "type": "string",
            "example": "JOHN_DEO"
          },
          "avatar": {
            "type": "string"
          },
          "pageId": {
            "type": "string",
            "example": "234234234242sd"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "SocialMediaInstagramAccountSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "65f2d989a4f2f1e5322c3856"
          },
          "oAuthId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "oldId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "locationId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "originId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "platform": {
            "type": "object",
            "example": "instagram"
          },
          "type": {
            "type": "object",
            "example": "profile"
          },
          "name": {
            "type": "string",
            "example": "Profile Name"
          },
          "avatar": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "meta": {
            "type": "object",
            "example": {
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name",
                "avatar": "u37swmmLbA02zgqKPpxITe2"
              },
              "storeCode": "122",
              "isVerified": "true",
              "verified": true,
              "protected": true,
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "storefrontAddress": {
                "regionCode": "30021",
                "languageCode": "E001",
                "postalCode": "1221",
                "administrativeArea": "Down Town",
                "locality": "Louis Street",
                "addressLines": [
                  "207",
                  "county"
                ]
              }
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "created date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          }
        }
      },
      "SocialMediaInstagramAccountResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Added Instagram Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaInstagramAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "LinkedInPageSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Page ID",
            "example": "w37swmmLbA02zgqKPpxITe"
          },
          "name": {
            "type": "string",
            "description": "LinkedIn Page Name",
            "example": "Sample Name"
          },
          "avatar": {
            "type": "string",
            "description": "Profile Avatar url",
            "example": "w37swmmLbA02zgqKPpxITe"
          },
          "urn": {
            "type": "string",
            "description": "URN"
          },
          "isConnected": {
            "type": "boolean",
            "description": "is connected to app",
            "example": true
          }
        }
      },
      "LinkedInProfileSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "example": "w37swmmLbA02zgqKPpxITe"
          },
          "name": {
            "type": "string",
            "description": "Name of profile",
            "example": "Profile Name"
          },
          "avatar": {
            "type": "string",
            "description": "Profile avatar",
            "example": "w37swmmLbA02zgqKPpxITe"
          },
          "urn": {
            "type": "string",
            "description": "URN"
          },
          "isConnected": {
            "type": "boolean",
            "description": "is connected to app",
            "example": true
          }
        }
      },
      "GetLinkedInAccountSchema": {
        "type": "object",
        "properties": {
          "pages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedInPageSchema"
            },
            "description": "LinkedIn Pages"
          },
          "profile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedInProfileSchema"
            },
            "description": "LinkedIn Profile Details"
          }
        }
      },
      "GetLinkedInAccountsResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched LinkedIn Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetLinkedInAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "AttachLinkedinAccountDTO": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "page",
              "group",
              "profile",
              "location",
              "business"
            ],
            "type": "string"
          },
          "originId": {
            "type": "string",
            "example": "244405****11687"
          },
          "name": {
            "type": "string",
            "example": "JOHN_DEO"
          },
          "avatar": {
            "type": "string"
          },
          "urn": {
            "type": "string"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "SocialMediaLinkedInAccountSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "65f2d989a4f2f1e5322c3856"
          },
          "oAuthId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "oldId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "locationId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "originId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "platform": {
            "type": "object",
            "example": "linkedin"
          },
          "type": {
            "type": "object",
            "description": "type must be one of the following values: page, profile",
            "example": "profile"
          },
          "name": {
            "type": "string",
            "example": "Profile Name"
          },
          "avatar": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "meta": {
            "type": "object",
            "example": {
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name",
                "avatar": "u37swmmLbA02zgqKPpxITe2"
              },
              "storeCode": "122",
              "isVerified": "true",
              "verified": true,
              "protected": true,
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "storefrontAddress": {
                "regionCode": "30021",
                "languageCode": "E001",
                "postalCode": "1221",
                "administrativeArea": "Down Town",
                "locality": "Louis Street",
                "addressLines": [
                  "207",
                  "county"
                ]
              }
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "created date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          }
        }
      },
      "SocialMediaLinkedInAccountResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Added LinkedIn Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaLinkedInAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "TwitterProfileSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of profile",
            "example": "ZHl1OWpfZEMyeWc5UjJOOU51RVNOal"
          },
          "name": {
            "type": "string",
            "description": "Name of profile",
            "example": "Twitter Account name"
          },
          "username": {
            "type": "string",
            "description": "Username of profile",
            "example": "sample_user"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar of profile",
            "example": "ZHl1OWpfZEMyeWc5UjJOOU51RVNOal"
          },
          "protected": {
            "type": "boolean",
            "description": "Is protected",
            "example": true
          },
          "verified": {
            "type": "boolean",
            "description": "Is verified",
            "example": true
          },
          "isConnected": {
            "type": "boolean",
            "description": "Is connected",
            "example": true
          }
        }
      },
      "GetTwitterAccountsSchema": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TwitterProfileSchema"
            },
            "description": "Twitter Profile Details"
          }
        }
      },
      "GetTwitterAccountsResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Twitter Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTwitterAccountsSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "AttachTwitterAccountDTO": {
        "type": "object",
        "properties": {
          "originId": {
            "type": "string",
            "example": "244405****11687"
          },
          "name": {
            "type": "string",
            "example": "JOHN_DEO"
          },
          "username": {
            "type": "string",
            "example": "user_name"
          },
          "avatar": {
            "type": "string"
          },
          "protected": {
            "type": "boolean",
            "example": true
          },
          "verified": {
            "type": "boolean",
            "example": true
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "SocialMediaTwitterAccountSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "65f2d989a4f2f1e5322c3856"
          },
          "oAuthId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "oldId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "locationId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "originId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "platform": {
            "type": "object",
            "example": "twitter"
          },
          "type": {
            "type": "object",
            "example": "profile"
          },
          "name": {
            "type": "string",
            "example": "Profile Name"
          },
          "avatar": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "meta": {
            "type": "object",
            "example": {
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name",
                "avatar": "u37swmmLbA02zgqKPpxITe2"
              },
              "storeCode": "122",
              "isVerified": "true",
              "verified": true,
              "protected": true,
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "storefrontAddress": {
                "regionCode": "30021",
                "languageCode": "E001",
                "postalCode": "1221",
                "administrativeArea": "Down Town",
                "locality": "Louis Street",
                "addressLines": [
                  "207",
                  "county"
                ]
              }
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "created date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          }
        }
      },
      "SocialMediaTwitterAccountResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Added Twitter Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaTwitterAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "UploadCSVDTO": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UploadFileResponseSchema": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "example": "omaDY3RbWtTP511e/social-import/d23d68c2-82c0-1db6e2.csv"
          },
          "rowsCount": {
            "type": "number",
            "example": 6
          },
          "fileName": {
            "type": "string",
            "example": "CSV Import Sample - CSV Import Sample.csv"
          }
        }
      },
      "UploadFileResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Uploaded CSV"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UploadFileResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "SetAccountsDTO": {
        "required": [
          "accountIds",
          "filePath",
          "rowsCount",
          "fileName"
        ],
        "type": "object",
        "properties": {
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Account Ids",
            "example": [
              "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
            ]
          },
          "filePath": {
            "type": "string",
            "description": "File path",
            "example": "o6241QsiRwUIJHyjuhos/social-planner-import/a6d04a26-0401-4e52-8f48-dbb274050fab.csv"
          },
          "rowsCount": {
            "type": "number",
            "description": "Entires Count. rowcCount must be between 1 and number of posts in CSV",
            "example": 1
          },
          "fileName": {
            "type": "string",
            "description": "Name of file",
            "example": "test.csv"
          },
          "approver": {
            "type": "string",
            "example": "o6241QsiRwUIJHyjuhos"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "SetAccountsResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Accounts Set Successfully"
          }
        }
      },
      "CSVImportSchema": {
        "required": [
          "_id"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Csv Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "locationId": {
            "type": "string",
            "description": "locationId",
            "example": "iVrVJ2uoXNF0wzcBzgl5"
          },
          "fileName": {
            "type": "string",
            "description": "File Name",
            "example": "sample.csv"
          },
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Account Ids",
            "example": [
              "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
            ]
          },
          "file": {
            "type": "string",
            "description": "File path",
            "example": "File"
          },
          "status": {
            "type": "string",
            "description": "status must be one of the following values: pending, in_progress, completed, failed, in_review, importing, deleted",
            "example": "completed"
          },
          "count": {
            "type": "number",
            "description": "Posts count",
            "example": 5
          },
          "createdBy": {
            "type": "string",
            "description": "Created By Id",
            "example": "SDsdfdf45Dgs4w3ssss"
          },
          "traceId": {
            "type": "string",
            "description": "Trace Id",
            "example": "FSeSDsdfdf45Dgs4w3ssss"
          },
          "originId": {
            "type": "string",
            "description": "Origin Id",
            "example": "FSeSDsdfdf45Dgs4w3ssss"
          },
          "approver": {
            "type": "string",
            "description": "Approver Id",
            "example": "FSeSDsdfdf45Dgs4w3ssss"
          },
          "createdAt": {
            "type": "string",
            "description": "Date Created",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          }
        }
      },
      "GetUploadStatusResponseSchema": {
        "required": [
          "csvs",
          "count"
        ],
        "type": "object",
        "properties": {
          "csvs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CSVImportSchema"
              }
            ],
            "description": "CSV Data"
          },
          "count": {
            "type": "number",
            "example": 6
          }
        }
      },
      "GetUploadStatusResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched CSV Upload Status"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetUploadStatusResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "OgImageSchema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Image url",
            "example": "https://knowledge.wharton.upenn.edu/wp-content/uploads/2019/07/072619_socialmedia_phonelikes-600x440.jpg"
          },
          "width": {
            "type": "number",
            "description": "Image width",
            "example": 400
          },
          "height": {
            "type": "number",
            "description": "Image height",
            "example": 400
          },
          "type": {
            "type": "string",
            "description": "Image Type",
            "example": "image/jpg"
          }
        }
      },
      "IOgTagsSchema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Tag url",
            "example": "https://knowledge.wharton.upenn.edu/article/impact-of-social-media/"
          },
          "ogDescription": {
            "type": "string",
            "description": "Tag description",
            "example": "Social media as we know it has barely"
          },
          "ogImage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OgImageSchema"
              }
            ],
            "description": "Tag description"
          },
          "ogTitle": {
            "type": "string",
            "description": "Tag Title",
            "example": "The Impact of Social Media: Is it Irreplaceable?"
          },
          "ogUrl": {
            "type": "string",
            "description": "Tag Url",
            "example": "https://knowledge.wharton.upenn.edu/article/impact-of-social-media/"
          },
          "ogSiteName": {
            "type": "string",
            "description": "Site Name",
            "example": "Knowledge at Wharton"
          },
          "error": {
            "type": "string",
            "description": "Og Tag Error",
            "example": "InvalidLink"
          }
        }
      },
      "CSVMediaResponseSchema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Media Url",
            "example": "https://storage.googleapis.com/ghl-test/omaDY3RbWtTP511e808O/media/38e53059-b92706571605.png"
          },
          "type": {
            "type": "string",
            "description": "Media Type",
            "example": "image/webp"
          },
          "size": {
            "type": "number",
            "description": "Media Size",
            "example": 18362
          },
          "width": {
            "type": "number",
            "description": "Media Width",
            "example": 500
          },
          "height": {
            "type": "number",
            "description": "Media Height",
            "example": 500
          },
          "aspectRatio": {
            "type": "number",
            "description": "Media Aspect Ratio",
            "example": 1.5
          },
          "duration": {
            "type": "number",
            "description": "Media Aspect Ratio",
            "example": 60
          },
          "format": {
            "type": "string",
            "description": "Media format",
            "example": "jpg"
          },
          "videoCodecName": {
            "type": "string",
            "description": "Video Codec",
            "example": "h264"
          },
          "frameRate": {
            "type": "number",
            "description": "Video Frame Rate",
            "example": 21
          },
          "audioCodecName": {
            "type": "string",
            "description": "Audio Codec",
            "example": "aac"
          },
          "audioChannels": {
            "type": "number",
            "description": "Audio Channel",
            "example": 1
          },
          "displayAspectRatio": {
            "type": "string",
            "description": "Display Aspect Ratio",
            "example": "250 : 167"
          },
          "frames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of frames"
          },
          "selectedPoster": {
            "type": "number",
            "description": "Selected Poster",
            "example": 0
          },
          "error": {
            "type": "string",
            "description": "Error",
            "example": "Image is larger than 10MB"
          },
          "instagramError": {
            "type": "string",
            "description": "Instagram media error. It can we one of the following errors: imageSize, imageType, imageAspectRatio, videoType, videoDuration, videoSize, videoAspectRatio, videoWidthHeight, audioCodec, audioCodecChannels, videoCodec, videoFrameRate",
            "example": "imageSize"
          },
          "gmbError": {
            "type": "string",
            "description": "GMB media error. It can be one of the following errors: imageSize, imageDimension, imageType",
            "example": "imageDimension"
          },
          "facebookError": {
            "type": "string",
            "description": "Facebook media error. It can be one of the following errors: imageSize, imageType, videoDuration, videoSize",
            "example": "videoDuration"
          },
          "linkedinError": {
            "type": "string",
            "description": "LinkedIn media error. It can be one of the following errors: imageSize, imageType, videoType, videoDuration, videoSize",
            "example": "imageType"
          },
          "twitterError": {
            "type": "string",
            "description": "Twitter media error. It can be one of the following errors: imageSize, videoType, videoDuration, videoSize",
            "example": "videoSize"
          },
          "tiktokError": {
            "type": "string",
            "description": "Tiktok media error. It can be one of the following errors: videoType, videoDuration, videoSize, videoWidthHeight, videoCodec, videoFrameRate",
            "example": "videoFrameRate"
          },
          "tiktokBusinessError": {
            "type": "string",
            "description": "Tikok Business media error. It can be one of the following errors: videoType, videoDuration, videoSize, videoWidthHeight, videoCodec, videoFrameRate",
            "example": "videoType"
          },
          "invalidError": {
            "type": "string",
            "description": "Media error. It can be one of the following values: imageSize, imageWidth",
            "example": "imageSize"
          }
        }
      },
      "CSVPostSchema": {
        "type": "object",
        "properties": {
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Account Ids",
            "example": [
              "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
            ]
          },
          "link": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IOgTagsSchema"
              }
            ],
            "description": "OG Tag"
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSVMediaResponseSchema"
            },
            "description": "Post Media List"
          },
          "scheduleDate": {
            "type": "string",
            "example": "2022-11-23T05:53:00.000Z"
          },
          "summary": {
            "type": "string",
            "example": "First post"
          },
          "followUpComment": {
            "type": "string",
            "example": "Initial Comment"
          },
          "type": {
            "type": "object",
            "example": "post"
          },
          "tiktokPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TiktokPostSchema"
              }
            ],
            "description": "Tiktok Post Details"
          },
          "gmbPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GMBPostSchema"
              }
            ],
            "description": "GMB Post Details"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error Description"
          }
        }
      },
      "GetCsvPostResponseSchema": {
        "type": "object",
        "properties": {
          "csv": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CSVImportSchema"
              }
            ],
            "description": "CSV Data"
          },
          "count": {
            "type": "number",
            "example": 6
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSVPostSchema"
            },
            "description": "CSV Posts"
          }
        }
      },
      "GetCsvPostResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched CSV Post"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetCsvPostResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "CSVDefaultDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "CsvPostStatusResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Updated Successfully"
          }
        }
      },
      "CsvResponse": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "Location Name"
          },
          "fileName": {
            "type": "string",
            "example": "File Name"
          },
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Account Ids",
            "example": [
              "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
            ]
          },
          "file": {
            "type": "string",
            "example": "File"
          },
          "status": {
            "type": "object",
            "description": "status must be one of the following values: pending, in_progress, completed, failed, in_review, importing, deleted",
            "example": "completed"
          },
          "count": {
            "type": "number",
            "example": 5
          },
          "createdBy": {
            "type": "string",
            "example": "AccountId_SDsdfdf45Dgs4w3ssss"
          },
          "traceId": {
            "type": "string",
            "example": "FSeSDsdfdf45Dgs4w3ssss"
          },
          "originId": {
            "type": "string",
            "example": "FSeSDsdfdf45Dgs4w3ssss"
          },
          "approver": {
            "type": "string",
            "example": "FSeSDsdfdf45Dgs4w3ssss"
          }
        }
      },
      "CSVResponseSchema": {
        "type": "object",
        "properties": {
          "csv": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CsvResponse"
              }
            ],
            "description": "CSV Data"
          }
        }
      },
      "DeleteCsvResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Deleted Post"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CSVResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "DeletePostResponseSchema": {
        "required": [
          "postId"
        ],
        "type": "object",
        "properties": {
          "postId": {
            "type": "string",
            "description": "Post Id"
          }
        }
      },
      "DeletePostResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Deleted Post"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeletePostResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "TiktokProfileSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "example": "w37swmmLbA02zgqKPpxITe"
          },
          "name": {
            "type": "string",
            "description": "Name of account",
            "example": "Account Name"
          },
          "username": {
            "type": "string",
            "description": "Username of account",
            "example": "User_name"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar of profile account",
            "example": "w37swmmLbA02zgqKPpxITe"
          },
          "verified": {
            "type": "boolean",
            "description": "Is verified",
            "example": true
          },
          "isConnected": {
            "type": "boolean",
            "description": "Is connected",
            "example": true
          },
          "type": {
            "type": "object",
            "description": "Tiktok Account Type must be one of the following values: business, profile",
            "example": "BUSINESS"
          }
        }
      },
      "GetTiktokAccountSchema": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TiktokProfileSchema"
            },
            "description": "Tiktok Business Account"
          }
        }
      },
      "GetTiktokAccountResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Tiktok Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTiktokAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "AttachTiktokAccountDTO": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "page",
              "group",
              "profile",
              "location",
              "business"
            ],
            "type": "string"
          },
          "originId": {
            "type": "string",
            "example": "244405****11687"
          },
          "name": {
            "type": "string",
            "example": "JOHN_DEO"
          },
          "avatar": {
            "type": "string"
          },
          "verified": {
            "type": "boolean",
            "example": true
          },
          "username": {
            "type": "string",
            "example": "JOHN_DEO"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd"
          }
        }
      },
      "SocialMediaTiktokAccountSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "65f2d989a4f2f1e5322c3856"
          },
          "oAuthId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "oldId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "locationId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "originId": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "platform": {
            "type": "object",
            "example": "tiktok"
          },
          "type": {
            "type": "object",
            "description": "type must be one of the following values: profile, business",
            "example": "profile"
          },
          "name": {
            "type": "string",
            "example": "Account Name"
          },
          "avatar": {
            "type": "string",
            "example": "u37swmmLbA02zgqKPpxITe2"
          },
          "meta": {
            "type": "object",
            "example": {
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name",
                "avatar": "u37swmmLbA02zgqKPpxITe2"
              },
              "storeCode": "122",
              "isVerified": "true",
              "verified": true,
              "protected": true,
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "storefrontAddress": {
                "regionCode": "30021",
                "languageCode": "E001",
                "postalCode": "1221",
                "administrativeArea": "Down Town",
                "locality": "Louis Street",
                "addressLines": [
                  "207",
                  "county"
                ]
              }
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "created date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated date",
            "format": "date-time",
            "example": "2024-03-14T11:03:37.015Z"
          }
        }
      },
      "SocialMediaTiktokAccountResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Added Tiktok Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaTiktokAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "GetTiktokBusinessAccountSchema": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TiktokProfileSchema"
            },
            "description": "Tiktok Profile"
          }
        }
      },
      "GetTiktokBusinessAccountResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Tiktok Business Account"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTiktokBusinessAccountSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "CategorySchema": {
        "required": [
          "deleted"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category Name",
            "example": "Primary"
          },
          "primaryColor": {
            "type": "string",
            "description": "Color For Category",
            "example": "#FFFFFF"
          },
          "secondaryColor": {
            "type": "string",
            "description": "Secondary Color",
            "example": "#FFFFFF"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "_id": {
            "type": "string",
            "description": "ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "createdBy": {
            "type": "string",
            "description": "Created By User",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "deleted": {
            "type": "boolean",
            "description": "Deleted Value",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          }
        }
      },
      "GetByLocationIdResponseSchema": {
        "required": [
          "count",
          "categories"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Count",
            "example": 3
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategorySchema"
            },
            "description": "Meta Data"
          }
        }
      },
      "GetByLocationIdResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Categories by Location ID"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetByLocationIdResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "GetByIdResponseSchema": {
        "required": [
          "deleted"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category Name",
            "example": "Primary"
          },
          "primaryColor": {
            "type": "string",
            "description": "Color For Category",
            "example": "#32a852"
          },
          "secondaryColor": {
            "type": "string",
            "description": "Secondary Color",
            "example": "#32a852"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "_id": {
            "type": "string",
            "description": "ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "createdBy": {
            "type": "string",
            "description": "Created By User",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "deleted": {
            "type": "boolean",
            "description": "Deleted Value",
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Category not found"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          }
        }
      },
      "GetCategorySchema": {
        "type": "object",
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetByIdResponseSchema"
              }
            ],
            "description": "Category Schema"
          }
        }
      },
      "GetByIdResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Category"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetCategorySchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "SocialMediaTagSchema": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Tag Name",
            "example": "Primary Tag"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "_id": {
            "type": "string",
            "description": "ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "createdBy": {
            "type": "string",
            "description": "Created By User Id",
            "example": "Lx1EI6YIgQYMQi0ytFXv"
          },
          "deleted": {
            "type": "boolean",
            "description": "Deleted boolean value",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-02T00:00:00.000Z"
          }
        }
      },
      "GetTagsByLocationIdResponseSchema": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaTagSchema"
            },
            "description": "Tags Data"
          },
          "count": {
            "type": "number",
            "description": "Count",
            "example": 3
          }
        }
      },
      "GetTagsByLocationIdResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Tags by Location ID"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTagsByLocationIdResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "UpdateTagDTO": {
        "required": [
          "tagIds"
        ],
        "type": "object",
        "properties": {
          "tagIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of Tag Ids",
            "example": [
              "65fbdcfecc884f07e645ea8b"
            ]
          }
        }
      },
      "GetTagsByIdResponseSchema": {
        "required": [
          "tags"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaTagSchema"
            },
            "description": "Social Media Tag Data"
          },
          "count": {
            "type": "number",
            "description": "Count",
            "example": 3
          }
        }
      },
      "GetTagsByIdResponseDTO": {
        "required": [
          "success",
          "statusCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Fetched Tags by Tag IDs"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTagsByIdResponseSchema"
              }
            ],
            "description": "Requested Results"
          }
        }
      },
      "DeletePostsDto": {
        "type": "object",
        "properties": {
          "postIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Requested Results",
            "example": [
              "662791ee3f216822d7da0c8c"
            ]
          }
        }
      },
      "BulkDeletePostSuccessfulResponseSchema": {
        "type": "object",
        "properties": {
          "deletedCount": {
            "type": "number"
          }
        }
      },
      "BulkDeleteResponseDto": {
        "required": [
          "success",
          "statusCode",
          "message",
          "results"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success or Failure",
            "example": true
          },
          "statusCode": {
            "type": "number",
            "description": "Status Code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": "Posts Deleted Successfully"
          },
          "results": {
            "description": "Message and deleted count",
            "example": {
              "message": "Posts deleted successfully",
              "deletedCount": 10
            }
          }
        }
      },
      "GroupDTO": {
        "required": [
          "locationId",
          "name",
          "description",
          "slug"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "ocQHyuzHvysMo5N5VsXc"
          },
          "name": {
            "type": "string",
            "example": "group a"
          },
          "description": {
            "type": "string",
            "example": "group description"
          },
          "slug": {
            "type": "string",
            "example": "15-mins"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "id": {
            "type": "string",
            "example": "ocQHyuzHvysMo5N5VsXc"
          }
        }
      },
      "AllGroupsSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDTO"
            }
          }
        }
      },
      "ValidateGroupSlugPostBody": {
        "required": [
          "locationId",
          "slug"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "slug": {
            "type": "string",
            "description": "Slug",
            "example": "calendar-1"
          }
        }
      },
      "ValidateGroupSlugSuccessResponseDTO": {
        "required": [
          "available"
        ],
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          }
        }
      },
      "GroupCreateDTO": {
        "required": [
          "locationId",
          "name",
          "description",
          "slug"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "ocQHyuzHvysMo5N5VsXc"
          },
          "name": {
            "type": "string",
            "example": "group a"
          },
          "description": {
            "type": "string",
            "example": "group description"
          },
          "slug": {
            "type": "string",
            "example": "15-mins"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "GroupCreateSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/GroupDTO"
          }
        }
      },
      "GroupSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success",
            "example": "true"
          }
        }
      },
      "GroupStatusUpdateParams": {
        "required": [
          "isActive"
        ],
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "Is Active?",
            "example": true
          }
        }
      },
      "GroupUpdateDTO": {
        "required": [
          "name",
          "description",
          "slug"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "group a"
          },
          "description": {
            "type": "string",
            "example": "group description"
          },
          "slug": {
            "type": "string",
            "example": "15-mins"
          }
        }
      },
      "AppointmentCreateSchema": {
        "required": [
          "calendarId",
          "locationId",
          "contactId",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Test Event"
          },
          "meetingLocationType": {
            "enum": [
              "custom",
              "zoom",
              "gmeet",
              "phone",
              "address",
              "ms_teams",
              "google"
            ],
            "type": "string",
            "description": "Meeting location type. \n- If `address` is provided in the request body, the `meetingLocationType` defaults to **custom**.",
            "example": "custom"
          },
          "meetingLocationId": {
            "type": "string",
            "description": "The unique identifier for the meeting location.\n- This value can be found in `calendar.locationConfigurations`or `calendar.teamMembers[].locationConfigurations`",
            "default": "default",
            "example": "custom_0"
          },
          "overrideLocationConfig": {
            "type": "boolean",
            "description": "Flag to override location config\n- **false** - If only `meetingLocationId` is provided\n- **true** - If only `meetingLocationType` is provided\n",
            "example": true
          },
          "appointmentStatus": {
            "enum": [
              "new",
              "confirmed",
              "cancelled",
              "showed",
              "noshow",
              "invalid"
            ],
            "type": "string",
            "example": "confirmed"
          },
          "assignedUserId": {
            "type": "string",
            "description": "Assigned User Id",
            "example": "0007BWpSzSwfiuSl0tR2"
          },
          "address": {
            "type": "string",
            "description": "Appointment Address",
            "example": "Zoom"
          },
          "ignoreDateRange": {
            "type": "boolean",
            "description": "If set to true, the minimum scheduling notice and date range would be ignored",
            "example": false
          },
          "toNotify": {
            "type": "boolean",
            "description": "If set to false, the automations will not run",
            "example": false
          },
          "ignoreFreeSlotValidation": {
            "type": "boolean",
            "description": "If true the time slot validation would be avoided for any appointment creation (even the ignoreDateRange)",
            "example": true
          },
          "rrule": {
            "type": "string",
            "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events. DTSTART is not required, instance ids are calculated on the basis of startTime of the event. The rrule only be applied if ignoreFreeSlotValidation is true."
          },
          "calendarId": {
            "type": "string",
            "description": "Calendar Id",
            "example": "CVokAlI8fgw4WYWoCtQz"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "C2QujeCh8ZnC7al2InWR"
          },
          "contactId": {
            "type": "string",
            "description": "Contact Id",
            "example": "0007BWpSzSwfiuSl0tR2"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30"
          },
          "endTime": {
            "type": "string",
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30"
          }
        }
      },
      "AppointmentSchemaResponse": {
        "required": [
          "calendarId",
          "locationId",
          "contactId",
          "id"
        ],
        "type": "object",
        "properties": {
          "calendarId": {
            "type": "string",
            "description": "Calendar Id",
            "example": "CVokAlI8fgw4WYWoCtQz"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "C2QujeCh8ZnC7al2InWR"
          },
          "contactId": {
            "type": "string",
            "description": "Contact Id",
            "example": "0007BWpSzSwfiuSl0tR2"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30"
          },
          "endTime": {
            "type": "string",
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Test Event"
          },
          "meetingLocationType": {
            "type": "string",
            "description": "Meeting Location Type",
            "default": "default",
            "example": "custom"
          },
          "appointmentStatus": {
            "enum": [
              "new",
              "confirmed",
              "cancelled",
              "showed",
              "noshow",
              "invalid"
            ],
            "type": "string",
            "example": "confirmed"
          },
          "assignedUserId": {
            "type": "string",
            "description": "Assigned User Id",
            "example": "0007BWpSzSwfiuSl0tR2"
          },
          "address": {
            "type": "string",
            "description": "Appointment Address",
            "example": "Zoom"
          },
          "isRecurring": {
            "type": "boolean",
            "description": "true if the event is recurring otherwise false",
            "example": "true"
          },
          "rrule": {
            "type": "string",
            "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events"
          },
          "id": {
            "type": "string",
            "description": "Id",
            "example": "0TkCdp9PfvLeWKYRRvIz"
          }
        }
      },
      "AppointmentEditSchema": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Test Event"
          },
          "meetingLocationType": {
            "enum": [
              "custom",
              "zoom",
              "gmeet",
              "phone",
              "address",
              "ms_teams",
              "google"
            ],
            "type": "string",
            "description": "Meeting location type. \n- If `address` is provided in the request body, the `meetingLocationType` defaults to **custom**.",
            "example": "custom"
          },
          "meetingLocationId": {
            "type": "string",
            "description": "The unique identifier for the meeting location.\n- This value can be found in `calendar.locationConfigurations`or `calendar.teamMembers[].locationConfigurations`",
            "default": "default",
            "example": "custom_0"
          },
          "overrideLocationConfig": {
            "type": "boolean",
            "description": "Flag to override location config\n- **false** - If only `meetingLocationId` is provided\n- **true** - If only `meetingLocationType` is provided\n",
            "example": true
          },
          "appointmentStatus": {
            "enum": [
              "new",
              "confirmed",
              "cancelled",
              "showed",
              "noshow",
              "invalid"
            ],
            "type": "string",
            "example": "confirmed"
          },
          "assignedUserId": {
            "type": "string",
            "description": "Assigned User Id",
            "example": "0007BWpSzSwfiuSl0tR2"
          },
          "address": {
            "type": "string",
            "description": "Appointment Address",
            "example": "Zoom"
          },
          "ignoreDateRange": {
            "type": "boolean",
            "description": "If set to true, the minimum scheduling notice and date range would be ignored",
            "example": false
          },
          "toNotify": {
            "type": "boolean",
            "description": "If set to false, the automations will not run",
            "example": false
          },
          "ignoreFreeSlotValidation": {
            "type": "boolean",
            "description": "If true the time slot validation would be avoided for any appointment creation (even the ignoreDateRange)",
            "example": true
          },
          "rrule": {
            "type": "string",
            "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events. DTSTART is not required, instance ids are calculated on the basis of startTime of the event. The rrule only be applied if ignoreFreeSlotValidation is true."
          },
          "calendarId": {
            "type": "string",
            "description": "Calendar Id",
            "example": "CVokAlI8fgw4WYWoCtQz"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30"
          },
          "endTime": {
            "type": "string",
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30"
          }
        }
      },
      "CreatedOrUpdatedBy": {
        "required": [
          "source"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The ID of the user who created or updated the appointment"
          },
          "source": {
            "type": "string",
            "description": "The source of the appointment"
          }
        }
      },
      "CalendarEventDTO": {
        "required": [
          "id",
          "title",
          "calendarId",
          "locationId",
          "contactId",
          "groupId",
          "appointmentStatus",
          "assignedUserId",
          "users",
          "startTime",
          "endTime",
          "dateAdded",
          "dateUpdated"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Event Id or Instance id for a recurring event"
          },
          "address": {
            "type": "string",
            "description": "Calendar Event address",
            "example": "https://meet.google.com/yqp-gogr-wve"
          },
          "title": {
            "type": "string",
            "description": "Calendar Event title",
            "example": "Appointment with GHL Dev team"
          },
          "calendarId": {
            "type": "string",
            "description": "Calendar ID",
            "example": "BqTwX8QFwXzpegMve9EQ"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "0007BWpSzSwfiuSl0tR2"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID",
            "example": "9NkT25Vor1v4aQatFsv2"
          },
          "groupId": {
            "type": "string",
            "description": "Group ID",
            "example": "9NkT25Vor1v4aQatFsv2"
          },
          "appointmentStatus": {
            "type": "string",
            "description": "Appointment Status",
            "example": "confirmed"
          },
          "assignedUserId": {
            "type": "string",
            "description": "AssignedUser - the primary owner of an appointment",
            "example": "YlWd2wuCAZQzh2cH1fVZ"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Users - the secondary owners of an appointment.",
            "example": [
              "YlWd2wuCAZQzh2cH1fVZ",
              "9NkT25Vor1v4aQatFsv2"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "example": "Some dummy note"
          },
          "isRecurring": {
            "type": "boolean",
            "description": "true if the event is recurring otherwise false",
            "example": "true"
          },
          "rrule": {
            "type": "string",
            "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events. DTSTART is not required, instance ids are calculated on the basis of startTime of the event."
          },
          "startTime": {
            "type": "object",
            "description": "Start Time",
            "example": "2023-09-25T16:00:00+05:30"
          },
          "endTime": {
            "type": "object",
            "description": "End Time",
            "example": "2023-09-25T16:00:00+05:30"
          },
          "dateAdded": {
            "type": "object",
            "description": "Date Added",
            "example": "2023-09-25T16:00:00+05:30"
          },
          "dateUpdated": {
            "type": "object",
            "description": "Date Updated",
            "example": "2023-09-25T16:00:00+05:30"
          },
          "assignedResources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of associated resources rooms and/or equipments"
          },
          "createdBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedOrUpdatedBy"
              }
            ],
            "description": "Appointment booked by metadata"
          },
          "masterEventId": {
            "type": "string",
            "description": "Master event id for a recurring instance",
            "example": "ocWd2wuBGAQzh2cH1fSZ"
          }
        }
      },
      "GetCalendarEventsSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarEventDTO"
            }
          }
        }
      },
      "BlockSlotCreateRequestDTO": {
        "required": [
          "calendarId",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Test Event"
          },
          "calendarId": {
            "type": "string",
            "description": "Either calendarId or assignedUserId can be set, not both.",
            "example": "CVokAlI8fgw4WYWoCtQz"
          },
          "assignedUserId": {
            "type": "string",
            "description": "Either calendarId or assignedUserId can be set, not both.",
            "example": "CVokAlI8fgw4WYWoCtQz"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "C2QujeCh8ZnC7al2InWR"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30"
          },
          "endTime": {
            "type": "string",
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30"
          }
        }
      },
      "BlockedSlotSuccessfulResponseDto": {
        "required": [
          "id",
          "locationId",
          "title",
          "startTime",
          "endTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "example": "0TkCdp9PfvLeWKYRRvIz"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "C2QujeCh8ZnC7al2InWR"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "My event"
          },
          "startTime": {
            "type": "object",
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30"
          },
          "endTime": {
            "type": "object",
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30"
          },
          "calendarId": {
            "type": "string",
            "description": "Calendar id",
            "example": "CVokAlI8fgw4WYWoCtQz"
          },
          "assignedUserId": {
            "type": "string",
            "description": "Assigned User Id",
            "example": "0007BWpSzSwfiuSl0tR2"
          }
        }
      },
      "BlockSlotEditRequestDTO": {
        "required": [
          "calendarId",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Test Event"
          },
          "calendarId": {
            "type": "string",
            "description": "Either calendarId or assignedUserId can be set, not both.",
            "example": "CVokAlI8fgw4WYWoCtQz"
          },
          "assignedUserId": {
            "type": "string",
            "description": "Either calendarId or assignedUserId can be set, not both.",
            "example": "CVokAlI8fgw4WYWoCtQz"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "C2QujeCh8ZnC7al2InWR"
          },
          "startTime": {
            "type": "string",
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30"
          },
          "endTime": {
            "type": "string",
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30"
          }
        }
      },
      "SlotsSchema": {
        "required": [
          "slots"
        ],
        "type": "object",
        "properties": {
          "slots": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetSlotsSuccessfulResponseDto": {
        "required": [
          "_dates_"
        ],
        "type": "object",
        "properties": {
          "_dates_": {
            "$ref": "#/components/schemas/SlotsSchema"
          }
        }
      },
      "CalendarNotification": {
        "required": [
          "shouldSendToContact",
          "shouldSendToGuest",
          "shouldSendToUser",
          "shouldSendToSelectedUsers",
          "selectedUsers"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "email"
            ],
            "type": "string",
            "description": "Calendar Notification",
            "default": "email",
            "example": "email"
          },
          "shouldSendToContact": {
            "type": "boolean"
          },
          "shouldSendToGuest": {
            "type": "boolean"
          },
          "shouldSendToUser": {
            "type": "boolean"
          },
          "shouldSendToSelectedUsers": {
            "type": "boolean"
          },
          "selectedUsers": {
            "type": "string",
            "description": "Comma separated emails",
            "example": "user1@testemail.com,user2@testemail.com"
          }
        }
      },
      "LocationConfiguration": {
        "required": [
          "kind"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "enum": [
              "custom",
              "zoom_conference",
              "google_conference",
              "inbound_call",
              "outbound_call",
              "physical",
              "booker",
              "ms_teams_conference"
            ],
            "type": "string",
            "description": "Type of meeting location. zoom_conference/google_conference/ms_teams_conference is not supported in event calendar type",
            "example": "custom"
          },
          "location": {
            "type": "string",
            "description": "Address for meeting location. Not applicable on \"zoom_conference\", \"google_conference\" and \"ms_teams_conference\" kind"
          }
        }
      },
      "TeamMember": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "ocQHyuzHvysMo5N5VsXc"
          },
          "priority": {
            "enum": [
              0,
              0.5,
              1
            ],
            "type": "number",
            "default": 0.5
          },
          "meetingLocationType": {
            "enum": [
              "custom",
              "zoom",
              "gmeet",
              "phone",
              "address",
              "teams",
              "booker"
            ],
            "type": "string",
            "description": "🚨 Deprecated! Use `locationConfigurations.kind` instead.",
            "default": "custom",
            "readOnly": true,
            "example": "custom",
            "deprecated": true
          },
          "meetingLocation": {
            "type": "string",
            "description": "🚨 Deprecated! Use `locationConfigurations.location` instead.",
            "readOnly": true,
            "deprecated": true
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Marks a user as primary. This property is required in case of collective booking calendars. Only one user can be primary."
          },
          "locationConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationConfiguration"
            },
            "description": "Meeting location configuration for event calendar.\n- *Multiple locations are allowed only when one team member is selected.*\n- *For **Class booking** and **Collective** calendars, only one location configuration is allowed for each team member.*"
          }
        }
      },
      "Hour": {
        "required": [
          "openHour",
          "openMinute",
          "closeHour",
          "closeMinute"
        ],
        "type": "object",
        "properties": {
          "openHour": {
            "maximum": 23,
            "minimum": 0,
            "type": "number"
          },
          "openMinute": {
            "maximum": 60,
            "minimum": 0,
            "type": "number"
          },
          "closeHour": {
            "maximum": 23,
            "minimum": 0,
            "type": "number"
          },
          "closeMinute": {
            "maximum": 60,
            "minimum": 0,
            "type": "number"
          }
        }
      },
      "OpenHour": {
        "required": [
          "daysOfTheWeek",
          "hours"
        ],
        "type": "object",
        "properties": {
          "daysOfTheWeek": {
            "type": "array",
            "items": {
              "maximum": 6,
              "minimum": 0,
              "type": "number"
            }
          },
          "hours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hour"
            }
          }
        }
      },
      "Recurring": {
        "type": "object",
        "properties": {
          "freq": {
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY"
            ],
            "type": "string"
          },
          "count": {
            "maximum": 24,
            "type": "number",
            "description": "Number of recurrences"
          },
          "bookingOption": {
            "enum": [
              "skip",
              "continue",
              "book_next"
            ],
            "type": "string",
            "description": "This setting contols what to do incase a recurring slot is unavailable"
          },
          "bookingOverlapDefaultStatus": {
            "enum": [
              "confirmed",
              "new"
            ],
            "type": "string",
            "description": "This setting contols what to do incase a recurring slot is unavailable"
          }
        }
      },
      "Availability": {
        "required": [
          "date",
          "hours"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Formulate the date string in the format of `<YYYY-MM-DD in local timezone>T00:00:00.000Z`.",
            "example": "2023-09-24T00:00:00.000Z"
          },
          "hours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hour"
            }
          },
          "deleted": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "LookBusyConfiguration": {
        "required": [
          "enabled",
          "LookBusyPercentage"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Apply Look Busy",
            "default": false,
            "example": true
          },
          "LookBusyPercentage": {
            "type": "number",
            "description": "Percentage of slots that will be hidden"
          }
        }
      },
      "CalendarCreateDTO": {
        "required": [
          "locationId",
          "name"
        ],
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "Should the created calendar be active or draft",
            "default": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarNotification"
            },
            "description": "🚨 Deprecated! Please use 'Calendar Notifications APIs' instead.",
            "deprecated": true
          },
          "locationId": {
            "type": "string",
            "example": "ocQHyuzHvysMo5N5VsXc"
          },
          "groupId": {
            "type": "string",
            "description": "Group Id",
            "example": "BqTwX8QFwXzpegMve9EQ"
          },
          "teamMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "description": "Team members are required for calendars of type: Round Robin, Collective, Class, Service. Personal calendar must have exactly one team member."
          },
          "eventType": {
            "enum": [
              "RoundRobin_OptimizeForAvailability",
              "RoundRobin_OptimizeForEqualDistribution"
            ],
            "type": "string",
            "default": "RoundRobin_OptimizeForAvailability"
          },
          "name": {
            "type": "string",
            "example": "test calendar"
          },
          "description": {
            "type": "string",
            "example": "this is used for testing"
          },
          "slug": {
            "type": "string",
            "example": "test1"
          },
          "widgetSlug": {
            "type": "string",
            "example": "test1"
          },
          "calendarType": {
            "enum": [
              "round_robin",
              "event",
              "class_booking",
              "collective",
              "service_booking",
              "personal"
            ],
            "type": "string"
          },
          "widgetType": {
            "enum": [
              "default",
              "classic"
            ],
            "type": "string",
            "description": "Calendar widget type. Choose \"default\" for \"neo\" and \"classic\" for \"classic\" layout.",
            "default": "classic",
            "example": "classic"
          },
          "eventTitle": {
            "type": "string",
            "default": "{{contact.name}}"
          },
          "eventColor": {
            "type": "string",
            "default": "#039be5"
          },
          "meetingLocation": {
            "type": "string",
            "description": "🚨 Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.",
            "readOnly": true,
            "deprecated": true
          },
          "locationConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationConfiguration"
            },
            "description": "Meeting location configuration for event calendar"
          },
          "slotDuration": {
            "type": "number",
            "description": "This controls the duration of the meeting",
            "default": 30
          },
          "slotDurationUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for slot duration."
          },
          "slotInterval": {
            "type": "number",
            "description": "Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.",
            "default": 30
          },
          "slotIntervalUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for slot interval."
          },
          "slotBuffer": {
            "type": "number",
            "description": "Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up"
          },
          "slotBufferUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for slot buffer."
          },
          "preBuffer": {
            "type": "number",
            "description": "Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready"
          },
          "preBufferUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for pre-buffer."
          },
          "appoinmentPerSlot": {
            "type": "number",
            "description": "Maximum bookings per slot (per user). Maximum seats per slot in case of Class Booking Calendar.",
            "default": 1
          },
          "appoinmentPerDay": {
            "type": "number",
            "description": "Number of appointments that can be booked for a given day"
          },
          "allowBookingAfter": {
            "type": "number",
            "description": "Minimum scheduling notice for events"
          },
          "allowBookingAfterUnit": {
            "enum": [
              "hours",
              "days",
              "weeks",
              "months"
            ],
            "type": "string",
            "description": "Unit for minimum scheduling notice",
            "example": "days"
          },
          "allowBookingFor": {
            "type": "number",
            "description": "Minimum number of days/weeks/months for which to allow booking events"
          },
          "allowBookingForUnit": {
            "enum": [
              "days",
              "weeks",
              "months"
            ],
            "type": "string",
            "description": "Unit for controlling the duration for which booking would be allowed for",
            "example": "days"
          },
          "openHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenHour"
            },
            "description": "This is only to set the standard availability. For custom availability, use the availabilities property"
          },
          "enableRecurring": {
            "type": "boolean",
            "description": "Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this",
            "default": false
          },
          "recurring": {
            "$ref": "#/components/schemas/Recurring"
          },
          "formId": {
            "type": "string"
          },
          "stickyContact": {
            "type": "boolean"
          },
          "isLivePaymentMode": {
            "type": "boolean"
          },
          "autoConfirm": {
            "type": "boolean",
            "default": true
          },
          "shouldSendAlertEmailsToAssignedMember": {
            "type": "boolean"
          },
          "alertEmail": {
            "type": "string"
          },
          "googleInvitationEmails": {
            "type": "boolean",
            "default": false
          },
          "allowReschedule": {
            "type": "boolean",
            "default": true
          },
          "allowCancellation": {
            "type": "boolean",
            "default": true
          },
          "shouldAssignContactToTeamMember": {
            "type": "boolean"
          },
          "shouldSkipAssigningContactForExisting": {
            "type": "boolean"
          },
          "notes": {
            "type": "string"
          },
          "pixelId": {
            "type": "string"
          },
          "formSubmitType": {
            "enum": [
              "RedirectURL",
              "ThankYouMessage"
            ],
            "type": "string",
            "default": "ThankYouMessage"
          },
          "formSubmitRedirectURL": {
            "type": "string"
          },
          "formSubmitThanksMessage": {
            "type": "string"
          },
          "availabilityType": {
            "enum": [
              0,
              1
            ],
            "type": "number",
            "description": "Determines which availability type to consider:\n- **1**: Only custom availabilities will be used.\n- **0**: Only open hours will be used.\n- **null**: Both custom availabilities and open hours will be considered."
          },
          "availabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Availability"
            },
            "description": "This is only to set the custom availability. For standard availability, use the openHours property"
          },
          "guestType": {
            "enum": [
              "count_only",
              "collect_detail"
            ],
            "type": "string"
          },
          "consentLabel": {
            "type": "string"
          },
          "calendarCoverImage": {
            "type": "string",
            "example": "https://path-to-image.com"
          },
          "lookBusyConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LookBusyConfiguration"
              }
            ],
            "description": "Look Busy Configuration"
          }
        }
      },
      "LocationConfigurationResponse": {
        "required": [
          "kind"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "enum": [
              "custom",
              "zoom_conference",
              "google_conference",
              "inbound_call",
              "outbound_call",
              "physical",
              "booker",
              "ms_teams_conference"
            ],
            "type": "string",
            "description": "Type of meeting location. zoom_conference/google_conference/ms_teams_conference is not supported in event calendar type",
            "example": "custom"
          },
          "location": {
            "type": "string",
            "description": "Address for meeting location. Not applicable on \"zoom_conference\", \"google_conference\" and \"ms_teams_conference\" kind"
          },
          "meetingId": {
            "type": "string",
            "description": "Unique ID used to select a specific meeting location",
            "example": "my_conference_id"
          }
        }
      },
      "TeamMemberResponse": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "ocQHyuzHvysMo5N5VsXc"
          },
          "priority": {
            "enum": [
              0,
              0.5,
              1
            ],
            "type": "number",
            "default": 0.5
          },
          "meetingLocationType": {
            "enum": [
              "custom",
              "zoom",
              "gmeet",
              "phone",
              "address",
              "teams",
              "booker"
            ],
            "type": "string",
            "description": "🚨 Deprecated! Use `locationConfigurations.kind` instead.",
            "default": "custom",
            "readOnly": true,
            "example": "custom",
            "deprecated": true
          },
          "meetingLocation": {
            "type": "string",
            "description": "🚨 Deprecated! Use `locationConfigurations.location` instead.",
            "readOnly": true,
            "deprecated": true
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Marks a user as primary. This property is required in case of collective booking calendars. Only one user can be primary."
          },
          "locationConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationConfigurationResponse"
            },
            "description": "Meeting location configurations"
          }
        }
      },
      "CalendarDTO": {
        "required": [
          "locationId",
          "name",
          "id"
        ],
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "Should the created calendar be active or draft",
            "default": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarNotification"
            },
            "description": "🚨 Deprecated! Please use 'Calendar Notifications APIs' instead.",
            "deprecated": true
          },
          "locationId": {
            "type": "string",
            "example": "ocQHyuzHvysMo5N5VsXc"
          },
          "groupId": {
            "type": "string",
            "description": "Group Id",
            "example": "BqTwX8QFwXzpegMve9EQ"
          },
          "teamMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMemberResponse"
            },
            "description": "Team members are for calendars of type: Round Robin, Collective, Class, Service. Personal calendar must have exactly one team member."
          },
          "eventType": {
            "enum": [
              "RoundRobin_OptimizeForAvailability",
              "RoundRobin_OptimizeForEqualDistribution"
            ],
            "type": "string",
            "default": "RoundRobin_OptimizeForAvailability"
          },
          "name": {
            "type": "string",
            "example": "test calendar"
          },
          "description": {
            "type": "string",
            "example": "this is used for testing"
          },
          "slug": {
            "type": "string",
            "example": "test1"
          },
          "widgetSlug": {
            "type": "string",
            "example": "test1"
          },
          "calendarType": {
            "enum": [
              "round_robin",
              "event",
              "class_booking",
              "collective",
              "service_booking",
              "personal"
            ],
            "type": "string"
          },
          "widgetType": {
            "enum": [
              "default",
              "classic"
            ],
            "type": "string",
            "description": "Calendar widget type. Choose \"default\" for \"neo\" and \"classic\" for \"classic\" layout.",
            "default": "classic",
            "example": "classic"
          },
          "eventTitle": {
            "type": "string",
            "default": "{{contact.name}}"
          },
          "eventColor": {
            "type": "string",
            "default": "#039be5"
          },
          "meetingLocation": {
            "type": "string",
            "description": "🚨 Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.",
            "readOnly": true,
            "deprecated": true
          },
          "locationConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationConfigurationResponse"
            },
            "description": "Meeting location configuration for event calendar"
          },
          "slotDuration": {
            "type": "number",
            "description": "This controls the duration of the meeting",
            "default": 30
          },
          "slotDurationUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for slot duration."
          },
          "slotInterval": {
            "type": "number",
            "description": "Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.",
            "default": 30
          },
          "slotIntervalUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for slot interval."
          },
          "slotBuffer": {
            "type": "number",
            "description": "Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up"
          },
          "slotBufferUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for slot buffer."
          },
          "preBuffer": {
            "type": "number",
            "description": "Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready"
          },
          "preBufferUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for pre-buffer."
          },
          "appoinmentPerSlot": {
            "type": "number",
            "description": "Maximum bookings per slot (per user). Maximum seats per slot in case of Class Booking Calendar.",
            "default": 1
          },
          "appoinmentPerDay": {
            "type": "number",
            "description": "Number of appointments that can be booked for a given day"
          },
          "allowBookingAfter": {
            "type": "number",
            "description": "Minimum scheduling notice for events"
          },
          "allowBookingAfterUnit": {
            "enum": [
              "hours",
              "days",
              "weeks",
              "months"
            ],
            "type": "string",
            "description": "Unit for minimum scheduling notice",
            "example": "days"
          },
          "allowBookingFor": {
            "type": "number",
            "description": "Minimum number of days/weeks/months for which to allow booking events"
          },
          "allowBookingForUnit": {
            "enum": [
              "days",
              "weeks",
              "months"
            ],
            "type": "string",
            "description": "Unit for controlling the duration for which booking would be allowed for",
            "example": "days"
          },
          "openHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenHour"
            },
            "description": "This is only to set the standard availability. For custom availability, use the availabilities property"
          },
          "enableRecurring": {
            "type": "boolean",
            "description": "Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this",
            "default": false
          },
          "recurring": {
            "$ref": "#/components/schemas/Recurring"
          },
          "formId": {
            "type": "string"
          },
          "stickyContact": {
            "type": "boolean"
          },
          "isLivePaymentMode": {
            "type": "boolean"
          },
          "autoConfirm": {
            "type": "boolean",
            "default": true
          },
          "shouldSendAlertEmailsToAssignedMember": {
            "type": "boolean"
          },
          "alertEmail": {
            "type": "string"
          },
          "googleInvitationEmails": {
            "type": "boolean",
            "default": false
          },
          "allowReschedule": {
            "type": "boolean",
            "default": true
          },
          "allowCancellation": {
            "type": "boolean",
            "default": true
          },
          "shouldAssignContactToTeamMember": {
            "type": "boolean"
          },
          "shouldSkipAssigningContactForExisting": {
            "type": "boolean"
          },
          "notes": {
            "type": "string"
          },
          "pixelId": {
            "type": "string"
          },
          "formSubmitType": {
            "enum": [
              "RedirectURL",
              "ThankYouMessage"
            ],
            "type": "string",
            "default": "ThankYouMessage"
          },
          "formSubmitRedirectURL": {
            "type": "string"
          },
          "formSubmitThanksMessage": {
            "type": "string"
          },
          "availabilityType": {
            "enum": [
              0,
              1
            ],
            "type": "number",
            "description": "Determines which availability type to consider:\n- **1**: Only custom availabilities will be used.\n- **0**: Only open hours will be used.\n- **null**: Both custom availabilities and open hours will be considered."
          },
          "availabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Availability"
            },
            "description": "This is only to set the custom availability. For standard availability, use the openHours property"
          },
          "guestType": {
            "enum": [
              "count_only",
              "collect_detail"
            ],
            "type": "string"
          },
          "consentLabel": {
            "type": "string"
          },
          "calendarCoverImage": {
            "type": "string",
            "example": "https://path-to-image.com"
          },
          "lookBusyConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LookBusyConfiguration"
              }
            ],
            "description": "Look Busy Configuration"
          },
          "id": {
            "type": "string",
            "example": "0TkCdp9PfvLeWKYRRvIz"
          }
        }
      },
      "CalendarsGetSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "calendars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarDTO"
            }
          }
        }
      },
      "CalendarByIdSuccessfulResponseDTO": {
        "required": [
          "calendar"
        ],
        "type": "object",
        "properties": {
          "calendar": {
            "$ref": "#/components/schemas/CalendarDTO"
          }
        }
      },
      "UpdateAvailability": {
        "required": [
          "date",
          "hours"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Formulate the date string in the format of `<YYYY-MM-DD in local timezone>T00:00:00.000Z`.",
            "example": "2023-09-24T00:00:00.000Z"
          },
          "hours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hour"
            }
          },
          "deleted": {
            "type": "boolean",
            "default": false
          },
          "id": {
            "type": "string",
            "description": "The ID of the custom availability object. It is required while updating or deleting the existing custom date availability"
          }
        }
      },
      "CalendarUpdateDTO": {
        "type": "object",
        "properties": {
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarNotification"
            },
            "description": "🚨 Deprecated! Please use 'Calendar Notifications APIs' instead.",
            "deprecated": true
          },
          "groupId": {
            "type": "string",
            "description": "Group Id",
            "example": "BqTwX8QFwXzpegMve9EQ"
          },
          "teamMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "description": "Team members are required for calendars of type: Round Robin, Collective, Class, Service. Personal calendar must have exactly one team member."
          },
          "eventType": {
            "enum": [
              "RoundRobin_OptimizeForAvailability",
              "RoundRobin_OptimizeForEqualDistribution"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "test calendar"
          },
          "description": {
            "type": "string",
            "example": "this is used for testing"
          },
          "slug": {
            "type": "string",
            "example": "test1"
          },
          "widgetSlug": {
            "type": "string",
            "example": "test1"
          },
          "widgetType": {
            "enum": [
              "default",
              "classic"
            ],
            "type": "string",
            "description": "Calendar widget type. Choose \"default\" for \"neo\" and \"classic\" for \"classic\" layout.",
            "default": "classic",
            "example": "classic"
          },
          "eventTitle": {
            "type": "string"
          },
          "eventColor": {
            "type": "string",
            "default": "#039be5"
          },
          "locationConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationConfiguration"
            },
            "description": "Meeting location configuration for event calendar"
          },
          "meetingLocation": {
            "type": "string",
            "description": "🚨 Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.",
            "readOnly": true,
            "deprecated": true
          },
          "slotDuration": {
            "type": "number",
            "description": "This controls the duration of the meeting",
            "default": 30
          },
          "slotDurationUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for slot duration."
          },
          "preBufferUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for pre-buffer."
          },
          "slotInterval": {
            "type": "number",
            "description": "Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.",
            "default": 30
          },
          "slotIntervalUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "description": "Unit for slot interval."
          },
          "slotBuffer": {
            "type": "number",
            "description": "Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up"
          },
          "preBuffer": {
            "type": "number",
            "description": "Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready"
          },
          "appoinmentPerSlot": {
            "type": "number"
          },
          "appoinmentPerDay": {
            "type": "number",
            "description": "Number of appointments that can be booked for a given day"
          },
          "allowBookingAfter": {
            "type": "number",
            "description": "Minimum scheduling notice for events"
          },
          "allowBookingAfterUnit": {
            "enum": [
              "hours",
              "days",
              "weeks",
              "months"
            ],
            "type": "string",
            "description": "Unit for minimum scheduling notice",
            "example": "days"
          },
          "allowBookingFor": {
            "type": "number",
            "description": "Minimum number of days/weeks/months for which to allow booking events"
          },
          "allowBookingForUnit": {
            "enum": [
              "days",
              "weeks",
              "months"
            ],
            "type": "string",
            "description": "Unit for controlling the duration for which booking would be allowed for",
            "example": "days"
          },
          "openHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenHour"
            }
          },
          "enableRecurring": {
            "type": "boolean",
            "description": "Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this",
            "default": false
          },
          "recurring": {
            "$ref": "#/components/schemas/Recurring"
          },
          "formId": {
            "type": "string"
          },
          "stickyContact": {
            "type": "boolean"
          },
          "isLivePaymentMode": {
            "type": "boolean"
          },
          "autoConfirm": {
            "type": "boolean"
          },
          "shouldSendAlertEmailsToAssignedMember": {
            "type": "boolean"
          },
          "alertEmail": {
            "type": "string"
          },
          "googleInvitationEmails": {
            "type": "boolean"
          },
          "allowReschedule": {
            "type": "boolean"
          },
          "allowCancellation": {
            "type": "boolean"
          },
          "shouldAssignContactToTeamMember": {
            "type": "boolean"
          },
          "shouldSkipAssigningContactForExisting": {
            "type": "boolean"
          },
          "notes": {
            "type": "string"
          },
          "pixelId": {
            "type": "string"
          },
          "formSubmitType": {
            "enum": [
              "RedirectURL",
              "ThankYouMessage"
            ],
            "type": "string",
            "default": "ThankYouMessage"
          },
          "formSubmitRedirectURL": {
            "type": "string"
          },
          "formSubmitThanksMessage": {
            "type": "string"
          },
          "availabilityType": {
            "enum": [
              0,
              1
            ],
            "type": "number",
            "description": "Determines which availability type to consider:\n- **1**: Only custom availabilities will be used.\n- **0**: Only open hours will be used.\n- **null**: Both the custom availabilities and open hours will be considered."
          },
          "availabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateAvailability"
            },
            "description": "This is only to set the custom availability. For standard availability, use the openHours property"
          },
          "guestType": {
            "enum": [
              "count_only",
              "collect_detail"
            ],
            "type": "string"
          },
          "consentLabel": {
            "type": "string"
          },
          "calendarCoverImage": {
            "type": "string"
          },
          "lookBusyConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LookBusyConfiguration"
              }
            ],
            "description": "Look Busy Configuration"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "CalendarDeleteSuccessfulResponseDTO": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success",
            "example": "true"
          }
        }
      },
      "GetCalendarEventSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/CalendarEventDTO"
          }
        }
      },
      "DeleteAppointmentSchema": {
        "type": "object"
      },
      "DeleteEventSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "NoteCreatedBySchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "TUcmRxWr"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          }
        }
      },
      "GetNoteSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "HGPcayliwcdoUFzvbTok"
          },
          "body": {
            "type": "string",
            "example": "lorem ipsum"
          },
          "userId": {
            "type": "string",
            "example": "TUcmRxWrjqzJS8EjkxNK"
          },
          "dateAdded": {
            "type": "string",
            "example": "2021-07-08T12:02:11.285Z"
          },
          "contactId": {
            "type": "string",
            "example": "TUcmRxWrjqzJS8EjkxNK"
          },
          "createdBy": {
            "$ref": "#/components/schemas/NoteCreatedBySchema"
          }
        }
      },
      "GetNotesListSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNoteSchema"
            }
          },
          "hasMore": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "NotesDTO": {
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "GCs5KuzPqTls7vWclkEV"
          },
          "body": {
            "maxLength": 5000,
            "type": "string",
            "description": "Note body",
            "example": "lorem ipsum"
          }
        }
      },
      "GetCreateUpdateNoteSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "note": {
            "$ref": "#/components/schemas/GetNoteSchema"
          }
        }
      },
      "DeleteNoteSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "CalendarResourceByIdResponseDTO": {
        "required": [
          "locationId",
          "name",
          "resourceType",
          "isActive",
          "calendarIds"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID of the resource"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource",
            "example": "yoga room"
          },
          "resourceType": {
            "enum": [
              "equipments",
              "rooms"
            ],
            "type": "string"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the resource is active"
          },
          "description": {
            "type": "string",
            "description": "Description of the resource"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the resource"
          },
          "outOfService": {
            "type": "number",
            "description": "Indicates if the resource is out of service",
            "example": 0
          },
          "capacity": {
            "type": "number",
            "description": "Capacity of the resource",
            "example": 85
          },
          "calendarIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Calendar IDs",
            "example": [
              "Jsj0xnlDDjw0SuvX1J13",
              "oCM5feFC86FAAbcO7lJK"
            ]
          }
        }
      },
      "UpdateCalendarResourceDTO": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the equipment."
          },
          "outOfService": {
            "type": "number",
            "description": "Quantity of the out of service equipment."
          },
          "capacity": {
            "type": "number",
            "description": "Capacity of the room."
          },
          "calendarIds": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Service calendar IDs to be mapped with the resource.\n\n    One equipment can only be mapped with one service calendar.\n    \nOne room can be mapped with multiple service calendars."
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "CalendarResourceResponseDTO": {
        "required": [
          "locationId",
          "name",
          "resourceType",
          "isActive"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID of the resource"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource",
            "example": "yoga room"
          },
          "resourceType": {
            "enum": [
              "equipments",
              "rooms"
            ],
            "type": "string"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the resource is active"
          },
          "description": {
            "type": "string",
            "description": "Description of the resource"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the resource"
          },
          "outOfService": {
            "type": "number",
            "description": "Indicates if the resource is out of service",
            "example": 0
          },
          "capacity": {
            "type": "number",
            "description": "Capacity of the resource",
            "example": 85
          }
        }
      },
      "ResourceDeleteResponseDTO": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success",
            "example": "true"
          }
        }
      },
      "CreateCalendarResourceDTO": {
        "required": [
          "locationId",
          "name",
          "description",
          "quantity",
          "outOfService",
          "capacity",
          "calendarIds"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the equipment."
          },
          "outOfService": {
            "type": "number",
            "description": "Quantity of the out of service equipment."
          },
          "capacity": {
            "type": "number",
            "description": "Capacity of the room."
          },
          "calendarIds": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Service calendar IDs to be mapped with the resource.\n\n    One equipment can only be mapped with one service calendar.\n    \nOne room can be mapped with multiple service calendars."
          }
        }
      },
      "SchedulesDTO": {
        "type": "object",
        "properties": {
          "timeOffset": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "CalendarNotificationResponseDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Notification ID"
          },
          "receiverType": {
            "enum": [
              "contact",
              "guest",
              "assignedUser",
              "emails"
            ],
            "type": "string",
            "example": "contact"
          },
          "additionalEmailIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "example1@email.com",
              "example2@email.com"
            ]
          },
          "channel": {
            "enum": [
              "email",
              "inApp"
            ],
            "type": "string",
            "example": "email"
          },
          "notificationType": {
            "enum": [
              "booked",
              "confirmation",
              "cancellation",
              "reminder",
              "followup",
              "reschedule"
            ],
            "type": "string",
            "example": "confirmation"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "templateId": {
            "type": "string",
            "example": "0as9d8as0d"
          },
          "body": {
            "type": "string",
            "example": "This is a test notification"
          },
          "subject": {
            "type": "string",
            "example": "Test Notification"
          },
          "afterTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ]
          },
          "beforeTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ]
          },
          "selectedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "user1",
              "user2"
            ]
          },
          "deleted": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "CreateCalendarNotificationDTO": {
        "required": [
          "receiverType",
          "channel",
          "notificationType"
        ],
        "type": "object",
        "properties": {
          "receiverType": {
            "enum": [
              "contact",
              "guest",
              "assignedUser",
              "emails"
            ],
            "type": "string",
            "description": "notification recipient type"
          },
          "channel": {
            "enum": [
              "email",
              "inApp"
            ],
            "type": "string",
            "description": "Notification channel"
          },
          "notificationType": {
            "enum": [
              "booked",
              "confirmation",
              "cancellation",
              "reminder",
              "followup",
              "reschedule"
            ],
            "type": "string",
            "description": "Notification type"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the notification active",
            "default": true
          },
          "templateId": {
            "type": "string",
            "description": "Template ID for email notification. Not necessary for in-App notification"
          },
          "body": {
            "type": "string",
            "description": "Body  for email notification. Not necessary for in-App notification"
          },
          "subject": {
            "type": "string",
            "description": "Subject  for email notification. Not necessary for in-App notification"
          },
          "afterTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "description": "Specifies the time after which the follow-up notification should be sent. This is not required for other notification types.",
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ]
          },
          "beforeTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "description": "Specifies the time before which the reminder notification should be sent. This is not required for other notification types.",
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ]
          },
          "additionalEmailIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Additional email addresses to receive notifications.",
            "example": [
              "example1@email.com",
              "example2@email.com"
            ]
          },
          "selectedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "selected user for in-App notification"
          },
          "fromAddress": {
            "type": "string",
            "description": "from address for email notification"
          },
          "fromName": {
            "type": "string",
            "description": "from name for email notification"
          }
        }
      },
      "UpdateCalendarNotificationsDTO": {
        "type": "object",
        "properties": {
          "receiverType": {
            "enum": [
              "contact",
              "guest",
              "assignedUser",
              "emails"
            ],
            "type": "string",
            "description": "Notification recipient type"
          },
          "additionalEmailIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Additional email addresses to receive notifications.",
            "example": [
              "example1@email.com",
              "example2@email.com"
            ]
          },
          "selectedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "selected user for in-App notification"
          },
          "channel": {
            "enum": [
              "email",
              "inApp"
            ],
            "type": "string",
            "description": "Notification channel"
          },
          "notificationType": {
            "enum": [
              "booked",
              "confirmation",
              "cancellation",
              "reminder",
              "followup",
              "reschedule"
            ],
            "type": "string",
            "description": "Notification type"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the notification active",
            "default": true
          },
          "deleted": {
            "type": "boolean",
            "description": "Marks the notification as deleted (soft delete)",
            "default": false
          },
          "templateId": {
            "type": "string",
            "description": "Template ID for email notification"
          },
          "body": {
            "type": "string",
            "description": "Body  for email notification. Not necessary for in-App notification"
          },
          "subject": {
            "type": "string",
            "description": "Subject  for email notification. Not necessary for in-App notification"
          },
          "afterTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "description": "Specifies the time after which the follow-up notification should be sent. This is not required for other notification types.",
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ]
          },
          "beforeTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "description": "Specifies the time before which the reminder notification should be sent. This is not required for other notification types.",
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ]
          },
          "fromAddress": {
            "type": "string",
            "description": "From address for email notification"
          },
          "fromName": {
            "type": "string",
            "description": "From name for email notification"
          }
        }
      },
      "CalendarNotificationDeleteResponseDTO": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Result of delete/update operation"
          }
        }
      },
      "LinkSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "n4AriwEnFrGh3tu08W0U"
          },
          "name": {
            "type": "string",
            "example": "first tag"
          },
          "redirectTo": {
            "type": "string",
            "example": "https://www.google.com/"
          },
          "fieldKey": {
            "type": "string",
            "example": "{{trigger_link.n4AriwEnFrGh3tu08W0U}}"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "GetLinksSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkSchema"
            }
          }
        }
      },
      "LinksDto": {
        "required": [
          "locationId",
          "name",
          "redirectTo"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "name": {
            "type": "string",
            "example": "first tag"
          },
          "redirectTo": {
            "type": "string",
            "example": "https://www.google.com/"
          }
        }
      },
      "GetLinkSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "link": {
            "$ref": "#/components/schemas/LinkSchema"
          }
        }
      },
      "LinkUpdateDto": {
        "required": [
          "name",
          "redirectTo"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "first tag"
          },
          "redirectTo": {
            "type": "string",
            "example": "https://www.google.com/"
          }
        }
      },
      "DeleteLinksSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "BadRequestDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "Status code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Bad Request"
          }
        }
      },
      "UnauthorizedDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "Status code",
            "example": 401
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Invalid token: access token is invalid"
          },
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Unauthorized"
          }
        }
      },
      "ResourceNotFoundDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "Status code",
            "example": 404
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": [
              "Contact not found",
              "User not found",
              "Group not found",
              "Channel not found"
            ]
          }
        }
      },
      "InternalServerErrorDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "Status code",
            "example": 500
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Internal Server Error"
          }
        }
      },
      "UpdateSubscriptionDto": {
        "required": [
          "subscriptionId",
          "customerId",
          "companyId"
        ],
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID",
            "example": "sub_1QDPY5FpU9DlKp7RQ8BXfywx"
          },
          "customerId": {
            "type": "string",
            "description": "Customer ID",
            "example": "cus_1QDPY5FpU9DlKp7RQ8BXfywx"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "companyId1"
          }
        }
      },
      "BulkDisableSaasDto": {
        "required": [
          "locationIds"
        ],
        "type": "object",
        "properties": {
          "locationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Location IDs",
            "example": [
              "locationId1",
              "locationId2"
            ]
          }
        }
      },
      "BulkDisableSaasResponseDto": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Response data from the bulk disable SaaS operation",
            "example": {
              "msg": "success"
            }
          }
        }
      },
      "EnableSaasDto": {
        "required": [
          "companyId",
          "isSaaSV2"
        ],
        "type": "object",
        "properties": {
          "stripeAccountId": {
            "type": "string",
            "description": "Stripe account id(Required only for SaaS V1)",
            "example": "acct_1QDPY5FpU9DlKp7RQ8BXfywx"
          },
          "name": {
            "type": "string",
            "description": "Name of the stripe customer(Required only for SaaS V1)",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of the stripe customer(Required only for SaaS V1)",
            "example": "john.doe@example.com"
          },
          "stripeCustomerId": {
            "type": "string",
            "description": "Stripe customer id if exists(Required only for SaaS V1)",
            "example": "cus_1QDPY5FpU9DlKp7RQ8BXfywx"
          },
          "companyId": {
            "type": "string"
          },
          "isSaaSV2": {
            "type": "boolean",
            "description": "Denotes if it is a saas v2 or v1 sub-account",
            "example": true
          },
          "contactId": {
            "type": "string",
            "description": "Agency subaccount used for payment provider integration(Required Only for SaaS V2)",
            "example": "1QDPY5FpU9DlKp7RQ8BXfywx"
          },
          "providerLocationId": {
            "type": "string",
            "description": "Agency Subaccount ID",
            "example": "r06mdj4OrrERzYDvsOdh"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "Description"
          },
          "saasPlanId": {
            "type": "string",
            "description": "Required only while pre-configuring saas subscription",
            "example": "1QDPY5FpU9DlKp7RQ8BXfywx"
          },
          "priceId": {
            "type": "string",
            "description": "Required only while pre-configuring saas subscription",
            "example": "price_1QDPY5FpU9DlKp7RQ8BXfywx"
          }
        }
      },
      "EnableSaasResponseDto": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Response data from the enable SaaS operation",
            "example": {
              "customer_id": "cus_1QDPY5FpU9DlKp7RQ8BXfywx",
              "ok": true,
              "paymentMethodAdded": true
            }
          }
        }
      },
      "PauseLocationDto": {
        "required": [
          "paused",
          "companyId"
        ],
        "type": "object",
        "properties": {
          "paused": {
            "type": "boolean",
            "description": "Paused",
            "example": true
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "companyId1"
          }
        }
      },
      "UpdateRebillingDto": {
        "required": [
          "product",
          "locationIds",
          "config"
        ],
        "type": "object",
        "properties": {
          "product": {
            "enum": [
              "contentAI",
              "workflow_premium_actions",
              "workflow_ai",
              "conversationAI",
              "EmailNotification",
              "whatsApp",
              "reviewsAI",
              "VERIFIED_CALLER_ID",
              "WALLET_SALES_TAX",
              "NOTIFICATION_SMS",
              "EmailSmtp",
              "EmailVerification",
              "autoCompleteAddress",
              "funnelAI",
              "domainPurchase",
              "Phone",
              "Email"
            ],
            "type": "string",
            "description": "The product to update rebilling for",
            "example": "contentAI"
          },
          "locationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of location IDs to update rebilling for",
            "example": [
              "zzyG7A4x6bRJl5SlhQhH",
              "Vygq7VgXCDfg3xnl8TBR"
            ]
          },
          "config": {
            "type": "object",
            "properties": {
              "optIn": {
                "type": "boolean",
                "description": "Enable the product for the locations",
                "example": true
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable the rebilling for the locations",
                "example": true
              },
              "markup": {
                "type": "number",
                "description": "Additional value to be added in terms of percentage. For example, if the product price is $100 and the markup is 5, the amount charged to will be $105.",
                "example": 5
              }
            },
            "description": "Configuration for rebilling settings"
          }
        }
      },
      "UpdateRebillingResponseDto": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the rebilling update was successful",
            "example": true
          }
        }
      },
      "AgencyPlanResponseDto": {
        "required": [
          "planId",
          "title",
          "description",
          "saasProducts",
          "planLevel",
          "trialPeriod",
          "prices",
          "isSaaSV2",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Unique identifier for the plan",
            "example": "66c4d36534f21f900dc2a265"
          },
          "title": {
            "type": "string",
            "description": "Title of the plan",
            "example": "AED 1.5 changed"
          },
          "description": {
            "type": "string",
            "description": "Description of the plan",
            "example": "AED 1.5"
          },
          "saasProducts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of SaaS products included in the plan",
            "example": [
              "2-way-text-messaging",
              "gmb-messaging",
              "web-chat",
              "reputation-management"
            ]
          },
          "addOns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of add-ons included in the plan",
            "example": [
              "CONVERSATIONS_AI",
              "CP_BRANDED_APP_49",
              "WORDPRESS_V1"
            ]
          },
          "planLevel": {
            "type": "number",
            "description": "Level of the plan (0-4)",
            "example": 0
          },
          "trialPeriod": {
            "type": "number",
            "description": "Trial period in days",
            "example": 16
          },
          "userLimit": {
            "type": "number",
            "description": "User limit for the plan",
            "example": 50
          },
          "contactLimit": {
            "type": "number",
            "description": "Contact limit for the plan",
            "example": 50
          },
          "prices": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of the price",
                  "example": "66a9edbfcc6c505a22db7976"
                },
                "billingInterval": {
                  "enum": [
                    "month",
                    "year"
                  ],
                  "type": "string",
                  "description": "Billing interval for the plan",
                  "example": "month"
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates if the price is active",
                  "example": true
                },
                "amount": {
                  "type": "number",
                  "description": "Amount of the price",
                  "example": 150
                },
                "currency": {
                  "type": "string",
                  "description": "Currency of the price",
                  "example": "AED"
                },
                "symbol": {
                  "type": "string",
                  "description": "Symbol of the price",
                  "example": "$"
                }
              }
            },
            "description": "Pricing information for the plan"
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID for the plan",
            "example": "66911cdc98508ec2731979b9"
          },
          "snapshotId": {
            "type": "string",
            "description": "Snapshot ID for the plan",
            "example": "G8KmpIeLnZc7ZMoJoxDx"
          },
          "productId": {
            "type": "string",
            "description": "Product ID for the plan",
            "example": "66a9edbfcc6c5090bedb7974"
          },
          "isSaaSV2": {
            "type": "boolean",
            "description": "Indicates if this is a SaaS V2 plan",
            "example": true
          },
          "providerLocationId": {
            "type": "string",
            "description": "Provider location ID",
            "example": "r06mdj4OrrERzYDvsOdh"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-07-31T07:54:41.885Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-04-01T12:27:29.167Z"
          }
        }
      },
      "LocationSubscriptionResponseDto": {
        "required": [
          "locationId",
          "isSaaSV2",
          "companyId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "locationId1"
          },
          "isSaaSV2": {
            "type": "boolean",
            "description": "Indicates if the SaaS is V2",
            "example": true
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "companyId1"
          },
          "saasMode": {
            "type": "string",
            "description": "SaaS mode",
            "example": "saasV2"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID",
            "example": "subscriptionId1"
          },
          "customerId": {
            "type": "string",
            "description": "Customer ID",
            "example": "customerId1"
          },
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "productId1"
          },
          "priceId": {
            "type": "string",
            "description": "Price ID",
            "example": "priceId1"
          },
          "saasPlanId": {
            "type": "string",
            "description": "SaaS plan ID",
            "example": "saasPlanId1"
          },
          "subscriptionStatus": {
            "type": "string",
            "description": "Subscription status",
            "example": "active"
          }
        }
      },
      "BulkEnableSaasActionPayloadDto": {
        "required": [
          "saasPlanId"
        ],
        "type": "object",
        "properties": {
          "priceId": {
            "type": "string",
            "description": "Price ID for the SaaS plan",
            "example": "price_1QDPY5FpU9DlKp7RQ8BXfywx"
          },
          "stripeAccountId": {
            "type": "string",
            "description": "Stripe account ID",
            "example": "acct_1QDPY5FpU9DlKp7RQ8BXfywx"
          },
          "saasPlanId": {
            "type": "string",
            "description": "SaaS plan ID",
            "example": "66c4d36534f21f900dc2a265"
          },
          "providerLocationId": {
            "type": "string",
            "description": "Provider location ID",
            "example": "r06mdj4OrrERzYDvsOdh"
          }
        }
      },
      "BulkEnableSaasRequestDto": {
        "required": [
          "locationIds",
          "isSaaSV2",
          "actionPayload"
        ],
        "type": "object",
        "properties": {
          "locationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of location IDs to enable SaaS for",
            "example": [
              "locationId1",
              "locationId2"
            ]
          },
          "isSaaSV2": {
            "type": "boolean",
            "description": "Indicates if the SaaS is V2",
            "example": true
          },
          "actionPayload": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BulkEnableSaasActionPayloadDto"
              }
            ],
            "description": "Action payload for the bulk enable SaaS operation"
          }
        }
      },
      "BulkEnableSaasResponseDto": {
        "required": [
          "success",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the bulk enable SaaS operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Message indicating the bulk enable SaaS operation",
            "example": "Bulk enable SaaS operation completed successfully"
          },
          "bulkActionUrl": {
            "type": "string",
            "description": "URL for the bulk enable SaaS operation",
            "example": "https://example.com/bulk-enable-saas"
          }
        }
      },
      "SaasLocationDto": {
        "required": [
          "locationId",
          "companyId",
          "saasMode",
          "subscriptionId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "locationId1"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "companyId1"
          },
          "saasMode": {
            "type": "string",
            "description": "SaaS mode",
            "example": "saasV2"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID",
            "example": "subscriptionId1"
          },
          "customerId": {
            "type": "string",
            "description": "Customer ID",
            "example": "customerId1"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "example": "john.doe@example.com"
          },
          "providerLocationId": {
            "type": "string",
            "description": "Provider location ID",
            "example": "r06mdj4OrrERzYDvsOdh"
          },
          "isSaaSV2": {
            "type": "boolean",
            "description": "Indicates if the SaaS is V2",
            "example": true
          },
          "subscriptionInfo": {
            "type": "object",
            "description": "Subscription information",
            "example": {
              "priceId": "price_1QDPY5FpU9DlKp7RQ8BXfywx",
              "saasPlanId": "66c4d36534f21f900dc2a265",
              "stripeProductId": "prod_1QDPY5FpU9DlKp7RQ8BXfywx",
              "subscriptionStatus": "active"
            }
          }
        }
      },
      "GetSaasLocationsResponseDto": {
        "required": [
          "locations",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaasLocationDto"
            },
            "description": "Array of SaaS locations"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number",
                "description": "Page number",
                "example": 1
              },
              "limit": {
                "type": "number",
                "description": "Number of items per page",
                "example": 10
              },
              "total": {
                "type": "number",
                "description": "Total number of items",
                "example": 100
              },
              "totalPages": {
                "type": "number",
                "description": "Total number of pages",
                "example": 10
              },
              "hasNext": {
                "type": "boolean",
                "description": "Indicates if there is a next page",
                "example": true
              },
              "hasPrev": {
                "type": "boolean",
                "description": "Indicates if there is a previous page",
                "example": true
              }
            }
          }
        }
      },
      "SaasPlanResponseDto": {
        "required": [
          "planId",
          "companyId",
          "title",
          "description",
          "saasProducts",
          "planLevel",
          "trialPeriod",
          "prices",
          "isSaaSV2",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Unique identifier for the SaaS plan",
            "example": "66c4d36534f21f900dc2a265"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID associated with the SaaS plan",
            "example": "66c4d36534f21f900dc2a265"
          },
          "title": {
            "type": "string",
            "description": "Title of the SaaS plan",
            "example": "AED 1.5 changed"
          },
          "description": {
            "type": "string",
            "description": "Description of the SaaS plan",
            "example": "AED 1.5"
          },
          "saasProducts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of SaaS products included in the plan",
            "example": [
              "2-way-text-messaging",
              "gmb-messaging",
              "web-chat"
            ]
          },
          "addOns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of add-ons included in the plan",
            "example": [
              "YEXT_V2",
              "WHATSAPP_V1",
              "WORDPRESS_V1",
              "AI_EMPLOYEE",
              "Ad_Publishing_Connect_Your_BM"
            ]
          },
          "planLevel": {
            "type": "number",
            "description": "Level of the plan (0-4)",
            "example": 0
          },
          "trialPeriod": {
            "type": "number",
            "description": "Trial period in days",
            "example": 16
          },
          "setupFee": {
            "type": "number",
            "description": "Setup fee for the plan",
            "example": 100
          },
          "userLimit": {
            "type": "number",
            "description": "User limit for the plan",
            "example": 50
          },
          "contactLimit": {
            "type": "number",
            "description": "Contact limit for the plan",
            "example": 50
          },
          "prices": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "66a9edbfcc6c505a22db7976"
                },
                "billingInterval": {
                  "enum": [
                    "month",
                    "year"
                  ],
                  "type": "string",
                  "example": "month"
                },
                "active": {
                  "type": "boolean",
                  "example": true
                },
                "amount": {
                  "type": "number",
                  "example": 150
                },
                "currency": {
                  "type": "string",
                  "example": "AED"
                },
                "symbol": {
                  "type": "string",
                  "example": "$"
                }
              }
            },
            "description": "Prices for the plan"
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID for the plan",
            "example": "66911cdc98508ec2731979b9"
          },
          "snapshotId": {
            "type": "string",
            "description": "Snapshot ID for the plan",
            "example": "G8KmpIeLnZc7ZMoJoxDx"
          },
          "providerLocationId": {
            "type": "string",
            "description": "Provider location ID",
            "example": "r06mdj4OrrERzYDvsOdh"
          },
          "productId": {
            "type": "string",
            "description": "Product ID for the plan",
            "example": "66a9edbfcc6c5090bedb7974"
          },
          "isSaaSV2": {
            "type": "boolean",
            "description": "Indicates if this is a SaaS V2 plan",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time",
            "example": "2024-07-31T07:54:41.885Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time",
            "example": "2025-04-01T12:27:29.167Z"
          }
        }
      },
      "EmailNotVerifiedResponseDto": {
        "required": [
          "verified"
        ],
        "type": "object",
        "properties": {
          "verified": {
            "type": "boolean",
            "description": "Email verification not processed",
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Email verification failure message",
            "example": "Validation is disabled / proper config not found"
          },
          "address": {
            "type": "string",
            "description": "Email address",
            "example": "abc@xyz.com"
          }
        }
      },
      "LeadConnectorRecomandationDto": {
        "type": "object",
        "properties": {
          "isEmailValid": {
            "type": "boolean",
            "description": "Email verification status",
            "example": false
          }
        }
      },
      "EmailVerifiedResponseDto": {
        "required": [
          "result",
          "risk",
          "address",
          "leadconnectorRecomendation"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Reason for email verification failure",
            "example": [
              "mailbox_does_not_exist"
            ]
          },
          "result": {
            "enum": [
              "deliverable",
              "undeliverable",
              "do_not_send",
              "unknown",
              "catch_all"
            ],
            "type": "string",
            "description": "Email verification result",
            "example": "undeliverable"
          },
          "risk": {
            "enum": [
              "high",
              "low",
              "medium",
              "unknown"
            ],
            "type": "string",
            "description": "Risk level of email sending to bounce",
            "example": "low"
          },
          "address": {
            "type": "string",
            "description": "Email address",
            "example": "abc@xyz.com"
          },
          "leadconnectorRecomendation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeadConnectorRecomandationDto"
              }
            ],
            "description": "Lead Connector email verification recomendation",
            "example": {
              "isEmailValid": false
            }
          }
        }
      },
      "VerificationBodyDto": {
        "required": [
          "type",
          "verify"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "email",
              "contact"
            ],
            "type": "string",
            "description": "Email Verification type",
            "example": "email"
          },
          "verify": {
            "type": "string",
            "description": "Email Verification recepient (email address / contactId)",
            "example": "abc@xyz.com"
          }
        }
      },
      "SearchBodyV2DTO": {
        "type": "object"
      },
      "CustomFieldSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "MgobCB14YMVKuE4Ka8p1"
          },
          "value": {
            "type": "string",
            "example": "name"
          }
        }
      },
      "DndSettingSchema": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "active",
              "inactive",
              "permanent"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "DndSettingsSchema": {
        "type": "object",
        "properties": {
          "Call": {
            "$ref": "#/components/schemas/DndSettingSchema"
          },
          "Email": {
            "$ref": "#/components/schemas/DndSettingSchema"
          },
          "SMS": {
            "$ref": "#/components/schemas/DndSettingSchema"
          },
          "WhatsApp": {
            "$ref": "#/components/schemas/DndSettingSchema"
          },
          "GMB": {
            "$ref": "#/components/schemas/DndSettingSchema"
          },
          "FB": {
            "$ref": "#/components/schemas/DndSettingSchema"
          }
        }
      },
      "ContactOpportunity": {
        "required": [
          "id",
          "pipeline_id",
          "pipeline_stage_id",
          "monetary_value",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1a2b3c4d5e6f7g8h9i0j"
          },
          "pipeline_id": {
            "type": "string",
            "example": "pipeline123"
          },
          "pipeline_stage_id": {
            "type": "string",
            "example": "stage456"
          },
          "monetary_value": {
            "type": "number",
            "example": 10000
          },
          "status": {
            "type": "string",
            "example": "open"
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "102goXVW3lIExEQPOnd3"
          },
          "phoneLabel": {
            "type": "string",
            "example": "Mobile"
          },
          "country": {
            "type": "string",
            "example": "United States"
          },
          "address": {
            "type": "string",
            "example": "123 Main Street"
          },
          "source": {
            "type": "string",
            "example": "Website"
          },
          "type": {
            "type": "string",
            "example": "lead"
          },
          "locationId": {
            "type": "string",
            "example": "502goXVW3lIExEQPOnd3"
          },
          "dnd": {
            "type": "boolean",
            "example": false
          },
          "state": {
            "type": "string",
            "example": "California"
          },
          "businessName": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldSchema"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "tag-1",
              "tag-2"
            ]
          },
          "dateAdded": {
            "type": "string",
            "example": "2024-06-06T18:54:57.221Z"
          },
          "additionalEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "john@example.com",
              "jane@example.com"
            ]
          },
          "phone": {
            "type": "string",
            "example": "+123456789"
          },
          "companyName": {
            "type": "string",
            "example": "XYZ Corp"
          },
          "additionalPhones": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "123456789",
              "987654321"
            ]
          },
          "dateUpdated": {
            "type": "string",
            "example": "2024-06-06T18:54:57.221Z"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1990-01-01"
          },
          "firstName": {
            "type": "string",
            "example": "john"
          },
          "lastName": {
            "type": "string",
            "example": "doe"
          },
          "firstNameLowerCase": {
            "type": "string",
            "example": "john"
          },
          "lastNameLowerCase": {
            "type": "string",
            "example": "doe"
          },
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "assignedTo": {
            "type": "string",
            "example": "182goXVW3lIExEQPOnd3"
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "682goXVW3lIExEQPOnd3",
              "582goXVW3lIExEQPOnd3"
            ]
          },
          "validEmail": {
            "type": "boolean",
            "example": true
          },
          "dndSettings": {
            "$ref": "#/components/schemas/DndSettingsSchema"
          },
          "opportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactOpportunity"
            }
          },
          "postalCode": {
            "type": "string",
            "example": "12345"
          },
          "businessId": {
            "type": "string",
            "example": "282goXVW3lIExEQPOnd3"
          },
          "searchAfter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              1234,
              "102goXVW3lIExEQPOnd3"
            ]
          }
        }
      },
      "SearchContactSuccessResponseDto": {
        "required": [
          "contacts",
          "total"
        ],
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "total": {
            "type": "number",
            "example": 120
          }
        }
      },
      "TaskSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "lJpzYrWdpkC2hX6t2yue"
          },
          "title": {
            "type": "string",
            "example": "test"
          },
          "body": {
            "type": "string",
            "example": "testing"
          },
          "assignedTo": {
            "type": "string",
            "example": "tesTUcmRxWrjqzJS8EjkxNKting"
          },
          "dueDate": {
            "type": "string",
            "example": "2021-07-08T02:30:00.000Z"
          },
          "completed": {
            "type": "boolean",
            "example": true
          },
          "contactId": {
            "type": "string",
            "example": "lJpzYrWdpkC2hX6t2yue"
          }
        }
      },
      "TasksListSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSchema"
            }
          }
        }
      },
      "TaskByIsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "task": {
            "$ref": "#/components/schemas/TaskSchema"
          }
        }
      },
      "CreateTaskParams": {
        "required": [
          "title",
          "dueDate",
          "completed"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "First Task"
          },
          "body": {
            "type": "string",
            "example": "loram ipsum"
          },
          "dueDate": {
            "type": "string",
            "example": "2020-10-25T11:00:00Z"
          },
          "completed": {
            "type": "boolean",
            "example": true
          },
          "assignedTo": {
            "type": "string",
            "example": "hxHGVRb1YJUscrCB8eXK"
          }
        }
      },
      "UpdateTaskBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "First Task"
          },
          "body": {
            "type": "string",
            "example": "loram ipsum"
          },
          "dueDate": {
            "type": "string",
            "example": "2020-10-25T11:00:00Z"
          },
          "completed": {
            "type": "boolean",
            "example": true
          },
          "assignedTo": {
            "type": "string",
            "example": "hxHGVRb1YJUscrCB8eXK"
          }
        }
      },
      "UpdateTaskStatusParams": {
        "required": [
          "completed"
        ],
        "type": "object",
        "properties": {
          "completed": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "DeleteTaskSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "GetEventSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "YS3jaqqeehkR2Is80miy"
          },
          "calendarId": {
            "type": "string",
            "example": "YlWd2wuCAZQzh2cH1fVZ"
          },
          "status": {
            "type": "string",
            "example": "booked"
          },
          "title": {
            "type": "string",
            "example": "Test"
          },
          "assignedUserId": {
            "type": "string",
            "example": "YlWd2wuCAZQzh2cH1fVZ"
          },
          "notes": {
            "type": "string",
            "example": "test"
          },
          "startTime": {
            "type": "string",
            "example": "2021-07-16 11:00:00"
          },
          "endTime": {
            "type": "string",
            "example": "2021-07-16 11:30:00"
          },
          "address": {
            "type": "string",
            "example": "Address"
          },
          "locationId": {
            "type": "string",
            "example": "YlWd2wuCAZQzh2cH1fVZ"
          },
          "contactId": {
            "type": "string",
            "example": "YlWd2wuCAZQzh2cH1fVZ"
          },
          "groupId": {
            "type": "string",
            "example": "YlWd2wuCAZQzh2cH1fVZ"
          },
          "appointmentStatus": {
            "type": "string",
            "example": "booked"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "YlWd2wuCAZQzh2cH1fVZ",
              "YlWd2wuCAZQzh2cH1fVZ"
            ]
          },
          "dateAdded": {
            "type": "string",
            "example": "2021-07-16 11:00:00"
          },
          "dateUpdated": {
            "type": "string",
            "example": "2021-07-16 11:30:00"
          },
          "assignedResources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "YlWd2wuCAZQzh2cH1fVZ",
              "YlWd2wuCAZQzh2cH1fVZ"
            ]
          }
        }
      },
      "GetEventsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventSchema"
            }
          }
        }
      },
      "TagsDTO": {
        "required": [
          "tags"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "minim",
              "velit magna"
            ]
          }
        }
      },
      "CreateAddTagSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "minim",
              "velit magna"
            ]
          }
        }
      },
      "CreateDeleteTagSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "minim",
              "velit magna"
            ]
          }
        }
      },
      "contacts_GetNoteSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "HGPcayliwcdoUFzvbTok"
          },
          "body": {
            "type": "string",
            "example": "lorem ipsum"
          },
          "userId": {
            "type": "string",
            "example": "TUcmRxWrjqzJS8EjkxNK"
          },
          "dateAdded": {
            "type": "string",
            "example": "2021-07-08T12:02:11.285Z"
          },
          "contactId": {
            "type": "string",
            "example": "TUcmRxWrjqzJS8EjkxNK"
          }
        }
      },
      "contacts_GetNotesListSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNoteSchema"
            }
          }
        }
      },
      "contacts_NotesDTO": {
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "GCs5KuzPqTls7vWclkEV"
          },
          "body": {
            "type": "string",
            "example": "lorem ipsum"
          }
        }
      },
      "contacts_GetCreateUpdateNoteSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "note": {
            "$ref": "#/components/schemas/GetNoteSchema"
          }
        }
      },
      "contacts_DeleteNoteSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "UpdateTagsDTO": {
        "required": [
          "contacts",
          "tags",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "list of contact ids to be processed",
            "example": [
              "qFSqySFkVvNzOSqgGqFi",
              "abcdef",
              "qFSqySFkVvNzOSqgGqFi",
              "3ualbhnV7j3n3a9r2moD"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "list of tags to be added or removed",
            "example": [
              "tag-1",
              "tag-2"
            ]
          },
          "locationId": {
            "type": "string",
            "description": "location id from where the bulk request is executed",
            "example": "asdrwHvLUxlfw5SqKVCN"
          },
          "removeAllTags": {
            "type": "boolean",
            "description": "Option to implement remove all tags. if true, all tags will be removed from the contacts. Can only be used with remove type.",
            "example": "false"
          }
        }
      },
      "UpdateTagsResponseDTO": {
        "required": [
          "succeded",
          "errorCount",
          "responses"
        ],
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "description": "Indicates if the operation was successful",
            "example": true
          },
          "errorCount": {
            "type": "number",
            "description": "Number of errors encountered during the operation",
            "example": 0
          },
          "responses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Responses for each contact processed",
            "example": [
              {
                "contactId": "qFSqySFkVvNzOSqgGqFi",
                "message": "Tags updated",
                "type": "success",
                "oldTags": [
                  "tag-1",
                  "tag-2"
                ],
                "tagsAdded": [ ],
                "tagsRemoved": [ ]
              },
              {
                "contactId": "abcdef",
                "message": "contact id is not a valid firebase id",
                "type": "error"
              },
              {
                "contactId": "qFSqySFkVvNzOSqgGqFi",
                "message": "contact is deleted",
                "type": "error"
              },
              {
                "contactId": "3ualbhnV7j3n3a9r2moD",
                "message": "contact does not belong to location",
                "type": "error"
              }
            ]
          }
        }
      },
      "ContactsBusinessUpdate": {
        "required": [
          "locationId",
          "ids",
          "businessId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "PX8m5VwxEbcpFlzYEPVG"
          },
          "ids": {
            "type": "array",
            "items": {
              "maxLength": 50,
              "type": "string"
            },
            "example": [
              "IDqvFHGColiyK6jiatuz",
              "pOC0uJ97VYOKH2m3fkMD"
            ]
          },
          "businessId": {
            "type": "string",
            "nullable": true,
            "example": "63b7ec34ea409a9a8bd2a4ff"
          }
        }
      },
      "ContactsBulkUpateResponse": {
        "required": [
          "success",
          "ids"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "pOC0uJ97VYOKH2m3fkMD"
            ]
          }
        }
      },
      "AttributionSource": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "Trigger Link"
          },
          "campaign": {
            "type": "string",
            "nullable": true
          },
          "utmSource": {
            "type": "string",
            "nullable": true
          },
          "utmMedium": {
            "type": "string",
            "nullable": true
          },
          "utmContent": {
            "type": "string",
            "nullable": true
          },
          "referrer": {
            "type": "string",
            "nullable": true,
            "example": "https: //www.google.com"
          },
          "campaignId": {
            "type": "string",
            "nullable": true
          },
          "fbclid": {
            "type": "string",
            "nullable": true
          },
          "gclid": {
            "type": "string",
            "nullable": true,
            "example": "CjOKCQjwnNyUBhCZARISAI9AYIFtNnIcWcYGIOQINz_ZoFI5SSLRRugSoPZoiEu27IZBY£1-MAIWmEaAo2VEALW_WCB"
          },
          "msclikid": {
            "type": "string",
            "nullable": true
          },
          "dclid": {
            "type": "string",
            "nullable": true
          },
          "fbc": {
            "type": "string",
            "nullable": true
          },
          "fbp": {
            "type": "string",
            "nullable": true,
            "example": "fb. 1.1674748390986.1171287961"
          },
          "fbEventId": {
            "type": "string",
            "nullable": true,
            "example": "Mozilla/5.0"
          },
          "userAgent": {
            "type": "string",
            "nullable": true,
            "example": "Mozilla/5.0"
          },
          "ip": {
            "type": "string",
            "nullable": true,
            "example": "58.111.106.198"
          },
          "medium": {
            "type": "string",
            "nullable": true,
            "example": "survey"
          },
          "mediumId": {
            "type": "string",
            "nullable": true,
            "example": "FglfHAn30PRwsZVyQlKp"
          }
        }
      },
      "GetContectByIdSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "seD4PfOuKoVMLkEZqohJ"
          },
          "name": {
            "type": "string",
            "example": "rubika deo"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "firstName": {
            "type": "string",
            "example": "rubika"
          },
          "lastName": {
            "type": "string",
            "example": "Deo"
          },
          "email": {
            "type": "string",
            "example": "rubika@deos.com"
          },
          "emailLowerCase": {
            "type": "string",
            "example": "rubika@deos.com"
          },
          "timezone": {
            "type": "string",
            "example": ""
          },
          "companyName": {
            "type": "string",
            "example": "DGS VolMAX"
          },
          "phone": {
            "type": "string",
            "example": "+18832327657"
          },
          "dnd": {
            "type": "boolean",
            "example": true
          },
          "dndSettings": {
            "$ref": "#/components/schemas/DndSettingsSchema"
          },
          "type": {
            "type": "string",
            "example": "read"
          },
          "source": {
            "type": "string",
            "example": "public api"
          },
          "assignedTo": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "address1": {
            "type": "string",
            "example": "3535 1st St N"
          },
          "city": {
            "type": "string",
            "example": "ruDolomitebika"
          },
          "state": {
            "type": "string",
            "example": "AL"
          },
          "country": {
            "type": "string",
            "example": "US"
          },
          "postalCode": {
            "type": "string",
            "example": "35061"
          },
          "website": {
            "type": "string",
            "example": "https://www.tesla.com"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "nisi sint commodo amet",
              "consequat"
            ]
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1990-09-25T00:00:00.000Z"
          },
          "dateAdded": {
            "type": "string",
            "example": "2021-07-02T05:18:26.704Z"
          },
          "dateUpdated": {
            "type": "string",
            "example": "2021-07-02T05:18:26.704Z"
          },
          "attachments": {
            "type": "string"
          },
          "ssn": {
            "type": "string"
          },
          "keyword": {
            "type": "string",
            "example": "test"
          },
          "firstNameLowerCase": {
            "type": "string",
            "example": "rubika"
          },
          "fullNameLowerCase": {
            "type": "string",
            "example": "rubika deo"
          },
          "lastNameLowerCase": {
            "type": "string",
            "example": "deo"
          },
          "lastActivity": {
            "type": "string",
            "example": "2021-07-16T11:39:30.564Z"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldSchema"
            }
          },
          "businessId": {
            "type": "string",
            "example": "641c094001436dbc2081e642"
          },
          "attributionSource": {
            "$ref": "#/components/schemas/AttributionSource"
          },
          "lastAttributionSource": {
            "$ref": "#/components/schemas/AttributionSource"
          },
          "visitorId": {
            "type": "string",
            "description": "visitorId is the Unique ID assigned to each Live chat visitor.",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "ContactsByIdSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/GetContectByIdSchema"
          }
        }
      },
      "customFieldsInputArraySchema": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "test",
              "test2"
            ]
          }
        }
      },
      "customFieldsInputObjectSchema": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "object"
          }
        }
      },
      "customFieldsInputStringSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pass either `id` or `key` of custom field",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "description": "Pass either `id` or `key` of custom field",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "string",
            "example": "9039160788"
          }
        }
      },
      "TextField": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "string",
            "example": "My Text"
          }
        }
      },
      "LargeTextField": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "string",
            "example": "My Text"
          }
        }
      },
      "SingleSelectField": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "string",
            "example": "My Selected Option"
          }
        }
      },
      "RadioField": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "string",
            "example": "My Selected Option"
          }
        }
      },
      "NumericField": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "object",
            "example": 100
          }
        }
      },
      "MonetoryField": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "object",
            "example": 100.5
          }
        }
      },
      "CheckboxField": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "test",
              "test2"
            ]
          }
        }
      },
      "MultiSelectField": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "test",
              "test2"
            ]
          }
        }
      },
      "FileField": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "object",
            "example": {
              "f31175d4-2b06-4fc6-b7bc-74cd814c68cb": {
                "meta": {
                  "fieldname": "1HeGizb13P0odwgOgKSs",
                  "originalname": "IMG_20231215_164412935.jpg",
                  "encoding": "7bit",
                  "mimetype": "image/jpeg",
                  "size": 1786611,
                  "uuid": "f31175d4-2b06-4fc6-b7bc-74cd814c68cb"
                },
                "url": "https://services.leadconnectorhq.com/documents/download/w2M9qTZ0ZJz8rGt02jdJ",
                "documentId": "w2M9qTZ0ZJz8rGt02jdJ"
              }
            }
          }
        }
      },
      "InboundDndSettingSchema": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "active",
              "inactive"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "InboundDndSettingsSchema": {
        "type": "object",
        "properties": {
          "all": {
            "$ref": "#/components/schemas/InboundDndSettingSchema"
          }
        }
      },
      "CreateContactDto": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true,
            "example": "Rosan"
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "example": "Deo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Rosan Deo"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "rosan@deos.com"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "gender": {
            "type": "string",
            "example": "male"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "example": "+1 888-888-8888"
          },
          "address1": {
            "type": "string",
            "nullable": true,
            "example": "3535 1st St N"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "Dolomite"
          },
          "state": {
            "type": "string",
            "nullable": true,
            "example": "AL"
          },
          "postalCode": {
            "type": "string",
            "example": "35061"
          },
          "website": {
            "type": "string",
            "nullable": true,
            "example": "https://www.tesla.com"
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "example": "America/Chihuahua"
          },
          "dnd": {
            "type": "boolean",
            "example": true
          },
          "dndSettings": {
            "$ref": "#/components/schemas/DndSettingsSchema"
          },
          "inboundDndSettings": {
            "$ref": "#/components/schemas/InboundDndSettingsSchema"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "nisi sint commodo amet",
              "consequat"
            ]
          },
          "customFields": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TextField"
                },
                {
                  "$ref": "#/components/schemas/LargeTextField"
                },
                {
                  "$ref": "#/components/schemas/SingleSelectField"
                },
                {
                  "$ref": "#/components/schemas/RadioField"
                },
                {
                  "$ref": "#/components/schemas/NumericField"
                },
                {
                  "$ref": "#/components/schemas/MonetoryField"
                },
                {
                  "$ref": "#/components/schemas/CheckboxField"
                },
                {
                  "$ref": "#/components/schemas/MultiSelectField"
                },
                {
                  "$ref": "#/components/schemas/FileField"
                }
              ]
            }
          },
          "source": {
            "type": "string",
            "example": "public api"
          },
          "country": {
            "type": "string",
            "example": "US"
          },
          "companyName": {
            "type": "string",
            "nullable": true,
            "example": "DGS VolMAX"
          },
          "assignedTo": {
            "type": "string",
            "description": "User's Id",
            "example": "y0BeYjuRIlDwsDcOHOJo"
          }
        }
      },
      "CreateContactSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "seD4PfOuKoVMLkEZqohJ"
          },
          "dateAdded": {
            "type": "string",
            "example": "2021-08-31T09:59:41.937Z"
          },
          "dateUpdated": {
            "type": "string",
            "example": "2021-08-31T09:59:41.937Z"
          },
          "deleted": {
            "type": "boolean",
            "example": false
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "nisi sint commodo amet",
              "consequat"
            ]
          },
          "type": {
            "type": "string",
            "example": "read"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldSchema"
            }
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "firstName": {
            "type": "string",
            "example": "rubika"
          },
          "firstNameLowerCase": {
            "type": "string",
            "example": "rubika"
          },
          "fullNameLowerCase": {
            "type": "string",
            "example": "rubika deo"
          },
          "lastName": {
            "type": "string",
            "example": "Deo"
          },
          "lastNameLowerCase": {
            "type": "string",
            "example": "deo"
          },
          "email": {
            "type": "string",
            "example": "rubika@deos.com"
          },
          "emailLowerCase": {
            "type": "string",
            "example": "rubika@deos.com"
          },
          "bounceEmail": {
            "type": "boolean",
            "example": false
          },
          "unsubscribeEmail": {
            "type": "boolean",
            "example": false
          },
          "dnd": {
            "type": "boolean",
            "example": true
          },
          "dndSettings": {
            "$ref": "#/components/schemas/DndSettingsSchema"
          },
          "phone": {
            "type": "string",
            "example": "+18832327657"
          },
          "address1": {
            "type": "string",
            "example": "3535 1st St N"
          },
          "city": {
            "type": "string",
            "example": "ruDolomitebika"
          },
          "state": {
            "type": "string",
            "example": "AL"
          },
          "country": {
            "type": "string",
            "example": "US"
          },
          "postalCode": {
            "type": "string",
            "example": "35061"
          },
          "website": {
            "type": "string",
            "example": "https://www.tesla.com"
          },
          "source": {
            "type": "string",
            "example": "public api"
          },
          "companyName": {
            "type": "string",
            "example": "DGS VolMAX"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1990-09-25T00:00:00.000Z"
          },
          "birthMonth": {
            "type": "number",
            "example": 8
          },
          "birthDay": {
            "type": "number",
            "example": 25
          },
          "lastSessionActivityAt": {
            "type": "string",
            "example": "2021-07-16T11:39:30.564Z"
          },
          "offers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "businessId": {
            "type": "string",
            "example": "641c094001436dbc2081e642"
          },
          "assignedTo": {
            "type": "string",
            "description": "User's Id",
            "example": "y0BeYjuRIlDwsDcOHOJo"
          }
        }
      },
      "CreateContactsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/CreateContactSchema"
          }
        }
      },
      "UpdateContactDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true,
            "example": "rosan"
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "example": "Deo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "rosan Deo"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "rosan@deos.com"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "example": "+1 888-888-8888"
          },
          "address1": {
            "type": "string",
            "nullable": true,
            "example": "3535 1st St N"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "Dolomite"
          },
          "state": {
            "type": "string",
            "nullable": true,
            "example": "AL"
          },
          "postalCode": {
            "type": "string",
            "example": "35061"
          },
          "website": {
            "type": "string",
            "nullable": true,
            "example": "https://www.tesla.com"
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "example": "America/Chihuahua"
          },
          "dnd": {
            "type": "boolean",
            "example": true
          },
          "dndSettings": {
            "$ref": "#/components/schemas/DndSettingsSchema"
          },
          "inboundDndSettings": {
            "$ref": "#/components/schemas/InboundDndSettingsSchema"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "This field will overwrite all current tags associated with the contact. To update a tags, it is recommended to use the Add Tag or Remove Tag API instead.",
            "example": [
              "nisi sint commodo amet",
              "consequat"
            ]
          },
          "customFields": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TextField"
                },
                {
                  "$ref": "#/components/schemas/LargeTextField"
                },
                {
                  "$ref": "#/components/schemas/SingleSelectField"
                },
                {
                  "$ref": "#/components/schemas/RadioField"
                },
                {
                  "$ref": "#/components/schemas/NumericField"
                },
                {
                  "$ref": "#/components/schemas/MonetoryField"
                },
                {
                  "$ref": "#/components/schemas/CheckboxField"
                },
                {
                  "$ref": "#/components/schemas/MultiSelectField"
                },
                {
                  "$ref": "#/components/schemas/FileField"
                }
              ]
            }
          },
          "source": {
            "type": "string",
            "nullable": true,
            "example": "public api"
          },
          "country": {
            "type": "string",
            "example": "US"
          },
          "assignedTo": {
            "type": "string",
            "description": "User's Id",
            "nullable": true,
            "example": "y0BeYjuRIlDwsDcOHOJo"
          }
        }
      },
      "UpdateContactsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          },
          "contact": {
            "$ref": "#/components/schemas/GetContectByIdSchema"
          }
        }
      },
      "UpsertContactDto": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true,
            "example": "Rosan"
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "example": "Deo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Rosan Deo"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "rosan@deos.com"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "gender": {
            "type": "string",
            "example": "male"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "example": "+1 888-888-8888"
          },
          "address1": {
            "type": "string",
            "nullable": true,
            "example": "3535 1st St N"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "Dolomite"
          },
          "state": {
            "type": "string",
            "nullable": true,
            "example": "AL"
          },
          "postalCode": {
            "type": "string",
            "example": "35061"
          },
          "website": {
            "type": "string",
            "nullable": true,
            "example": "https://www.tesla.com"
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "example": "America/Chihuahua"
          },
          "dnd": {
            "type": "boolean",
            "example": true
          },
          "dndSettings": {
            "$ref": "#/components/schemas/DndSettingsSchema"
          },
          "inboundDndSettings": {
            "$ref": "#/components/schemas/InboundDndSettingsSchema"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "This field will overwrite all current tags associated with the contact. To update a tags, it is recommended to use the Add Tag or Remove Tag API instead.",
            "example": [
              "nisi sint commodo amet",
              "consequat"
            ]
          },
          "customFields": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TextField"
                },
                {
                  "$ref": "#/components/schemas/LargeTextField"
                },
                {
                  "$ref": "#/components/schemas/SingleSelectField"
                },
                {
                  "$ref": "#/components/schemas/RadioField"
                },
                {
                  "$ref": "#/components/schemas/NumericField"
                },
                {
                  "$ref": "#/components/schemas/MonetoryField"
                },
                {
                  "$ref": "#/components/schemas/CheckboxField"
                },
                {
                  "$ref": "#/components/schemas/MultiSelectField"
                },
                {
                  "$ref": "#/components/schemas/FileField"
                }
              ]
            }
          },
          "source": {
            "type": "string",
            "example": "public api"
          },
          "country": {
            "type": "string",
            "example": "US"
          },
          "companyName": {
            "type": "string",
            "nullable": true,
            "example": "DGS VolMAX"
          },
          "assignedTo": {
            "type": "string",
            "description": "User's Id",
            "example": "y0BeYjuRIlDwsDcOHOJo"
          }
        }
      },
      "UpsertContactsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "new": {
            "type": "boolean",
            "example": true
          },
          "contact": {
            "$ref": "#/components/schemas/GetContectByIdSchema"
          },
          "traceId": {
            "type": "string"
          }
        }
      },
      "DeleteContactsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "ContactsSearchSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ocQHyuzHvysMo5N5VsXc"
          },
          "locationId": {
            "type": "string",
            "example": "C2QujeCh8ZnC7al2InWR"
          },
          "email": {
            "type": "string",
            "example": "JohnDeo@gmail.com"
          },
          "timezone": {
            "type": "string",
            "example": "Asia/Calcutta"
          },
          "country": {
            "type": "string",
            "example": "DE"
          },
          "source": {
            "type": "string",
            "example": "xyz form"
          },
          "dateAdded": {
            "type": "string",
            "example": "2020-10-29T09:31:30.255Z"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldSchema"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "nisi sint commodo amet",
              "consequat"
            ]
          },
          "businessId": {
            "type": "string",
            "example": "641c094001436dbc2081e642"
          },
          "attributions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributionSource"
            }
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "641c094001436dbc2081e642"
          }
        }
      },
      "ContactsMetaSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 50
          },
          "nextPageUrl": {
            "type": "string",
            "example": "http://localhost:5058/contacts/?locationId=ve9EPM428h8vShlRW1KT&startAfter=1631087949919&startAfterId=yd0jdjOavGk2o6Nh5Ndb"
          },
          "startAfterId": {
            "type": "string",
            "example": "yd0jdjOavGk2o6Nh5Ndb"
          },
          "startAfter": {
            "type": "number",
            "example": 1631087949919
          },
          "currentPage": {
            "type": "number",
            "example": 2
          },
          "nextPage": {
            "type": "number",
            "example": 3
          },
          "prevPage": {
            "type": "number",
            "nullable": true,
            "example": 1
          }
        }
      },
      "ContactsSearchSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactsSearchSchema"
            }
          },
          "count": {
            "type": "number",
            "example": 10
          }
        }
      },
      "FollowersDTO": {
        "required": [
          "followers"
        ],
        "type": "object",
        "properties": {
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sx6wyHhbFdRXh302Lunr",
              "sx6wyHhbFdRXh302Lunr"
            ]
          }
        }
      },
      "CreateAddFollowersSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sx6wyHhbFdRXh302Lunr",
              "sx6wyHhbFdRXh302LLss"
            ]
          },
          "followersAdded": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Mx6wyHhbFdRXh302Luer",
              "Ka6wyHhbFdRXh302LLsAm"
            ]
          }
        }
      },
      "DeleteFollowersSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sx6wyHhbFdRXh302Lunr",
              "sx6wyHhbFdRXh302LLss"
            ]
          },
          "followersRemoved": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Mx6wyHhbFdRXh302Luer",
              "Ka6wyHhbFdRXh302LLsAm"
            ]
          }
        }
      },
      "AddContactToCampaignDto": {
        "type": "object"
      },
      "CreateDeleteCantactsCampaignsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "CreateWorkflowDto": {
        "type": "object",
        "properties": {
          "eventStartTime": {
            "type": "string",
            "example": "2021-06-23T03:30:00+01:00"
          }
        }
      },
      "ContactsWorkflowSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "CreateWhiteLabelIntegrationProviderDto": {
        "required": [
          "altId",
          "altType",
          "uniqueName",
          "title",
          "provider",
          "description",
          "imageUrl"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "uniqueName": {
            "type": "string",
            "description": "A unique name given to the integration provider, uniqueName must start and end with a character. Only lowercase characters and hyphens (-) are supported",
            "example": "easy-direct"
          },
          "title": {
            "type": "string",
            "description": "The title or name of the integration provider.",
            "example": "Title"
          },
          "provider": {
            "enum": [
              "authorize-net",
              "nmi"
            ],
            "type": "string",
            "description": "The type of payment provider associated with the integration provider.",
            "example": {
              "AUTHORIZE_NET": "authorize-net",
              "NMI": "nmi"
            }
          },
          "description": {
            "type": "string",
            "description": "A brief description providing additional information about the integration provider.",
            "example": "Description"
          },
          "imageUrl": {
            "type": "string",
            "description": "The URL to an image representing the integration provider. The imageUrl should start with \"https://\" and ensure that this URL is publicly accessible.",
            "example": "https://example.com/image.jpg"
          }
        }
      },
      "CreateWhitelabelIntegrationResponseDto": {
        "required": [
          "_id",
          "altId",
          "altType",
          "title",
          "route",
          "provider",
          "description",
          "imageUrl",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier of the integration provider.",
            "example": "65cb47dda50f4f13ced4b870"
          },
          "altId": {
            "type": "string",
            "description": "The altId / locationId of the integration provider.",
            "example": "Z4Bxl8J4SaPEPLq9IQ8g"
          },
          "altType": {
            "type": "string",
            "description": "The altType of the integration provider.",
            "example": "location"
          },
          "title": {
            "type": "string",
            "description": "The title or name of the integration provider.",
            "example": "Example"
          },
          "route": {
            "type": "string",
            "description": "The route name associated with the integration provider.",
            "example": "epd"
          },
          "provider": {
            "type": "string",
            "description": "The payment provider associated with the integration provider.",
            "example": "nmi"
          },
          "description": {
            "type": "string",
            "description": "A brief description providing additional information about the integration provider.",
            "example": "Lorem"
          },
          "imageUrl": {
            "type": "string",
            "description": "The URL to an image representing the integration provider.",
            "example": "https://example.com/assets/pmd/img/payments/nmi-logo.webp"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp when the integration provider was created.",
            "format": "date-time",
            "example": "2024-02-13T10:43:41.026Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The timestamp when the integration provider was last updated.",
            "format": "date-time",
            "example": "2024-02-13T10:43:41.026Z"
          }
        }
      },
      "IntegrationProviderSchema": {
        "required": [
          "_id",
          "altId",
          "altType",
          "title",
          "route",
          "provider",
          "description",
          "imageUrl",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier of the integration provider.",
            "example": "65cb47dda50f4f13ced4b870"
          },
          "altId": {
            "type": "string",
            "description": "The altId / locationId of the integration provider.",
            "example": "Z4Bxl8J4SaPEPLq9IQ8g"
          },
          "altType": {
            "type": "string",
            "description": "The altType of the integration provider.",
            "example": "location"
          },
          "title": {
            "type": "string",
            "description": "The title or name of the integration provider.",
            "example": "Example"
          },
          "route": {
            "type": "string",
            "description": "The route name associated with the integration provider.",
            "example": "epd"
          },
          "provider": {
            "type": "string",
            "description": "The payment provider associated with the integration provider.",
            "example": "nmi"
          },
          "description": {
            "type": "string",
            "description": "A brief description providing additional information about the integration provider.",
            "example": "Lorem"
          },
          "imageUrl": {
            "type": "string",
            "description": "The URL to an image representing the integration provider.",
            "example": "https://example.com/assets/pmd/img/payments/nmi-logo.webp"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp when the integration provider was created.",
            "format": "date-time",
            "example": "2024-02-13T10:43:41.026Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The timestamp when the integration provider was last updated.",
            "format": "date-time",
            "example": "2024-02-13T10:43:41.026Z"
          }
        }
      },
      "ListWhitelabelIntegrationProviderResponseDto": {
        "required": [
          "providers"
        ],
        "type": "object",
        "properties": {
          "providers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntegrationProviderSchema"
              }
            ],
            "description": "list of integration provider."
          }
        }
      },
      "OrderResponseSchema": {
        "required": [
          "_id",
          "altId",
          "altType",
          "status",
          "sourceType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the order.",
            "example": "653f5e0cde5a1314e62a837c"
          },
          "altId": {
            "type": "string",
            "description": "AltId is the unique identifier eg: location id.",
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          "altType": {
            "type": "string",
            "description": "AltType is the type of identifier.",
            "example": "location"
          },
          "contactId": {
            "type": "string",
            "description": "Contact id corresponding to the order.",
            "example": "XPLSw2SVagl12LMDeTmQ"
          },
          "contactName": {
            "type": "string",
            "description": "Contact name corresponding to the order.",
            "example": "James Bond"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email corresponding to the order.",
            "example": "james.bond@gohighlevel.com"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which order was created.",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "Order value.",
            "example": "100"
          },
          "subtotal": {
            "type": "number",
            "description": "Order sub-total value.",
            "example": "100"
          },
          "discount": {
            "type": "number",
            "description": "Discount value on order.",
            "example": "10"
          },
          "status": {
            "type": "string",
            "description": "The status of the order (e.g., completed).",
            "example": "completed"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Order is in live / test mode.",
            "example": "false"
          },
          "totalProducts": {
            "type": "number",
            "description": "Total products in an order.",
            "example": "5"
          },
          "sourceType": {
            "type": "string",
            "description": "Source type of order (eg: funnel).",
            "example": "funnel"
          },
          "sourceName": {
            "type": "string",
            "description": "Source name for the order.",
            "example": "onestep"
          },
          "sourceId": {
            "type": "string",
            "description": "Source id for the order.",
            "example": "kDj7BHej9Zyyq3QakJmz"
          },
          "sourceMeta": {
            "type": "object",
            "description": "Meta content for the source of order.",
            "example": "{ domain: \"app.gohighlevel.com\", pageId:  \"rBVhyYhMsbxbO8ZqOcei\", pageUrl:  \"/v2/preview/rBVhyYhMsbxbO8ZqOcei\", stepId:   \"5a772f62-3fbc-418b-af1b-be8929dd64c2\"}"
          },
          "couponCode": {
            "type": "string",
            "description": "Coupon code for the order.",
            "example": "100PER"
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the order.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the order.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "sourceSubType": {
            "type": "string",
            "description": "Source sub-type for the order.",
            "example": "one_step_order_form"
          },
          "fulfillmentStatus": {
            "type": "string",
            "description": "Fulfillment status of the order.",
            "example": "unfulfilled"
          },
          "onetimeProducts": {
            "type": "number",
            "description": "Total one time products in an order.",
            "example": "1"
          },
          "recurringProducts": {
            "type": "number",
            "description": "Total recurring time products in an order.",
            "example": "1"
          }
        }
      },
      "ListOrdersResponseDto": {
        "required": [
          "data",
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderResponseSchema"
            },
            "description": "An array of orders"
          },
          "totalCount": {
            "type": "number",
            "description": "total orders count"
          }
        }
      },
      "AmountSummary": {
        "required": [
          "subtotal"
        ],
        "type": "object",
        "properties": {
          "subtotal": {
            "type": "number",
            "description": "Order sub-total value.",
            "example": "100"
          },
          "discount": {
            "type": "number",
            "description": "Discount value on order.",
            "example": "10"
          }
        }
      },
      "payments_OrderSource": {
        "required": [
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "funnel",
              "website",
              "invoice",
              "calendar",
              "text2Pay",
              "document_contracts",
              "membership",
              "mobile_app",
              "communities",
              "point_of_sale",
              "manual",
              "form",
              "survey",
              "payment_link",
              "external"
            ],
            "type": "string"
          },
          "subType": {
            "enum": [
              "one_step_order_form",
              "two_step_order_form",
              "upsell",
              "tap_to_pay",
              "card_payment",
              "store",
              "contact_view",
              "email_campaign",
              "payments_dashboard",
              "shopify",
              "subscription_view",
              "store_upsell",
              "woocommerce",
              "service",
              "meeting",
              "imported_csv",
              "qr_code",
              "saas_one_time",
              "saas_subscription"
            ],
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "GetOrderResponseSchema": {
        "required": [
          "_id",
          "altId",
          "altType",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the order.",
            "example": "653f5e0cde5a1314e62a837c"
          },
          "altId": {
            "type": "string",
            "description": "AltId is the unique identifier eg: location id.",
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          "altType": {
            "type": "string",
            "description": "AltType is the type of identifier.",
            "example": "location"
          },
          "contactId": {
            "type": "string",
            "description": "Contact id corresponding to the order.",
            "example": "XPLSw2SVagl12LMDeTmQ"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which order was created.",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "Order value.",
            "example": "100"
          },
          "status": {
            "type": "string",
            "description": "The status of the order (e.g., completed).",
            "example": "completed"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Order is in live / test mode.",
            "example": "false"
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the order.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the order.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "fulfillmentStatus": {
            "type": "string",
            "description": "Fulfillment status of the order.",
            "example": "unfulfilled"
          },
          "contactSnapshot": {
            "type": "object",
            "description": "Contact details of the order.",
            "example": "{ last_name: \"Mcclain\", type: \"lead\", first_name_lower_case: \"rogan\", email: \"anish+11@gohighlevel.com\", last_name_lower_case: \"mcclain\", location_id: \"o6241QsiRwUIJHyjuhos\", company_name: \"Jordan and Cox Trading\"}"
          },
          "amountSummary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountSummary"
              }
            ],
            "description": "Amount details of the order.",
            "example": "{ subtotal: 100, discount: 5 }"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderSource"
              }
            ],
            "description": "Source details of the order.",
            "example": "{ type: \"invoice\", id: \"61dd48ff65b013bc39bb09c6\" }"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Item details of the order.",
            "example": "{ _id: 61dd33e88058b9f967ca79dc, authorizeAmount: 0, locationId: \"SBAWb4yu7A4LSc0skQ6g\", name: \"Sample Product\": price: {}, product: { name: \"Testing product\", productType: \"SERVICE\" }}"
          },
          "coupon": {
            "type": "object",
            "description": "Coupon details of the order.",
            "example": "{ code: \"FEST10\", _id: \"63455e48901b43d4ef364a20\" }"
          },
          "trackingId": {
            "type": "string",
            "description": "Tracking id of the order.",
            "example": "63319ef9-de0a-4c84-aebd-3585fb4a0cdf"
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint id of the order.",
            "example": "5d51db5a-42b0-4b04-ba88-2c046c982a3a"
          },
          "meta": {
            "type": "object",
            "description": "Meta details of the order.",
            "example": "{ couponSessionExpired: true }"
          },
          "markAsTest": {
            "type": "boolean",
            "description": "Is test order.",
            "example": "false"
          },
          "traceId": {
            "type": "string",
            "description": "Trace id of the order.",
            "example": "d3b16a92-a8ed-4e6b-8467-844750f78ed5"
          },
          "automaticTaxesCalculated": {
            "type": "boolean",
            "description": "Automatic taxes applied for the Order",
            "example": true
          },
          "taxCalculationProvider": {
            "type": "object",
            "description": "Provider name for automatic tax calculation",
            "example": "taxjar"
          }
        }
      },
      "CardDto": {
        "required": [
          "type",
          "last4"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "visa",
              "mastercard",
              "other"
            ],
            "type": "string",
            "example": "mastercard"
          },
          "last4": {
            "type": "string",
            "description": "Last 4 digit of the card",
            "example": "1234"
          }
        }
      },
      "ChequeDto": {
        "required": [
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "check number",
            "example": "129-129-129-912"
          }
        }
      },
      "PostRecordOrderPaymentBody": {
        "required": [
          "altId",
          "altType",
          "mode"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "mode": {
            "enum": [
              "cash",
              "card",
              "cheque",
              "bank_transfer",
              "other"
            ],
            "type": "string",
            "description": "manual payment method",
            "example": "card"
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDto"
              }
            ],
            "description": "Details of Card if used for payment"
          },
          "cheque": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChequeDto"
              }
            ],
            "description": "Details of the Cheque if used for payment"
          },
          "notes": {
            "type": "string",
            "description": "Any note to be recorded with the transaction",
            "example": "This was a direct payment"
          },
          "amount": {
            "type": "number",
            "description": "Amount to be paid against the invoice.",
            "example": 100
          },
          "meta": {
            "type": "object",
            "description": "Meta data to be recorded with the transaction"
          },
          "isPartialPayment": {
            "type": "boolean",
            "description": "Indicates if the order is intended to be a partial payment."
          }
        }
      },
      "PostRecordOrderPaymentResponse": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success status of the request",
            "example": true
          }
        }
      },
      "FulfillmentTracking": {
        "type": "object",
        "properties": {
          "trackingNumber": {
            "type": "string",
            "description": "Tracking number provided by the shipping carrier",
            "example": "40012345678"
          },
          "shippingCarrier": {
            "type": "string",
            "description": "Shipping carrier name",
            "example": "FedEx"
          },
          "trackingUrl": {
            "type": "string",
            "description": "Tracking URL",
            "example": "https://www.fedex.com/wtrk/track/?trknbr=40012345678"
          }
        }
      },
      "FulfillmentItems": {
        "required": [
          "priceId",
          "qty"
        ],
        "type": "object",
        "properties": {
          "priceId": {
            "type": "string",
            "description": "The id of product price",
            "example": "6578278e879ad2646715ba9c"
          },
          "qty": {
            "type": "number",
            "description": "The no of quantity of the item",
            "example": 1
          }
        }
      },
      "CreateFulfillmentDto": {
        "required": [
          "altId",
          "altType",
          "trackings",
          "items",
          "notifyCustomer"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "trackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentTracking"
            },
            "description": "Fulfillment tracking information"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentItems"
            },
            "description": "Fulfilled items"
          },
          "notifyCustomer": {
            "type": "boolean",
            "description": "Need to send a notification to customer",
            "example": true
          }
        }
      },
      "ProductVariantOptionDto": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the option.",
            "example": "h4z7u0im2q8"
          },
          "name": {
            "type": "string",
            "description": "The name of the option.",
            "example": "XL"
          }
        }
      },
      "ProductVariantDto": {
        "required": [
          "id",
          "name",
          "options"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the variant.",
            "example": "38s63qmxfr4"
          },
          "name": {
            "type": "string",
            "description": "The name of the variant.",
            "example": "Size"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantOptionDto"
            },
            "description": "An array of options for the variant."
          }
        }
      },
      "ProductMediaDto": {
        "required": [
          "id",
          "url",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the media.",
            "example": "fzrgusiuu0m"
          },
          "title": {
            "type": "string",
            "description": "The title of the media file.",
            "example": "1dd7dcd0-e71d-4cf7-a06b-6d47723d6a29.png"
          },
          "url": {
            "type": "string",
            "description": "The URL where the media file is stored.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/sample.png"
          },
          "type": {
            "enum": [
              "image",
              "video"
            ],
            "type": "string",
            "description": "The type of the media file (e.g., image, video will be supporting soon).",
            "example": "image"
          },
          "isFeatured": {
            "type": "boolean",
            "description": "Indicates whether the media is featured.",
            "example": true
          },
          "priceIds": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "Mongo ObjectIds of the prices for which the media is assigned",
            "example": "6578278e879ad2646715ba9c"
          }
        }
      },
      "ProductLabelDto": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The content for the product label.",
            "example": "Featured"
          },
          "startDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2024-06-26T05:43:35.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2024-06-30T05:43:39.000Z"
          }
        }
      },
      "ProductSEODto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "SEO title of the product which will be displayed in the preview",
            "example": "Apple iPhone 14"
          },
          "description": {
            "type": "string",
            "description": "SEO Description for the product which will be displayed in the preview",
            "example": "New iPhone with all new features"
          }
        }
      },
      "DefaultProductResponseDto": {
        "required": [
          "_id",
          "locationId",
          "name",
          "productType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "description": {
            "type": "string",
            "description": "product description",
            "example": "This is a really awesome product"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "description": "An array of variants for the product."
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMediaDto"
            },
            "description": "An array of medias for the product."
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Awesome Product"
          },
          "productType": {
            "type": "string",
            "description": "The type of the product (e.g., PHYSICAL).",
            "example": "PHYSICAL"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Indicates whether the product is available in-store.",
            "example": true
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier for the user who created the product.",
            "example": "6YAtzfzpmHAdj0e8GkKp"
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the product.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the product.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "statementDescriptor": {
            "type": "string",
            "description": "The statement descriptor for the product.",
            "example": "abcde"
          },
          "image": {
            "type": "string",
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of category Ids for the product",
            "example": [
              "65d71377c326ea78e1c47df5",
              "65d71377c326ea78e1c47d34"
            ]
          },
          "isTaxesEnabled": {
            "type": "boolean",
            "description": "The field indicates whether taxes are enabled for the product or not.",
            "default": false,
            "example": true
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
            "example": [
              "654492a4e6bef380114de15a"
            ]
          },
          "automaticTaxCategoryId": {
            "type": "string",
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5"
          },
          "isLabelEnabled": {
            "type": "boolean",
            "description": "A boolean representing whether a product label is enabled or not",
            "default": false,
            "example": true
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "The Product label details"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the product by which the product will be navigated",
            "example": "washing-machine"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "The SEO information for the product requested"
          }
        }
      },
      "MembershipOfferDto": {
        "required": [
          "label",
          "value",
          "_id"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Membership offer label",
            "example": "top_50"
          },
          "value": {
            "type": "string",
            "description": "Membership offer label",
            "example": "50"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the membership offer.",
            "example": "655b33aa2209e60b6adb87a7"
          }
        }
      },
      "RecurringDto": {
        "required": [
          "interval",
          "intervalCount"
        ],
        "type": "object",
        "properties": {
          "interval": {
            "enum": [
              "day",
              "month",
              "week",
              "year"
            ],
            "type": "string",
            "description": "The interval at which the recurring event occurs.",
            "example": "day"
          },
          "intervalCount": {
            "type": "number",
            "description": "The number of intervals between each occurrence of the event.",
            "example": 1
          }
        }
      },
      "DefaultPriceResponseDto": {
        "required": [
          "_id",
          "name",
          "type",
          "currency",
          "amount"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the price.",
            "example": "655b33aa2209e60b6adb87a7"
          },
          "membershipOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "description": "An array of membership offers associated with the price."
          },
          "variantOptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of variant option IDs associated with the price.",
            "example": [
              "h4z7u0im2q8",
              "h3nst2ltsnn"
            ]
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "product": {
            "type": "string",
            "description": "The unique identifier for the associated product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier for the user.",
            "example": "6YAtzfzpmHAdj0e8GkKp"
          },
          "name": {
            "type": "string",
            "description": "The name of the price.",
            "example": "Red / S"
          },
          "type": {
            "enum": [
              "one_time",
              "recurring"
            ],
            "type": "string",
            "description": "The type of the price (e.g., one_time).",
            "example": "one_time"
          },
          "currency": {
            "type": "string",
            "description": "The currency code for the price.",
            "example": "INR"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the price.",
            "example": 199999
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the price.",
            "format": "date-time",
            "example": "2023-11-20T10:23:38.645Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the price.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.852Z"
          },
          "compareAtPrice": {
            "type": "number",
            "description": "The compare-at price for comparison purposes.",
            "example": 2000000
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Indicates whether inventory tracking is enabled."
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available inventory stock quantity",
            "example": 5
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Continue selling when out of stock",
            "example": true
          }
        }
      },
      "FulfilledItem": {
        "required": [
          "_id",
          "name",
          "product",
          "price",
          "qty"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The id of product price",
            "example": "6578278e879ad2646715ba9c"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Iphone 15 pro"
          },
          "product": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultProductResponseDto"
              }
            ],
            "description": "Product details"
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultPriceResponseDto"
              }
            ],
            "description": "Price details"
          },
          "qty": {
            "type": "number",
            "description": "The no of quantity of the current fulfilled item",
            "example": 1
          }
        }
      },
      "FulfillmentSchema": {
        "required": [
          "altId",
          "altType",
          "trackings",
          "_id",
          "items",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "trackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentTracking"
            },
            "description": "Fulfillment tracking information"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the fulfillment item.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfilledItem"
            },
            "description": "Fulfilled items"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "CreateFulfillmentResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FulfillmentSchema"
              }
            ],
            "description": "fulfillment data"
          }
        }
      },
      "ListFulfillmentResponseDto": {
        "required": [
          "status",
          "data"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentSchema"
            },
            "description": "An array of fulfilled items"
          }
        }
      },
      "TxnResponseSchema": {
        "required": [
          "_id",
          "altId",
          "altType",
          "status",
          "entitySourceType",
          "createdAt",
          "updatedAt",
          "fulfilledAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "example": "61dd0feac077f72010f78804"
          },
          "altId": {
            "type": "string",
            "description": "AltId is the unique identifier eg: location id.",
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          "altType": {
            "type": "string",
            "description": "AltType is the type of identifier.",
            "example": "location"
          },
          "contactId": {
            "type": "string",
            "description": "Contact id corresponding to the transaction.",
            "example": "XPLSw2SVagl12LMDeTmQ"
          },
          "mergedFromContactId": {
            "type": "string",
            "description": "ID of the contact that was merged from.",
            "example": "XPLSw2SVagl12LMDeTmQ"
          },
          "contactName": {
            "type": "string",
            "description": "Contact name corresponding to the transaction.",
            "example": "James Bond"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email corresponding to the transaction.",
            "example": "james.bond@gohighlevel.com"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which transaction occurred.",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "Transaction value.",
            "example": "100"
          },
          "status": {
            "type": "object",
            "description": "The status of the transaction (e.g., succeeded).",
            "example": "succeeded"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Transaction is in live / test mode.",
            "example": "false"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type of transaction (eg: order).",
            "example": "order"
          },
          "entityId": {
            "type": "string",
            "description": "Entity id for the transaction. e.g: order id",
            "example": "61dd0fe9c077f73e67f78803"
          },
          "entitySourceType": {
            "type": "string",
            "description": "Entity source type of transaction (eg: funnel).",
            "example": "funnel"
          },
          "entitySourceSubType": {
            "type": "string",
            "description": "Entity source sub-type of the transactions.",
            "example": "two_step_order_form"
          },
          "entitySourceName": {
            "type": "string",
            "description": "Entity source name for the transaction.",
            "example": "new funnel"
          },
          "entitySourceId": {
            "type": "string",
            "description": "Entity source id for the transaction.",
            "example": "BDBMEghdIUaqMPEsK349"
          },
          "entitySourceMeta": {
            "type": "object",
            "description": "Meta content for the entity source of transaction.",
            "example": "{ domain: \"app.gohighlevel.com\", pageId:  \"rBVhyYhMsbxbO8ZqOcei\", pageUrl:  \"/v2/preview/rBVhyYhMsbxbO8ZqOcei\", stepId:   \"5a772f62-3fbc-418b-af1b-be8929dd64c2\"}"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription id for transaction.",
            "example": "sub_1KGcXDCScnf89tZoVkoEMCEL"
          },
          "chargeId": {
            "type": "string",
            "description": "Charge id for transaction.",
            "example": "in_1KGcXDCScnf89tZohCsmImwE"
          },
          "chargeSnapshot": {
            "type": "object",
            "description": "Charge snapshot of transaction.",
            "example": "{ id: \"in_1KGcXDCScnf89tZohCsmImwE\", object: \"invoice\", account_country: \"US\",  account_name:  \"GHL-Testing\" }"
          },
          "paymentProviderType": {
            "type": "string",
            "description": "Payment provider for transaction.",
            "example": "stripe"
          },
          "paymentProviderConnectedAccount": {
            "type": "string",
            "description": "Payment provider  account id for transaction.",
            "example": "612ca676b484b241fef9d962"
          },
          "ipAddress": {
            "type": "string",
            "description": "Ip address from where transaction was initiated.",
            "example": "107.178.194.224"
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the transaction.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The update timestamp of the transaction.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "amountRefunded": {
            "type": "number",
            "description": "Transaction amount refunded.",
            "example": "10"
          },
          "paymentMethod": {
            "type": "object",
            "description": "Transaction payment method details.",
            "example": "{ card: { \"brand\": \"discover\", \"last4\": \"0012\" } }"
          },
          "fulfilledAt": {
            "type": "string",
            "description": "The charged timestamp of the transaction.",
            "format": "date-time",
            "example": "2023-11-20T10:27:36.515Z"
          }
        }
      },
      "ListTxnsResponseDto": {
        "required": [
          "data",
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxnResponseSchema"
            },
            "description": "An array of transactions"
          },
          "totalCount": {
            "type": "number",
            "description": "total transactions count"
          }
        }
      },
      "GetTxnResponseSchema": {
        "required": [
          "_id",
          "altType",
          "altId",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "example": "61dd0feac077f72010f78804"
          },
          "altType": {
            "type": "string",
            "description": "AltType is the type of identifier.",
            "example": "location"
          },
          "altId": {
            "type": "string",
            "description": "AltId is the unique identifier eg: location id.",
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          "contactId": {
            "type": "string",
            "description": "Contact id corresponding to the transaction.",
            "example": "XPLSw2SVagl12LMDeTmQ"
          },
          "contactSnapshot": {
            "type": "object",
            "description": "Contact details of the transaction.",
            "example": "{ last_name: \"Mcclain\", type: \"lead\", first_name_lower_case: \"rogan\", email: \"anish+11@gohighlevel.com\", last_name_lower_case: \"mcclain\", location_id: \"o6241QsiRwUIJHyjuhos\", company_name: \"Jordan and Cox Trading\"}"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which transaction was made.",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "Transaction value.",
            "example": "100"
          },
          "status": {
            "type": "object",
            "description": "Transaction status.",
            "example": "succeeded"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Transaction is in live / test mode.",
            "example": "false"
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the transaction.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the transaction.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type of transaction (eg: order).",
            "example": "order"
          },
          "entityId": {
            "type": "string",
            "description": "Entity id for the transaction. e.g: order id",
            "example": "61dd0fe9c077f73e67f78803"
          },
          "entitySource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderSource"
              }
            ],
            "description": "Entity source details for the transaction.",
            "example": "{ type: \"funnel\", id: \"BDBMEghdIUaqMPEsK349\", subType: \"two_step_order_form\", name: \"new funnel\" }"
          },
          "chargeId": {
            "type": "string",
            "description": "Charge id for transaction.",
            "example": "in_1KGcXDCScnf89tZohCsmImwE"
          },
          "chargeSnapshot": {
            "type": "object",
            "description": "Charge snapshot of transaction.",
            "example": "{ id: \"in_1KGcXDCScnf89tZohCsmImwE\", object: \"invoice\", account_country: \"US\",  account_name:  \"GHL-Testing\" }"
          },
          "invoiceId": {
            "type": "string",
            "description": "Invoice id for the transaction.",
            "example": "in_1KGcXDCScnf89tZohCsmImwE"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription id for transaction.",
            "example": "sub_1KGcXDCScnf89tZoVkoEMCEL"
          },
          "paymentProvider": {
            "type": "object",
            "description": "Payment provider details of the transaction.",
            "example": "{ type: \"stripe\", connectedAccount: { _id: \"612ca676b484b241fef9d962\", accountId: \"acct_1Ihw53CScnf89tZo\" } }"
          },
          "ipAddress": {
            "type": "string",
            "description": "Ip address from where transaction was initiated.",
            "example": "107.178.194.224"
          },
          "meta": {
            "type": "object",
            "description": "Meta details of the transaction.",
            "example": "{ stepId: \"af7c731e-e36f-4152-bd1a-3f69a31d6d6d\", pageId: \"A8ltotc2jZxurJba4e3Y\", pageUrl: \"/v2/preview/A8ltotc2jZxurJba4e3Y\" }"
          },
          "markAsTest": {
            "type": "boolean",
            "description": "Is test transaction.",
            "example": "false"
          },
          "isParent": {
            "type": "boolean",
            "description": "Is parent transaction.",
            "example": "false"
          },
          "amountRefunded": {
            "type": "number",
            "description": "Transaction amount refunded.",
            "example": "10"
          },
          "receiptId": {
            "type": "string",
            "description": "Receipt id for transaction.",
            "example": "6492fbea489bc07892c6defb"
          },
          "qboSynced": {
            "type": "boolean",
            "description": "Is transaction qbo synced.",
            "example": "false"
          },
          "qboResponse": {
            "type": "object",
            "description": "Qbo details of the transaction.",
            "example": "{ domain: \"QBO\", sparse: false, Id: \"180\", SyncToken: \"0\", TotalAmt: 25 }"
          },
          "traceId": {
            "type": "string",
            "description": "Trace id of the transaction.",
            "example": "d3b16a92-a8ed-4e6b-8467-844750f78ed5"
          },
          "mergedFromContactId": {
            "type": "string",
            "description": "ID of the contact that was merged from.",
            "example": "XPLSw2SVagl12LMDeTmQ"
          }
        }
      },
      "SubscriptionResponseSchema": {
        "required": [
          "_id",
          "altId",
          "altType",
          "status",
          "entitySourceType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the subscription.",
            "example": "64bf78af39118e4011926cba"
          },
          "altId": {
            "type": "string",
            "description": "AltId is the unique identifier eg: location id.",
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "AltType is the type of identifier.",
            "example": "location"
          },
          "contactId": {
            "type": "string",
            "description": "Contact id corresponding to the subscription.",
            "example": "XPLSw2SVagl12LMDeTmQ"
          },
          "contactName": {
            "type": "string",
            "description": "Contact name corresponding to the subscription.",
            "example": "James Bond"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email corresponding to the subscription.",
            "example": "james.bond@gohighlevel.com"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which subscription occurred.",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "Subscription value.",
            "example": "100"
          },
          "status": {
            "type": "object",
            "description": "The status of the subscription (e.g., succeeded).",
            "example": "active"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Subscription is in live / test mode.",
            "example": "false"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type of subscription (eg: order).",
            "example": "order"
          },
          "entityId": {
            "type": "string",
            "description": "Entity id for the subscription. e.g: order id",
            "example": "62f4db0f3059ecee61379012"
          },
          "entitySourceType": {
            "type": "string",
            "description": "Entity source type of subscription (eg: funnel).",
            "example": "funnel"
          },
          "entitySourceName": {
            "type": "string",
            "description": "Entity source name for the subscription.",
            "example": "Attribution Funnel"
          },
          "entitySourceId": {
            "type": "string",
            "description": "Entity source id for the subscription.",
            "example": "bevrkPbLaDNXFaqfLKMm"
          },
          "entitySourceMeta": {
            "type": "object",
            "description": "Meta content for the entity source of subscription.",
            "example": "{ domain: \"app.gohighlevel.com\", pageId:  \"sxC4lNhFIavEnLZh5KhC\", pageUrl:  \"/v2/preview/sxC4lNhFIavEnLZh5KhC\", stepId: \"7d303d1f-cb85-403d-b548-bf01de5c7bb0\" }"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription id for subscription.",
            "example": "I-0UE609H8E43P"
          },
          "subscriptionSnapshot": {
            "type": "object",
            "description": "Snapshot of subscription.",
            "example": "{ status: \"ACTIVE\", status_update_time: \"2022-08-16T11:06:53Z\", id: \"I-0UE609H8E43P\", plan_id: \"P-82K11750F0313430KMLRGE6Y\", start_time: \"2022-08-16T11:05:31Z\", quantity: 1 }"
          },
          "paymentProviderType": {
            "type": "string",
            "description": "Payment provider for subscription.",
            "example": "stripe"
          },
          "paymentProviderConnectedAccount": {
            "type": "string",
            "description": "Payment provider connected account id for subscription.",
            "example": "ATn0CqrzrWS5ak185Bsb1xCpyzBDOZ8WdRxyFotppLYePTDhiuQ49H5QXO_L-4HKk1GBn7f9_QhbNK2s"
          },
          "ipAddress": {
            "type": "string",
            "description": "Ip address from where subscription was initiated.",
            "example": "103.100.16.82"
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the subscription.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The update timestamp of the subscription.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          }
        }
      },
      "ListSubscriptionResponseDto": {
        "required": [
          "data",
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionResponseSchema"
            },
            "description": "An array of subscriptions"
          },
          "totalCount": {
            "type": "number",
            "description": "total subscriptions count"
          }
        }
      },
      "CustomRRuleOptionsDto": {
        "required": [
          "intervalType",
          "interval",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "intervalType": {
            "enum": [
              "yearly",
              "monthly",
              "weekly",
              "daily",
              "hourly",
              "minutely",
              "secondly"
            ],
            "type": "string",
            "example": "monthly"
          },
          "interval": {
            "type": "number",
            "example": 2
          },
          "startDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in HH:mm:ss format",
            "example": "20:45:00"
          },
          "endDate": {
            "type": "string",
            "description": "End date in YYYY-MM-DD format",
            "example": "2029-11-01"
          },
          "endTime": {
            "type": "string",
            "description": "End time in HH:mm:ss format",
            "example": "18:45:00"
          },
          "dayOfMonth": {
            "type": "number",
            "description": "-1, 1, 2, 3, ..., 27, 28",
            "example": 15
          },
          "dayOfWeek": {
            "enum": [
              "mo",
              "tu",
              "we",
              "th",
              "fr",
              "sa",
              "su"
            ],
            "type": "string",
            "example": "mo"
          },
          "numOfWeek": {
            "type": "number",
            "description": "-1, 1, 2, 3, 4",
            "example": -1
          },
          "monthOfYear": {
            "enum": [
              "jan",
              "feb",
              "mar",
              "apr",
              "may",
              "jun",
              "jul",
              "aug",
              "sep",
              "oct",
              "nov",
              "dec"
            ],
            "type": "string",
            "example": "jan"
          },
          "count": {
            "type": "number",
            "description": "Max number of task executions",
            "example": 10
          },
          "daysBefore": {
            "type": "number",
            "description": "Execute task number of days before",
            "example": 5
          }
        }
      },
      "ScheduleOptionsDto": {
        "type": "object",
        "properties": {
          "executeAt": {
            "type": "string"
          },
          "rrule": {
            "$ref": "#/components/schemas/CustomRRuleOptionsDto"
          }
        }
      },
      "GetSubscriptionResponseSchema": {
        "required": [
          "_id",
          "altType",
          "altId",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the subscription.",
            "example": "64bf78af39118e4011926cba"
          },
          "altType": {
            "type": "object",
            "description": "AltType is the type of identifier.",
            "example": "location"
          },
          "altId": {
            "type": "string",
            "description": "AltId is the unique identifier eg: location id.",
            "example": "3SwdhCu3svxI8AKsPJt6"
          },
          "contactId": {
            "type": "string",
            "description": "Contact id corresponding to the subscription.",
            "example": "XPLSw2SVagl12LMDeTmQ"
          },
          "contactSnapshot": {
            "type": "object",
            "description": "Contact details of the subscriber.",
            "example": "{ last_name: \"Mcclain\", type: \"lead\", first_name_lower_case: \"rogan\", email: \"anish+11@gohighlevel.com\", last_name_lower_case: \"mcclain\", location_id: \"o6241QsiRwUIJHyjuhos\", company_name: \"Jordan and Cox Trading\"}"
          },
          "coupon": {
            "type": "object",
            "description": "Coupon details of the subscription.",
            "example": "{ _id: \"6374c6926d119a393fe1e556\", usageCount: 5260, altId: \"jVFIxsMY19D94nOSIOEO\", altType: \"location\", name: \"FREE-100%\", code: \"FREE100\", discountType: \"percentage\", discountValue: 100 }"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which subscription was made.",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "Subscription value.",
            "example": "100"
          },
          "status": {
            "type": "object",
            "description": "Subscription status.",
            "example": "active"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Subscription is in live / test mode.",
            "example": "false"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type of subscription (eg: order).",
            "example": "order"
          },
          "entityId": {
            "type": "string",
            "description": "Entity id for the subscription. e.g: order id",
            "example": "62f4db0f3059ecee61379012"
          },
          "entitySource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderSource"
              }
            ],
            "description": "Entity source details for the subscription.",
            "example": "{ type: \"funnel\", id: \"lx6ROqruHGVQD2PZwFxK\", subType: \"upsell\", name: \"test funnel\" }"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription id for subscription.",
            "example": "I-0UE609H8E43P"
          },
          "subscriptionSnapshot": {
            "type": "object",
            "description": "Snapshot of subscription.",
            "example": "{ status: \"ACTIVE\", status_update_time: \"2022-08-16T11:06:53Z\", id: \"I-0UE609H8E43P\", plan_id: \"P-82K11750F0313430KMLRGE6Y\", start_time: \"2022-08-16T11:05:31Z\", quantity: 1 }"
          },
          "paymentProvider": {
            "type": "object",
            "description": "Payment provider details for the subscription.",
            "example": "{ type: \"paypal\", connectedAccount: { _id: \"64410debdc8f3b0503523abb\", merchantClientId: \"AeXtjrxdgsJiCPwQt5jML5pH-0mwmLs-tH7ub4Uo3IrDKvRl34FvJy8niI6E1wmS_pryIRdNllyVl58b\" } }"
          },
          "ipAddress": {
            "type": "string",
            "description": "Ip address from where subscription was initiated.",
            "example": "103.100.16.82"
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the subscription.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the subscription.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "meta": {
            "type": "object",
            "description": "Meta details of the subscription.",
            "example": "{ collection: \"transactionsv2\", id: \"6320652f0f664b6632006920\" }"
          },
          "markAsTest": {
            "type": "boolean",
            "description": "Is test subscription.",
            "example": "false"
          },
          "schedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleOptionsDto"
              }
            ],
            "description": "Scedule details for the subscription.",
            "example": "{ collection: \"transactionsv2\", id: \"6320652f0f664b6632006920\" }"
          },
          "autoPayment": {
            "type": "object",
            "description": "Auto payment details of the subscription.",
            "example": "{ customerId: \"908879612\", paymentMethodId: \"908646635\" }"
          },
          "recurringProduct": {
            "type": "object",
            "description": "Recurring product details of the subscription.",
            "example": "{ locationId: \"Z4Bxl8J4SaPEPLq9IQ8g\", funnel: \"bQHJWKcyjiKjk4BHv91g\", step: \"2281a993-8a75-4b48-9912-571f29c99a74\", name: \"Sofa Set\" }"
          },
          "canceledAt": {
            "type": "string",
            "description": "Cancellation timestamp of the subscription.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "canceledBy": {
            "type": "string",
            "description": "User id who cancelled the subscription.",
            "example": "qUuXUiB2AiA2DIthEicP"
          },
          "traceId": {
            "type": "string",
            "description": "Trace id of the subscription.",
            "example": "302d2cf4-1ba0-4bf5-bc3b-f8fa76fda58a"
          }
        }
      },
      "ApplyToFuturePaymentsConfigDto": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "forever",
              "fixed"
            ],
            "type": "string",
            "description": "Type of future payments configuration",
            "example": "fixed"
          },
          "duration": {
            "type": "number",
            "description": "Duration value for fixed type configurations",
            "example": 3
          },
          "durationType": {
            "type": "string",
            "description": "Duration type for fixed configurations (e.g. months)",
            "example": "months"
          }
        }
      },
      "CouponDto": {
        "required": [
          "_id",
          "usageCount",
          "limitPerCustomer",
          "altId",
          "altType",
          "name",
          "code",
          "discountType",
          "discountValue",
          "status",
          "startDate",
          "applyToFuturePayments",
          "applyToFuturePaymentsConfig",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique MongoDB identifier for the coupon",
            "example": "67f6c132d9485f9dacd5f123"
          },
          "usageCount": {
            "type": "number",
            "description": "Number of times the coupon has been used",
            "example": 12
          },
          "limitPerCustomer": {
            "type": "number",
            "description": "Maximum number of times a customer can use this coupon (0 for unlimited)",
            "example": 5
          },
          "altId": {
            "type": "string",
            "description": "Location Id",
            "example": "79t07PzK8Tvf73d12312"
          },
          "altType": {
            "type": "string",
            "description": "Type of entity",
            "example": "location"
          },
          "name": {
            "type": "string",
            "description": "Display name of the coupon",
            "example": "NEWT6"
          },
          "code": {
            "type": "string",
            "description": "Redemption code for the coupon",
            "example": "NEWT6"
          },
          "discountType": {
            "enum": [
              "percentage",
              "amount"
            ],
            "type": "string",
            "description": "Type of discount (percentage or amount)",
            "example": "percentage"
          },
          "discountValue": {
            "type": "number",
            "description": "Value of the discount (percentage or fixed amount)",
            "example": 25
          },
          "status": {
            "enum": [
              "scheduled",
              "active",
              "expired"
            ],
            "type": "string",
            "description": "Current status of the coupon",
            "example": "scheduled"
          },
          "startDate": {
            "type": "string",
            "description": "Date when the coupon becomes active",
            "example": "2025-04-30T18:30:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date when the coupon expires",
            "example": "2025-05-30T18:30:00.000Z"
          },
          "applyToFuturePayments": {
            "type": "boolean",
            "description": "Indicates if the coupon applies to future recurring payments",
            "example": true
          },
          "applyToFuturePaymentsConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplyToFuturePaymentsConfigDto"
              }
            ],
            "description": "Configuration for how the coupon applies to future payments"
          },
          "userId": {
            "type": "string",
            "description": "User ID associated with the coupon (if applicable)",
            "example": "q0m15dTLGeiGOXG123123"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-04-09T18:49:22.026Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-04-09T18:49:22.026Z"
          }
        }
      },
      "ListCouponsResponseDto": {
        "required": [
          "data",
          "totalCount",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponDto"
            },
            "description": "Array of coupon objects"
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of coupons matching the query criteria",
            "example": 20
          },
          "traceId": {
            "type": "string",
            "description": "Unique identifier for tracing this API request",
            "example": "c667b18d-8f5e-44cf-a914"
          }
        }
      },
      "ApplyToFuturePaymentsConfig": {
        "required": [
          "type",
          "duration",
          "durationType"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "forever",
              "fixed"
            ],
            "type": "string",
            "description": "Type of the config",
            "example": "forever | fixed"
          },
          "duration": {
            "type": "number",
            "description": "Duration the coupon to be applied in a subscription",
            "example": 5
          },
          "durationType": {
            "enum": [
              "months"
            ],
            "type": "string",
            "description": "Type of the duration",
            "example": "months"
          }
        }
      },
      "CreateCouponParams": {
        "required": [
          "altId",
          "altType",
          "name",
          "code",
          "discountType",
          "discountValue",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id",
            "example": "BQdAwxa0ky1iK2sstLGJ"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "name": {
            "type": "string",
            "description": "Coupon Name",
            "example": "New Year Sale"
          },
          "code": {
            "type": "string",
            "description": "Coupon Code",
            "example": "LEVELUPDAY2022"
          },
          "discountType": {
            "enum": [
              "percentage",
              "amount"
            ],
            "type": "string",
            "description": "Discount Type",
            "example": "amount"
          },
          "discountValue": {
            "type": "number",
            "description": "Discount Value",
            "example": 10
          },
          "startDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2023-01-01T22:45:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2023-01-31T22:45:00.000Z"
          },
          "usageLimit": {
            "type": "number",
            "description": "Max number of times coupon can be used",
            "example": 10
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Product Ids",
            "example": [
              "6241712be68f7a98102ba272"
            ]
          },
          "applyToFuturePayments": {
            "type": "boolean",
            "description": "Is Coupon applicable on upcoming subscription transactions",
            "default": true,
            "example": true
          },
          "applyToFuturePaymentsConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplyToFuturePaymentsConfig"
              }
            ],
            "description": "If coupon is applicable on upcoming subscription transactions, how many months should it be applicable for a subscription",
            "default": {
              "type": "forever"
            },
            "example": [
              {
                "type": "fixed",
                "duration": 5,
                "durationType": "months"
              },
              {
                "type": "forever"
              }
            ]
          },
          "limitPerCustomer": {
            "type": "boolean",
            "description": "Limits whether a coupon can be redeemed only once per customer.",
            "default": false,
            "example": true
          }
        }
      },
      "CreateCouponResponseDto": {
        "required": [
          "_id",
          "usageCount",
          "limitPerCustomer",
          "altId",
          "altType",
          "name",
          "code",
          "discountType",
          "discountValue",
          "status",
          "startDate",
          "applyToFuturePayments",
          "applyToFuturePaymentsConfig",
          "createdAt",
          "updatedAt",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique MongoDB identifier for the coupon",
            "example": "67f6c132d9485f9dacd5f123"
          },
          "usageCount": {
            "type": "number",
            "description": "Number of times the coupon has been used",
            "example": 12
          },
          "limitPerCustomer": {
            "type": "number",
            "description": "Maximum number of times a customer can use this coupon (0 for unlimited)",
            "example": 5
          },
          "altId": {
            "type": "string",
            "description": "Location Id",
            "example": "79t07PzK8Tvf73d12312"
          },
          "altType": {
            "type": "string",
            "description": "Type of entity",
            "example": "location"
          },
          "name": {
            "type": "string",
            "description": "Display name of the coupon",
            "example": "NEWT6"
          },
          "code": {
            "type": "string",
            "description": "Redemption code for the coupon",
            "example": "NEWT6"
          },
          "discountType": {
            "enum": [
              "percentage",
              "amount"
            ],
            "type": "string",
            "description": "Type of discount (percentage or amount)",
            "example": "percentage"
          },
          "discountValue": {
            "type": "number",
            "description": "Value of the discount (percentage or fixed amount)",
            "example": 25
          },
          "status": {
            "enum": [
              "scheduled",
              "active",
              "expired"
            ],
            "type": "string",
            "description": "Current status of the coupon",
            "example": "scheduled"
          },
          "startDate": {
            "type": "string",
            "description": "Date when the coupon becomes active",
            "example": "2025-04-30T18:30:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date when the coupon expires",
            "example": "2025-05-30T18:30:00.000Z"
          },
          "applyToFuturePayments": {
            "type": "boolean",
            "description": "Indicates if the coupon applies to future recurring payments",
            "example": true
          },
          "applyToFuturePaymentsConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplyToFuturePaymentsConfigDto"
              }
            ],
            "description": "Configuration for how the coupon applies to future payments"
          },
          "userId": {
            "type": "string",
            "description": "User ID associated with the coupon (if applicable)",
            "example": "q0m15dTLGeiGOXG123123"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-04-09T18:49:22.026Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-04-09T18:49:22.026Z"
          },
          "traceId": {
            "type": "string",
            "description": "Unique identifier for tracing this API request",
            "example": "c667b18d-8f5e-44cf-a914"
          }
        }
      },
      "UpdateCouponParams": {
        "required": [
          "altId",
          "altType",
          "name",
          "code",
          "discountType",
          "discountValue",
          "startDate",
          "id"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id",
            "example": "BQdAwxa0ky1iK2sstLGJ"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "name": {
            "type": "string",
            "description": "Coupon Name",
            "example": "New Year Sale"
          },
          "code": {
            "type": "string",
            "description": "Coupon Code",
            "example": "LEVELUPDAY2022"
          },
          "discountType": {
            "enum": [
              "percentage",
              "amount"
            ],
            "type": "string",
            "description": "Discount Type",
            "example": "amount"
          },
          "discountValue": {
            "type": "number",
            "description": "Discount Value",
            "example": 10
          },
          "startDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2023-01-01T22:45:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2023-01-31T22:45:00.000Z"
          },
          "usageLimit": {
            "type": "number",
            "description": "Max number of times coupon can be used",
            "example": 10
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Product Ids",
            "example": [
              "6241712be68f7a98102ba272"
            ]
          },
          "applyToFuturePayments": {
            "type": "boolean",
            "description": "Is Coupon applicable on upcoming subscription transactions",
            "default": true,
            "example": true
          },
          "applyToFuturePaymentsConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplyToFuturePaymentsConfig"
              }
            ],
            "description": "If coupon is applicable on upcoming subscription transactions, how many months should it be applicable for a subscription",
            "default": {
              "type": "forever"
            },
            "example": [
              {
                "type": "fixed",
                "duration": 5,
                "durationType": "months"
              },
              {
                "type": "forever"
              }
            ]
          },
          "limitPerCustomer": {
            "type": "boolean",
            "description": "Limits whether a coupon can be redeemed only once per customer.",
            "default": false,
            "example": true
          },
          "id": {
            "type": "string",
            "description": "Coupon Id",
            "example": "6241712be68f7a98102ba272"
          }
        }
      },
      "DeleteCouponParams": {
        "required": [
          "altId",
          "altType",
          "id"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id",
            "example": "BQdAwxa0ky1iK2sstLGJ"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "id": {
            "type": "string",
            "description": "Coupon Id",
            "example": "6241712be68f7a98102ba272"
          }
        }
      },
      "DeleteCouponResponseDto": {
        "required": [
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the delete was successful",
            "example": true
          },
          "traceId": {
            "type": "string",
            "description": "Unique identifier for tracing this API request",
            "example": "c667b18d-8f5e-44cf-a914"
          }
        }
      },
      "CreateCustomProvidersDto": {
        "required": [
          "name",
          "description",
          "paymentsUrl",
          "queryUrl",
          "imageUrl",
          "supportsSubscriptionSchedule"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the custom provider",
            "example": "Company Paypal Integration"
          },
          "description": {
            "type": "string",
            "description": "Description of payment gateway. Shown on the payments integrations page as subtext",
            "example": "This payment gateway supports payments in India via UPI, Net banking, cards and wallets."
          },
          "paymentsUrl": {
            "type": "string",
            "description": "This url will be loaded in iFrame to start a payment session.",
            "example": "https://testpayment.paypal.com"
          },
          "queryUrl": {
            "type": "string",
            "description": "The url used for querying payments related events. Ex. verify, refund, subscription etc.",
            "example": "https://testsubscription.paypal.com"
          },
          "imageUrl": {
            "type": "string",
            "description": "Public image url for logo of the payment gateway displayed on the payments integrations page.",
            "example": "https://testsubscription.paypal.com"
          },
          "supportsSubscriptionSchedule": {
            "type": "boolean",
            "description": "Whether the config supports subscription schedule or not. true represents config supports subscription schedule",
            "example": true
          }
        }
      },
      "CreateCustomProvidersResponseSchema": {
        "required": [
          "name",
          "description",
          "paymentsUrl",
          "queryUrl",
          "imageUrl",
          "_id",
          "locationId",
          "marketplaceAppId",
          "deleted",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the custom provider",
            "example": "Company Paypal Integration"
          },
          "description": {
            "type": "string",
            "description": "Description of payment gateway. Shown on the payments integrations page as subtext",
            "example": "This payment gateway supports payments in India via UPI, Net banking, cards and wallets."
          },
          "paymentsUrl": {
            "type": "string",
            "description": "This url will be loaded in iFrame to start a payment session.",
            "example": "https://testpayment.paypal.com"
          },
          "queryUrl": {
            "type": "string",
            "description": "The url used for querying payments related events. Ex. verify, refund, subscription etc.",
            "example": "https://testsubscription.paypal.com"
          },
          "imageUrl": {
            "type": "string",
            "description": "Public image url for logo of the payment gateway displayed on the payments integrations page.",
            "example": "https://testsubscription.paypal.com"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the custom provider.",
            "example": "662a44ad19a2a44d3cd9d749"
          },
          "locationId": {
            "type": "string",
            "description": "Location id",
            "example": "Lk3nlfk4lxlelVEwcW"
          },
          "marketplaceAppId": {
            "type": "string",
            "description": "The application id of marketplace",
            "example": "65f0b217a05c774da7f1efa5"
          },
          "paymentProvider": {
            "type": "object",
            "description": "Payment provider details.",
            "example": "{ live: { liveMode: true }, test: { liveMode: false, apiKey: \"y5ZQxryRFXZHvUJZdLXXXXXX\", publishableKey: \"rzp_test_zPRoVMLOa0A9wo\" }}"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the config is deleted or not. true represents config is deleted",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the custom provider.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the custom provider.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "traceId": {
            "type": "string",
            "description": "Trace id of the custom provider.",
            "example": "302d2cf4-1ba0-4bf5-bc3b-f8fa76fda58a"
          }
        }
      },
      "DeleteCustomProvidersResponseSchema": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the custom provider config is disconnect or not. true represents config is disconnect",
            "example": "true"
          }
        }
      },
      "GetCustomProvidersResponseSchema": {
        "required": [
          "name",
          "description",
          "paymentsUrl",
          "queryUrl",
          "imageUrl",
          "_id",
          "locationId",
          "marketplaceAppId",
          "deleted",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the custom provider",
            "example": "Company Paypal Integration"
          },
          "description": {
            "type": "string",
            "description": "Description of payment gateway. Shown on the payments integrations page as subtext",
            "example": "This payment gateway supports payments in India via UPI, Net banking, cards and wallets."
          },
          "paymentsUrl": {
            "type": "string",
            "description": "This url will be loaded in iFrame to start a payment session.",
            "example": "https://testpayment.paypal.com"
          },
          "queryUrl": {
            "type": "string",
            "description": "The url used for querying payments related events. Ex. verify, refund, subscription etc.",
            "example": "https://testsubscription.paypal.com"
          },
          "imageUrl": {
            "type": "string",
            "description": "Public image url for logo of the payment gateway displayed on the payments integrations page.",
            "example": "https://testsubscription.paypal.com"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the custom provider.",
            "example": "662a44ad19a2a44d3cd9d749"
          },
          "locationId": {
            "type": "string",
            "description": "Location id",
            "example": "Lk3nlfk4lxlelVEwcW"
          },
          "marketplaceAppId": {
            "type": "string",
            "description": "The application id of marketplace",
            "example": "65f0b217a05c774da7f1efa5"
          },
          "paymentProvider": {
            "type": "object",
            "description": "Payment provider details.",
            "example": "{ live: { liveMode: true }, test: { liveMode: false, apiKey: \"y5ZQxryRFXZHvUJZdLXXXXXX\", publishableKey: \"rzp_test_zPRoVMLOa0A9wo\" }}"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the config is deleted or not. true represents config is deleted",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the custom provider.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the custom provider.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "traceId": {
            "type": "string",
            "description": "Trace id of the custom provider.",
            "example": "302d2cf4-1ba0-4bf5-bc3b-f8fa76fda58a"
          }
        }
      },
      "CustomProviderKeys": {
        "required": [
          "apiKey",
          "publishableKey"
        ],
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "Api-key for custom payment provider config",
            "example": "y5ZQxryRFXZHvUJZdLeXXXXX"
          },
          "publishableKey": {
            "type": "string",
            "description": "Publishable-key for custom payment provider config",
            "example": "rzp_test_zPRoVMLOa0XXXX"
          }
        }
      },
      "ConnectCustomProvidersConfigDto": {
        "required": [
          "live",
          "test"
        ],
        "type": "object",
        "properties": {
          "live": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomProviderKeys"
              }
            ],
            "description": "Live config containing api-key and publishable key for live payments"
          },
          "test": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomProviderKeys"
              }
            ],
            "description": "Test config containing api-key and publishable-key for test payments"
          }
        }
      },
      "ConnectCustomProvidersResponseSchema": {
        "required": [
          "name",
          "description",
          "paymentsUrl",
          "queryUrl",
          "imageUrl",
          "_id",
          "locationId",
          "marketplaceAppId",
          "deleted",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the custom provider",
            "example": "Company Paypal Integration"
          },
          "description": {
            "type": "string",
            "description": "Description of payment gateway. Shown on the payments integrations page as subtext",
            "example": "This payment gateway supports payments in India via UPI, Net banking, cards and wallets."
          },
          "paymentsUrl": {
            "type": "string",
            "description": "This url will be loaded in iFrame to start a payment session.",
            "example": "https://testpayment.paypal.com"
          },
          "queryUrl": {
            "type": "string",
            "description": "The url used for querying payments related events. Ex. verify, refund, subscription etc.",
            "example": "https://testsubscription.paypal.com"
          },
          "imageUrl": {
            "type": "string",
            "description": "Public image url for logo of the payment gateway displayed on the payments integrations page.",
            "example": "https://testsubscription.paypal.com"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the custom provider.",
            "example": "662a44ad19a2a44d3cd9d749"
          },
          "locationId": {
            "type": "string",
            "description": "Location id",
            "example": "Lk3nlfk4lxlelVEwcW"
          },
          "marketplaceAppId": {
            "type": "string",
            "description": "The application id of marketplace",
            "example": "65f0b217a05c774da7f1efa5"
          },
          "paymentProvider": {
            "type": "object",
            "description": "Payment provider details.",
            "example": "{ live: { liveMode: true }, test: { liveMode: false, apiKey: \"y5ZQxryRFXZHvUJZdLXXXXXX\", publishableKey: \"rzp_test_zPRoVMLOa0A9wo\" }}"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the config is deleted or not. true represents config is deleted",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the custom provider.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the custom provider.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "traceId": {
            "type": "string",
            "description": "Trace id of the custom provider.",
            "example": "302d2cf4-1ba0-4bf5-bc3b-f8fa76fda58a"
          }
        }
      },
      "DeleteCustomProvidersConfigDto": {
        "required": [
          "liveMode"
        ],
        "type": "object",
        "properties": {
          "liveMode": {
            "type": "boolean",
            "description": "Whether the config is for test mode or live mode. true represents config is for live payments",
            "example": "true"
          }
        }
      },
      "DisconnectCustomProvidersResponseSchema": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the custom provider config is disconnect or not. true represents config is disconnect",
            "example": "true"
          }
        }
      },
      "UpdateCustomProviderCapabilitiesDto": {
        "required": [
          "supportsSubscriptionSchedules"
        ],
        "type": "object",
        "properties": {
          "supportsSubscriptionSchedules": {
            "type": "boolean",
            "description": "Whether the marketplace app supports subscription schedules or not",
            "example": true
          },
          "companyId": {
            "type": "string",
            "description": "Company id. Mandatory if locationId is not provided",
            "example": "Yjnwuduw83e8x30sm0"
          },
          "locationId": {
            "type": "string",
            "description": "Location / Sub-account id. Mandatory if companyId is not provided",
            "example": "Yjnwuduw83e8x30sm0"
          }
        }
      },
      "UpdateCustomProviderCapabilitiesResponseSchema": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the custom provider capabilities are updated or not. true represents capabilities are updated",
            "example": "true"
          }
        }
      },
      "UrlSlugCheckResponseDTO": {
        "required": [
          "exists"
        ],
        "type": "object",
        "properties": {
          "exists": {
            "type": "boolean",
            "description": "Indicates whether the url slug exists or not"
          }
        }
      },
      "UpdateBlogPostParams": {
        "required": [
          "title",
          "locationId",
          "blogId",
          "imageUrl",
          "description",
          "rawHTML",
          "status",
          "imageAltText",
          "categories",
          "author",
          "urlSlug",
          "publishedAt"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Your blog title"
          },
          "locationId": {
            "type": "string",
            "example": "Location ID"
          },
          "blogId": {
            "type": "string",
            "description": "You can find the blog id from blog site dashboard link",
            "example": "Blog ID"
          },
          "imageUrl": {
            "type": "string",
            "example": "Image URl"
          },
          "description": {
            "type": "string",
            "example": "A short description"
          },
          "rawHTML": {
            "type": "string",
            "example": "<h1>Your blog content</h1>"
          },
          "status": {
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "SCHEDULED",
              "ARCHIVED"
            ],
            "type": "string",
            "example": "PUBLISHED"
          },
          "imageAltText": {
            "type": "string",
            "example": "Alt text for your blog image"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "This needs to be array of category ids, which you can get from the category get api call.",
            "example": [
              "9c48df2694a849b6089f9d0d3513efe",
              "6683abde331c041f32c07aee"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "blog",
              "seo"
            ]
          },
          "author": {
            "type": "string",
            "description": "This needs to be author id, which you can get from the author get api call.",
            "example": "6683abde331c041f32c07aea"
          },
          "urlSlug": {
            "type": "string",
            "example": "any-blog-post-url"
          },
          "canonicalLink": {
            "type": "string",
            "example": "https://tryghl.blog/post/testing-unsplash"
          },
          "publishedAt": {
            "type": "string",
            "description": "Provide ISO timestamp",
            "example": "2025-02-05T18:30:47.000Z"
          }
        }
      },
      "BlogPostUpdateResponseWrapperDTO": {
        "required": [
          "updatedBlogPost"
        ],
        "type": "object",
        "properties": {
          "updatedBlogPost": {
            "$ref": "#/components/schemas/BlogPostResponseDTO"
          }
        }
      },
      "CreateBlogPostParams": {
        "required": [
          "title",
          "locationId",
          "blogId",
          "imageUrl",
          "description",
          "rawHTML",
          "status",
          "imageAltText",
          "categories",
          "author",
          "urlSlug",
          "publishedAt"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Your blog title"
          },
          "locationId": {
            "type": "string",
            "example": "Location ID"
          },
          "blogId": {
            "type": "string",
            "description": "You can find the blog id from blog site dashboard link",
            "example": "Blog ID"
          },
          "imageUrl": {
            "type": "string",
            "example": "Image URl"
          },
          "description": {
            "type": "string",
            "example": "A short description"
          },
          "rawHTML": {
            "type": "string",
            "example": "<h1>Your blog content</h1>"
          },
          "status": {
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "SCHEDULED",
              "ARCHIVED"
            ],
            "type": "string",
            "example": "This can be PUBLISHED OR SCHEDULED OR ARCHIVED OR DRAFT"
          },
          "imageAltText": {
            "type": "string",
            "example": "Alt text for your blog image"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "This needs to be array of category ids, which you can get from the category get api call.",
            "example": [
              "9c48df2694a849b6089f9d0d3513efe",
              "6683abde331c041f32c07aee"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "blog",
              "seo"
            ]
          },
          "author": {
            "type": "string",
            "description": "This needs to be author id, which you can get from the author get api call.",
            "example": "6683abde331c041f32c07aea"
          },
          "urlSlug": {
            "type": "string",
            "example": "any-blog-post-url"
          },
          "canonicalLink": {
            "type": "string",
            "example": "https://tryghl.blog/post/testing-unsplash"
          },
          "publishedAt": {
            "type": "string",
            "description": "Provide ISO timestamp",
            "example": "2025-02-05T18:30:47.000Z"
          }
        }
      },
      "BlogPostCreateResponseWrapperDTO": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BlogPostResponseDTO"
          }
        }
      },
      "AuthorsResponseDTO": {
        "required": [
          "authors"
        ],
        "type": "object",
        "properties": {
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorResponseDTO"
            },
            "description": "Array of authors"
          }
        }
      },
      "AuthorResponseDTO": {
        "required": [
          "_id",
          "name",
          "locationId",
          "updatedAt",
          "canonicalLink"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "lMOzIQZne5m6zQ528sT6"
          },
          "name": {
            "type": "string",
            "example": "HighLevel"
          },
          "locationId": {
            "type": "string",
            "example": "lMOzIQZne5m6zQ528sT6"
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-01-03T11:06:35.822Z"
          },
          "canonicalLink": {
            "type": "string",
            "example": "https://tryghl.blog/post/technology"
          }
        }
      },
      "CategoriesResponseDTO": {
        "required": [
          "categories"
        ],
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryResponseDTO"
            },
            "description": "Array of categories"
          }
        }
      },
      "CategoryResponseDTO": {
        "required": [
          "_id",
          "name",
          "locationId",
          "updatedAt",
          "canonicalLink",
          "urlSlug"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "lMOzIQZne5m6zQ528sT6"
          },
          "label": {
            "type": "string",
            "example": "HighLevel"
          },
          "locationId": {
            "type": "string",
            "example": "lMOzIQZne5m6zQ528sT6"
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-01-03T11:06:35.822Z"
          },
          "canonicalLink": {
            "type": "string",
            "example": "https://tryghl.blog/doc/category/agency-growth"
          },
          "urlSlug": {
            "type": "string",
            "example": "agency-growth"
          }
        }
      },
      "BlogGetResponseWrapperDTO": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlogResponseDTO"
            },
            "description": "Object containing response data of blog"
          }
        }
      },
      "BlogResponseDTO": {
        "required": [
          "_id",
          "name"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the blog",
            "example": "lMOzIQZne5m6zQ528sT6"
          },
          "name": {
            "type": "string",
            "description": "Name of the blog",
            "example": "My blog"
          }
        }
      },
      "BlogPostGetResponseWrapperDTO": {
        "required": [
          "blogs"
        ],
        "type": "object",
        "properties": {
          "blogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlogPostResponseDTO"
            },
            "description": "Object containing response data of blog posts"
          }
        }
      },
      "BlogPostResponseDTO": {
        "required": [
          "categories",
          "archived",
          "_id",
          "title",
          "description",
          "imageUrl",
          "status",
          "imageAltText",
          "urlSlug",
          "publishedAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of category IDs associated with the blog post",
            "example": [
              "659ecabc4a37969a2b7cc370",
              "6683abde331c041f32c07aee"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of tags associated with the blog post",
            "example": [
              "Apple",
              "Banana"
            ]
          },
          "archived": {
            "type": "boolean",
            "description": "Indicates whether the blog post is archived",
            "example": false
          },
          "_id": {
            "type": "string",
            "description": "Unique identifier of the blog post",
            "example": "66c381b38be80858b9af62b6"
          },
          "title": {
            "type": "string",
            "description": "Title of the blog post",
            "example": "Banana is good source of energy"
          },
          "description": {
            "type": "string",
            "description": "Description of the blog post",
            "example": "Description"
          },
          "imageUrl": {
            "type": "string",
            "description": "URL of the image associated with the blog post",
            "example": "https://storage.googleapis.com/ghl-test/fACm0Ojm5oC70G3DcFmE/media/66b5aa3b1745b2713a8d033f.jpeg"
          },
          "status": {
            "type": "string",
            "description": "Publication status of the blog post",
            "example": "PUBLISHED"
          },
          "imageAltText": {
            "type": "string",
            "description": "Alternative text for the blog post image",
            "example": "alt"
          },
          "urlSlug": {
            "type": "string",
            "description": "URL slug for the blog post",
            "example": "banana-good-energy"
          },
          "canonicalLink": {
            "type": "string",
            "description": "Canonical link of the blog post",
            "example": "https://blog.chatgpts.agency/post/test-8384"
          },
          "author": {
            "type": "string",
            "description": "Identifier of the author of the blog post",
            "example": "659ec9634a3796e4e47cc360"
          },
          "publishedAt": {
            "type": "string",
            "description": "Timestamp when the blog post was published",
            "example": "2024-08-19T17:14:57.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp when the blog post was last updated",
            "example": "2024-08-19T17:32:36.182Z"
          }
        }
      },
      "VoiceAILanguage": {
        "enum": [
          "en-US",
          "pt-BR",
          "es",
          "fr",
          "de",
          "it",
          "nl-NL",
          "multi"
        ],
        "type": "string",
        "description": "Language code for the agent's speech and understanding. Default: \"en-US\""
      },
      "PatienceLevel": {
        "enum": [
          "low",
          "medium",
          "high"
        ],
        "type": "string",
        "description": "Tolerance level for caller response delays. Default: \"high\""
      },
      "SendPostCallNotificationDTO": {
        "required": [
          "admins",
          "allUsers",
          "contactAssignedUser",
          "specificUsers",
          "customEmails"
        ],
        "type": "object",
        "properties": {
          "admins": {
            "type": "boolean",
            "description": "Enables post-call notifications to all admin users in the location. Default: true",
            "example": true
          },
          "allUsers": {
            "type": "boolean",
            "description": "Enables post-call notifications to all users in the location. Default: false",
            "example": false
          },
          "contactAssignedUser": {
            "type": "boolean",
            "description": "Enables post-call notifications to the user assigned to the contact. Default: false",
            "example": false
          },
          "specificUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of specific user IDs to receive post-call notifications. Default: []",
            "example": [
              "user_507f1f77bcf86cd799439011"
            ]
          },
          "customEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of custom email addresses to receive post-call notifications. Default: []",
            "example": [
              "manager@company.com"
            ]
          }
        }
      },
      "IntervalDTO": {
        "required": [
          "startHour",
          "endHour",
          "startMinute",
          "endMinute"
        ],
        "type": "object",
        "properties": {
          "startHour": {
            "maximum": 23,
            "minimum": 0,
            "type": "number",
            "description": "Starting hour of the working interval in 24-hour format (0-23)",
            "example": 9
          },
          "endHour": {
            "maximum": 23,
            "minimum": 0,
            "type": "number",
            "description": "Ending hour of the working interval in 24-hour format (0-23)",
            "example": 17
          },
          "startMinute": {
            "maximum": 59,
            "minimum": 0,
            "type": "number",
            "description": "Starting minute of the working interval (0-59)",
            "example": 0
          },
          "endMinute": {
            "maximum": 59,
            "minimum": 0,
            "type": "number",
            "description": "Ending minute of the working interval (0-59)",
            "example": 30
          }
        }
      },
      "AgentWorkingHoursDTO": {
        "required": [
          "dayOfTheWeek",
          "intervals"
        ],
        "type": "object",
        "properties": {
          "dayOfTheWeek": {
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            "type": "number",
            "description": "Day of the week for this working hours configuration (Monday=1 to Sunday=7)",
            "example": 1
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntervalDTO"
            },
            "description": "Array of time intervals when the agent is available on this day",
            "example": [
              {
                "startHour": 9,
                "startMinute": 0,
                "endHour": 17,
                "endMinute": 30
              }
            ]
          }
        }
      },
      "TranslationDTO": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enables language translation for agent conversations. Default: false",
            "example": false
          },
          "language": {
            "type": "string",
            "description": "Target language code for translation (e.g., \"es\" for Spanish, \"fr\" for French).",
            "example": "es"
          }
        }
      },
      "AgentCreationRequestDTO": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Unique identifier for the location where this agent will operate",
            "example": "LOC123456789ABCDEF"
          },
          "agentName": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "Display name for the voice AI agent, between 1-40 characters. Default: \"My Agent {random 3 digit number}\"",
            "example": "Customer Support Agent"
          },
          "businessName": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the business this agent represents. Default: Uses location name",
            "example": "Acme Corporation"
          },
          "welcomeMessage": {
            "maxLength": 190,
            "minLength": 1,
            "type": "string",
            "description": "Initial greeting spoken when the agent answers calls. Default: Auto generated",
            "example": "Hello! Thank you for calling Acme Corporation. How can I assist you today?"
          },
          "agentPrompt": {
            "type": "string",
            "description": "Custom instructions defining the agent's behavior and personality. Default: Basic prompt generated automatically",
            "example": "You are a helpful customer service representative. Always be polite and professional."
          },
          "voiceId": {
            "type": "string",
            "description": "Identifier for the speech synthesis voice from available voice options. Default: Auto generated",
            "example": "507f1f77bcf86cd799439011"
          },
          "language": {
            "$ref": "#/components/schemas/VoiceAILanguage"
          },
          "patienceLevel": {
            "$ref": "#/components/schemas/PatienceLevel"
          },
          "maxCallDuration": {
            "maximum": 900,
            "minimum": 180,
            "type": "number",
            "description": "Maximum call duration in seconds, between 180-900 (3-15 minutes). Default: 300 seconds (5 minutes)",
            "example": 600
          },
          "sendUserIdleReminders": {
            "type": "boolean",
            "description": "Enables automatic reminders when callers are silent. Default: true",
            "example": true
          },
          "reminderAfterIdleTimeSeconds": {
            "maximum": 20,
            "minimum": 1,
            "type": "number",
            "description": "Seconds to wait before sending idle reminders, between 1-20. Default: 8 seconds",
            "example": 5
          },
          "inboundNumber": {
            "type": "string",
            "description": "Phone number for receiving inbound calls to this agent. Default: null",
            "example": "+1234567890"
          },
          "numberPoolId": {
            "type": "string",
            "description": "Identifier for the number pool managing phone number allocation. Default: null",
            "example": "pool_507f1f77bcf86cd799439011"
          },
          "callEndWorkflowIds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of workflow IDs to trigger automatically when calls end. Default: []",
            "example": [
              "wf_507f1f77bcf86cd799439011",
              "wf_507f1f77bcf86cd799439012"
            ]
          },
          "sendPostCallNotificationTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SendPostCallNotificationDTO"
              }
            ],
            "description": "Configuration for post-call email notifications to various recipients. Default: []"
          },
          "agentWorkingHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentWorkingHoursDTO"
            },
            "description": "Time intervals defining when the agent accepts calls, organized by day of week. Default: [] (available 24/7)"
          },
          "timezone": {
            "pattern": "^[A-Za-z_]+/[A-Za-z_]+$",
            "type": "string",
            "description": "IANA timezone identifier affecting working hours and scheduling. Default: Location timezone",
            "example": "America/New_York"
          },
          "isAgentAsBackupDisabled": {
            "type": "boolean",
            "description": "Prevents this agent from being used as a fallback option. Default: false (Available as backup agent)",
            "example": false
          },
          "translation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationDTO"
              }
            ],
            "description": "Language translation settings including enablement flag and target language code. Rules: (1) translation.enabled can only be true if the agent's language is not en-US; (2) when enabled, translation.language must be either the agent's language or en-US; (3) when enabled, translation.language is required."
          }
        }
      },
      "SendPostCallNotificationSchema": {
        "type": "object",
        "properties": {
          "admins": {
            "type": "boolean",
            "description": "Send notifications to admins",
            "example": true
          },
          "allUsers": {
            "type": "boolean",
            "description": "Send notifications to all users",
            "example": false
          },
          "contactAssignedUser": {
            "type": "boolean",
            "description": "Send notifications to contact assigned user",
            "example": false
          },
          "specificUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specific user IDs to notify"
          },
          "customEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Custom email addresses to notify"
          }
        }
      },
      "TranslationSchema": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether translation is enabled",
            "example": false
          },
          "language": {
            "type": "string",
            "description": "Translation language code",
            "example": "es"
          }
        }
      },
      "CreateAgentResponseDTO": {
        "required": [
          "id",
          "locationId",
          "agentName",
          "businessName",
          "welcomeMessage",
          "agentPrompt",
          "voiceId",
          "language",
          "patienceLevel",
          "maxCallDuration",
          "sendUserIdleReminders",
          "reminderAfterIdleTimeSeconds",
          "timezone",
          "isAgentAsBackupDisabled"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the created agent",
            "example": "507f1f77bcf86cd799439011"
          },
          "locationId": {
            "type": "string",
            "description": "Unique identifier for the location where this agent operates",
            "example": "LOC123456789ABCDEF"
          },
          "agentName": {
            "type": "string",
            "description": "Display name of the voice AI agent",
            "example": "Customer Support Agent"
          },
          "businessName": {
            "type": "string",
            "description": "Name of the business this agent represents",
            "example": "Acme Corporation"
          },
          "welcomeMessage": {
            "type": "string",
            "description": "Greeting message spoken when the agent answers calls",
            "example": "Hello! Thank you for calling. How can I assist you today?"
          },
          "agentPrompt": {
            "type": "string",
            "description": "Custom instructions defining the agent's behavior",
            "example": "You are a helpful customer service representative."
          },
          "voiceId": {
            "type": "string",
            "description": "Identifier for the speech synthesis voice being used",
            "example": "507f1f77bcf86cd799439011"
          },
          "language": {
            "type": "string",
            "description": "Language code for the agent's speech and understanding",
            "example": "en-US"
          },
          "patienceLevel": {
            "type": "string",
            "description": "Current tolerance level for caller response delays",
            "example": "medium"
          },
          "maxCallDuration": {
            "maximum": 900,
            "minimum": 180,
            "type": "number",
            "description": "Maximum call duration in seconds, between 180-900",
            "example": 600
          },
          "sendUserIdleReminders": {
            "type": "boolean",
            "description": "Indicates whether automatic idle reminders are enabled",
            "example": true
          },
          "reminderAfterIdleTimeSeconds": {
            "maximum": 20,
            "minimum": 1,
            "type": "number",
            "description": "Seconds to wait before sending idle reminders, between 1-20",
            "example": 5
          },
          "inboundNumber": {
            "type": "string",
            "description": "Phone number for receiving inbound calls",
            "example": "+1234567890"
          },
          "numberPoolId": {
            "type": "string",
            "description": "Identifier for the number pool managing this agent's phone allocation",
            "example": "pool_507f1f77bcf86cd799439011"
          },
          "callEndWorkflowIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of workflow IDs triggered automatically when calls end"
          },
          "sendPostCallNotificationTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SendPostCallNotificationSchema"
              }
            ],
            "description": "Current post-call notification settings including recipient configuration"
          },
          "agentWorkingHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentWorkingHoursDTO"
            },
            "description": "Time intervals when the agent accepts calls, organized by day of week"
          },
          "timezone": {
            "type": "string",
            "description": "IANA timezone identifier for working hours and scheduling",
            "example": "America/New_York"
          },
          "isAgentAsBackupDisabled": {
            "type": "boolean",
            "description": "Indicates whether this agent is excluded from backup scenarios",
            "example": false
          },
          "translation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationSchema"
              }
            ],
            "description": "Current language translation settings including enablement status and target language"
          }
        }
      },
      "PatchAgentDTO": {
        "type": "object",
        "properties": {
          "agentName": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "Display name for the voice AI agent, between 1-40 characters. Default: \"My Agent {random 3 digit number}\"",
            "example": "Customer Support Agent"
          },
          "businessName": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the business this agent represents. Default: Uses location name",
            "example": "Acme Corporation"
          },
          "welcomeMessage": {
            "maxLength": 190,
            "minLength": 1,
            "type": "string",
            "description": "Initial greeting spoken when the agent answers calls. Default: Auto generated",
            "example": "Hello! Thank you for calling Acme Corporation. How can I assist you today?"
          },
          "agentPrompt": {
            "type": "string",
            "description": "Custom instructions defining the agent's behavior and personality. Default: Basic prompt generated automatically",
            "example": "You are a helpful customer service representative. Always be polite and professional."
          },
          "voiceId": {
            "type": "string",
            "description": "Identifier for the speech synthesis voice from available voice options. Default: Auto generated",
            "example": "507f1f77bcf86cd799439011"
          },
          "language": {
            "$ref": "#/components/schemas/VoiceAILanguage"
          },
          "patienceLevel": {
            "$ref": "#/components/schemas/PatienceLevel"
          },
          "maxCallDuration": {
            "maximum": 900,
            "minimum": 180,
            "type": "number",
            "description": "Maximum call duration in seconds, between 180-900 (3-15 minutes). Default: 300 seconds (5 minutes)",
            "example": 600
          },
          "sendUserIdleReminders": {
            "type": "boolean",
            "description": "Enables automatic reminders when callers are silent. Default: true",
            "example": true
          },
          "reminderAfterIdleTimeSeconds": {
            "maximum": 20,
            "minimum": 1,
            "type": "number",
            "description": "Seconds to wait before sending idle reminders, between 1-20. Default: 8 seconds",
            "example": 5
          },
          "inboundNumber": {
            "type": "string",
            "description": "Phone number for receiving inbound calls to this agent. Default: null",
            "example": "+1234567890"
          },
          "numberPoolId": {
            "type": "string",
            "description": "Identifier for the number pool managing phone number allocation. Default: null",
            "example": "pool_507f1f77bcf86cd799439011"
          },
          "callEndWorkflowIds": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of workflow IDs to trigger automatically when calls end. Default: []",
            "example": [
              "wf_507f1f77bcf86cd799439011",
              "wf_507f1f77bcf86cd799439012"
            ]
          },
          "sendPostCallNotificationTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SendPostCallNotificationDTO"
              }
            ],
            "description": "Configuration for post-call email notifications to various recipients. Default: []"
          },
          "agentWorkingHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentWorkingHoursDTO"
            },
            "description": "Time intervals defining when the agent accepts calls, organized by day of week. Default: [] (available 24/7)"
          },
          "timezone": {
            "pattern": "^[A-Za-z_]+/[A-Za-z_]+$",
            "type": "string",
            "description": "IANA timezone identifier affecting working hours and scheduling. Default: Location timezone",
            "example": "America/New_York"
          },
          "isAgentAsBackupDisabled": {
            "type": "boolean",
            "description": "Prevents this agent from being used as a fallback option. Default: false (Available as backup agent)",
            "example": false
          },
          "translation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationDTO"
              }
            ],
            "description": "Language translation settings including enablement flag and target language code. Rules: (1) translation.enabled can only be true if the agent's language is not en-US; (2) when enabled, translation.language must be either the agent's language or en-US; (3) when enabled, translation.language is required."
          }
        }
      },
      "PatchAgentResponseDTO": {
        "required": [
          "id",
          "locationId",
          "agentName",
          "businessName",
          "welcomeMessage",
          "agentPrompt",
          "voiceId",
          "language",
          "patienceLevel",
          "maxCallDuration",
          "sendUserIdleReminders",
          "reminderAfterIdleTimeSeconds",
          "timezone",
          "isAgentAsBackupDisabled"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the created agent",
            "example": "507f1f77bcf86cd799439011"
          },
          "locationId": {
            "type": "string",
            "description": "Unique identifier for the location where this agent operates",
            "example": "LOC123456789ABCDEF"
          },
          "agentName": {
            "type": "string",
            "description": "Display name of the voice AI agent",
            "example": "Customer Support Agent"
          },
          "businessName": {
            "type": "string",
            "description": "Name of the business this agent represents",
            "example": "Acme Corporation"
          },
          "welcomeMessage": {
            "type": "string",
            "description": "Greeting message spoken when the agent answers calls",
            "example": "Hello! Thank you for calling. How can I assist you today?"
          },
          "agentPrompt": {
            "type": "string",
            "description": "Custom instructions defining the agent's behavior",
            "example": "You are a helpful customer service representative."
          },
          "voiceId": {
            "type": "string",
            "description": "Identifier for the speech synthesis voice being used",
            "example": "507f1f77bcf86cd799439011"
          },
          "language": {
            "type": "string",
            "description": "Language code for the agent's speech and understanding",
            "example": "en-US"
          },
          "patienceLevel": {
            "type": "string",
            "description": "Current tolerance level for caller response delays",
            "example": "medium"
          },
          "maxCallDuration": {
            "maximum": 900,
            "minimum": 180,
            "type": "number",
            "description": "Maximum call duration in seconds, between 180-900",
            "example": 600
          },
          "sendUserIdleReminders": {
            "type": "boolean",
            "description": "Indicates whether automatic idle reminders are enabled",
            "example": true
          },
          "reminderAfterIdleTimeSeconds": {
            "maximum": 20,
            "minimum": 1,
            "type": "number",
            "description": "Seconds to wait before sending idle reminders, between 1-20",
            "example": 5
          },
          "inboundNumber": {
            "type": "string",
            "description": "Phone number for receiving inbound calls",
            "example": "+1234567890"
          },
          "numberPoolId": {
            "type": "string",
            "description": "Identifier for the number pool managing this agent's phone allocation",
            "example": "pool_507f1f77bcf86cd799439011"
          },
          "callEndWorkflowIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of workflow IDs triggered automatically when calls end"
          },
          "sendPostCallNotificationTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SendPostCallNotificationSchema"
              }
            ],
            "description": "Current post-call notification settings including recipient configuration"
          },
          "agentWorkingHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentWorkingHoursDTO"
            },
            "description": "Time intervals when the agent accepts calls, organized by day of week"
          },
          "timezone": {
            "type": "string",
            "description": "IANA timezone identifier for working hours and scheduling",
            "example": "America/New_York"
          },
          "isAgentAsBackupDisabled": {
            "type": "boolean",
            "description": "Indicates whether this agent is excluded from backup scenarios",
            "example": false
          },
          "translation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationSchema"
              }
            ],
            "description": "Current language translation settings including enablement status and target language"
          }
        }
      },
      "AgentActionResponseDTO": {
        "required": [
          "id",
          "actionType",
          "name",
          "actionParameters"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this action",
            "example": "507f1f77bcf86cd799439011"
          },
          "actionType": {
            "enum": [
              "CALL_TRANSFER",
              "DATA_EXTRACTION",
              "IN_CALL_DATA_EXTRACTION",
              "WORKFLOW_TRIGGER",
              "SMS",
              "APPOINTMENT_BOOKING",
              "CUSTOM_ACTION"
            ],
            "type": "string",
            "description": "Type of action",
            "example": "CALL_TRANSFER"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for this action",
            "example": "Transfer to Manager"
          },
          "actionParameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CallTransferActionParameters"
              },
              {
                "$ref": "#/components/schemas/DataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/InCallDataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/WorkflowTriggerParameters"
              },
              {
                "$ref": "#/components/schemas/SMSParameters"
              },
              {
                "$ref": "#/components/schemas/AppointmentBookingActionParameters"
              },
              {
                "$ref": "#/components/schemas/CustomActionParameters"
              }
            ],
            "description": "Action parameters - structure varies by actionType"
          }
        }
      },
      "GetAgentResponseDTO": {
        "required": [
          "id",
          "locationId",
          "agentName",
          "businessName",
          "welcomeMessage",
          "agentPrompt",
          "voiceId",
          "language",
          "patienceLevel",
          "maxCallDuration",
          "sendUserIdleReminders",
          "reminderAfterIdleTimeSeconds",
          "timezone",
          "isAgentAsBackupDisabled",
          "actions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the created agent",
            "example": "507f1f77bcf86cd799439011"
          },
          "locationId": {
            "type": "string",
            "description": "Unique identifier for the location where this agent operates",
            "example": "LOC123456789ABCDEF"
          },
          "agentName": {
            "type": "string",
            "description": "Display name of the voice AI agent",
            "example": "Customer Support Agent"
          },
          "businessName": {
            "type": "string",
            "description": "Name of the business this agent represents",
            "example": "Acme Corporation"
          },
          "welcomeMessage": {
            "type": "string",
            "description": "Greeting message spoken when the agent answers calls",
            "example": "Hello! Thank you for calling. How can I assist you today?"
          },
          "agentPrompt": {
            "type": "string",
            "description": "Custom instructions defining the agent's behavior",
            "example": "You are a helpful customer service representative."
          },
          "voiceId": {
            "type": "string",
            "description": "Identifier for the speech synthesis voice being used",
            "example": "507f1f77bcf86cd799439011"
          },
          "language": {
            "type": "string",
            "description": "Language code for the agent's speech and understanding",
            "example": "en-US"
          },
          "patienceLevel": {
            "type": "string",
            "description": "Current tolerance level for caller response delays",
            "example": "medium"
          },
          "maxCallDuration": {
            "maximum": 900,
            "minimum": 180,
            "type": "number",
            "description": "Maximum call duration in seconds, between 180-900",
            "example": 600
          },
          "sendUserIdleReminders": {
            "type": "boolean",
            "description": "Indicates whether automatic idle reminders are enabled",
            "example": true
          },
          "reminderAfterIdleTimeSeconds": {
            "maximum": 20,
            "minimum": 1,
            "type": "number",
            "description": "Seconds to wait before sending idle reminders, between 1-20",
            "example": 5
          },
          "inboundNumber": {
            "type": "string",
            "description": "Phone number for receiving inbound calls",
            "example": "+1234567890"
          },
          "numberPoolId": {
            "type": "string",
            "description": "Identifier for the number pool managing this agent's phone allocation",
            "example": "pool_507f1f77bcf86cd799439011"
          },
          "callEndWorkflowIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of workflow IDs triggered automatically when calls end"
          },
          "sendPostCallNotificationTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SendPostCallNotificationSchema"
              }
            ],
            "description": "Current post-call notification settings including recipient configuration"
          },
          "agentWorkingHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentWorkingHoursDTO"
            },
            "description": "Time intervals when the agent accepts calls, organized by day of week"
          },
          "timezone": {
            "type": "string",
            "description": "IANA timezone identifier for working hours and scheduling",
            "example": "America/New_York"
          },
          "isAgentAsBackupDisabled": {
            "type": "boolean",
            "description": "Indicates whether this agent is excluded from backup scenarios",
            "example": false
          },
          "translation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationSchema"
              }
            ],
            "description": "Current language translation settings including enablement status and target language"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentActionResponseDTO"
            },
            "description": "Raw actions configured for this agent with complete actionParameters structure",
            "example": [
              {
                "_id": "507f1f77bcf86cd799439011",
                "actionType": "CALL_TRANSFER",
                "name": "Transfer to Manager",
                "actionParameters": {
                  "triggerPrompt": "When caller asks for manager",
                  "triggerMessage": "Let me transfer you",
                  "transferToType": "number",
                  "transferToValue": "+1234567890"
                }
              }
            ]
          }
        }
      },
      "GetAgentsResponseDTO": {
        "required": [
          "total",
          "page",
          "pageSize",
          "agents"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of items",
            "example": 150
          },
          "page": {
            "type": "number",
            "description": "Page number starting from 1",
            "example": 2
          },
          "pageSize": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          },
          "agents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAgentResponseDTO"
            }
          }
        }
      },
      "CallTransferActionParameters": {
        "required": [
          "triggerPrompt",
          "transferToType",
          "transferToValue"
        ],
        "type": "object",
        "properties": {
          "triggerPrompt": {
            "type": "string",
            "description": "When to trigger this action during the call",
            "example": "When the caller asks to speak to a manager"
          },
          "transferToType": {
            "enum": [
              "number"
            ],
            "type": "string",
            "description": "Type of transfer destination (currently only \"number\" is supported)",
            "example": "number"
          },
          "transferToValue": {
            "type": "string",
            "description": "Phone number to transfer to. Must start with +, include country code, contain only numbers, and be 11-16 characters long (e.g., +12345678901).",
            "example": "+12345678901"
          },
          "triggerMessage": {
            "type": "string",
            "description": "Message to tell the caller before transferring",
            "example": "Let me transfer you to a manager right away"
          },
          "hearWhisperMessage": {
            "type": "boolean",
            "description": "Whether to play whisper message to the receiving party",
            "example": true
          }
        }
      },
      "DataExtractionActionParameters": {
        "required": [
          "contactFieldId",
          "description",
          "examples"
        ],
        "type": "object",
        "properties": {
          "contactFieldId": {
            "type": "string",
            "description": "ID of the contact field to be updated with the extracted data",
            "example": "507f1f77bcf86cd799439011"
          },
          "description": {
            "type": "string",
            "description": "Description of what data to extract",
            "example": "Caller's phone number"
          },
          "examples": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Example values to help Agent understand the expected format. At least one example is required, maximum 5 examples allowed.",
            "example": [
              "+1234567890",
              "+9876543210"
            ]
          },
          "overwriteExistingValue": {
            "type": "boolean",
            "description": "Whether to overwrite existing field value if already set, default is false",
            "default": false,
            "example": false
          }
        }
      },
      "InCallDataExtractionActionParameters": {
        "required": [
          "contactFieldId",
          "description",
          "examples"
        ],
        "type": "object",
        "properties": {
          "contactFieldId": {
            "type": "string",
            "description": "ID of the contact field to be updated with the extracted data",
            "example": "507f1f77bcf86cd799439011"
          },
          "description": {
            "type": "string",
            "description": "Description of what data to extract",
            "example": "Caller's phone number"
          },
          "examples": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Example values to help Agent understand the expected format. At least one example is required, maximum 5 examples allowed.",
            "example": [
              "+1234567890",
              "+9876543210"
            ]
          },
          "overwriteExistingValue": {
            "type": "boolean",
            "description": "Whether to overwrite existing field value if already set, default is false",
            "default": false,
            "example": false
          }
        }
      },
      "WorkflowTriggerParameters": {
        "required": [
          "triggerPrompt",
          "triggerMessage",
          "workflowId"
        ],
        "type": "object",
        "properties": {
          "triggerPrompt": {
            "type": "string",
            "description": "When to trigger this workflow",
            "example": "When caller requests a quote"
          },
          "triggerMessage": {
            "type": "string",
            "description": "Message to tell the caller",
            "example": "Let me start that process for you"
          },
          "workflowId": {
            "type": "string",
            "description": "Workflow ID to trigger",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "SMSParameters": {
        "required": [
          "triggerPrompt",
          "triggerMessage",
          "messageBody"
        ],
        "type": "object",
        "properties": {
          "triggerPrompt": {
            "type": "string",
            "description": "When to send the SMS",
            "example": "When caller asks for booking confirmation"
          },
          "triggerMessage": {
            "type": "string",
            "description": "Message to tell the caller",
            "example": "I'll send you a confirmation text"
          },
          "messageBody": {
            "type": "string",
            "description": "SMS message content to send",
            "example": "Your appointment is confirmed for tomorrow at 2 PM"
          }
        }
      },
      "AppointmentBookingActionParameters": {
        "required": [
          "calendarId",
          "daysOfOfferingDates",
          "slotsPerDay",
          "hoursBetweenSlots"
        ],
        "type": "object",
        "properties": {
          "calendarId": {
            "type": "string",
            "description": "Calendar ID to book appointments in",
            "example": "507f1f77bcf86cd799439011"
          },
          "daysOfOfferingDates": {
            "type": "number",
            "description": "Number of days ahead to offer booking dates",
            "example": 3
          },
          "slotsPerDay": {
            "type": "number",
            "description": "Number of available slots per day",
            "example": 3
          },
          "hoursBetweenSlots": {
            "type": "number",
            "description": "Hours between available slots",
            "example": 1
          }
        }
      },
      "CustomActionHeaderDTO": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "HTTP header name",
            "example": "id"
          },
          "value": {
            "type": "string",
            "description": "HTTP header value",
            "example": "1234567890"
          }
        }
      },
      "CustomActionParameterDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Parameter name",
            "example": "orderId"
          },
          "description": {
            "type": "string",
            "description": "Parameter description",
            "example": "Order ID to look up"
          },
          "type": {
            "type": "string",
            "description": "Parameter type",
            "example": "string"
          },
          "example": {
            "type": "string",
            "description": "Example parameter value",
            "example": "ORD-12345"
          }
        }
      },
      "CustomActionApiDetailsDTO": {
        "required": [
          "url",
          "method"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "API endpoint URL",
            "example": "https://api.example.com/orders"
          },
          "method": {
            "enum": [
              "POST",
              "GET"
            ],
            "type": "string",
            "description": "HTTP method",
            "example": "GET"
          },
          "authenticationRequired": {
            "type": "boolean",
            "description": "Whether authentication is required",
            "example": true
          },
          "authenticationValue": {
            "type": "string",
            "description": "Authentication token or API key (required if authenticationRequired is true)",
            "example": "token123"
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomActionHeaderDTO"
            },
            "description": "HTTP headers to include"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomActionParameterDTO"
            },
            "description": "API parameters to send"
          }
        }
      },
      "CustomActionParameters": {
        "required": [
          "triggerPrompt",
          "apiDetails"
        ],
        "type": "object",
        "properties": {
          "triggerPrompt": {
            "type": "string",
            "description": "When to call the custom API",
            "example": "When caller provides order number"
          },
          "triggerMessage": {
            "type": "string",
            "description": "Message to tell the caller",
            "example": "Let me check that order status"
          },
          "apiDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomActionApiDetailsDTO"
              }
            ],
            "description": "API endpoint configuration"
          },
          "selectedPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Selected response paths to extract from API response. Required: at least 1 value if the method is GET. Should be empty if the method is POST.",
            "example": [
              "data.orderId",
              "status"
            ]
          }
        }
      },
      "KnowledgeBaseParameters": {
        "required": [
          "triggerMessage",
          "knowledgeBaseId"
        ],
        "type": "object",
        "properties": {
          "triggerPrompt": {
            "type": "string",
            "description": "When to query the knowledge base",
            "example": "When caller asks about pricing"
          },
          "triggerMessage": {
            "type": "string",
            "description": "Message to tell the caller",
            "example": "Let me look that up for you"
          },
          "knowledgeBaseId": {
            "type": "string",
            "description": "Knowledge base ID to query",
            "example": "507f1f77bcf86cd799439011"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomActionParameterDTO"
            },
            "description": "Additional parameters for the knowledge base query"
          }
        }
      },
      "CallActionSchema": {
        "required": [
          "actionType",
          "actionName"
        ],
        "type": "object",
        "properties": {
          "actionId": {
            "type": "string",
            "description": "Action ID reference",
            "example": "507f1f77bcf86cd799439015"
          },
          "actionType": {
            "enum": [
              "CALL_TRANSFER",
              "DATA_EXTRACTION",
              "IN_CALL_DATA_EXTRACTION",
              "WORKFLOW_TRIGGER",
              "SMS",
              "APPOINTMENT_BOOKING",
              "CUSTOM_ACTION"
            ],
            "type": "string",
            "description": "Action type",
            "example": "SMS"
          },
          "actionName": {
            "type": "string",
            "description": "Action name",
            "example": "Send SMS Confirmation"
          },
          "description": {
            "type": "string",
            "description": "Action description",
            "example": "When caller asks for booking confirmation"
          },
          "actionParameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CallTransferActionParameters"
              },
              {
                "$ref": "#/components/schemas/DataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/InCallDataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/WorkflowTriggerParameters"
              },
              {
                "$ref": "#/components/schemas/SMSParameters"
              },
              {
                "$ref": "#/components/schemas/AppointmentBookingActionParameters"
              },
              {
                "$ref": "#/components/schemas/CustomActionParameters"
              },
              {
                "$ref": "#/components/schemas/KnowledgeBaseParameters"
              }
            ],
            "description": "Action parameters - structure varies by actionType"
          },
          "executedAt": {
            "type": "string",
            "description": "When the action was executed",
            "format": "date-time",
            "example": "2024-01-15T10:32:00.000Z"
          },
          "triggerReceivedAt": {
            "type": "string",
            "description": "When the trigger was received",
            "format": "date-time",
            "example": "2024-01-15T10:31:45.000Z"
          }
        }
      },
      "ExtractedDataSchema": {
        "type": "object"
      },
      "CallLogDTO": {
        "required": [
          "id",
          "agentId",
          "isAgentDeleted",
          "createdAt",
          "duration",
          "trialCall",
          "executedCallActions",
          "summary",
          "transcript"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the call",
            "example": "507f1f77bcf86cd799439011"
          },
          "contactId": {
            "type": "string",
            "description": "Associated contact ID",
            "example": "507f1f77bcf86cd799439012"
          },
          "agentId": {
            "type": "string",
            "description": "Agent ID associated with the call",
            "example": "507f1f77bcf86cd799439013"
          },
          "isAgentDeleted": {
            "type": "boolean",
            "description": "Whether the agent is deleted",
            "example": false
          },
          "fromNumber": {
            "type": "string",
            "description": "Caller phone number",
            "example": "+1234567890"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when the call was created",
            "format": "date-time",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "duration": {
            "type": "number",
            "description": "Call duration in seconds",
            "example": 180
          },
          "trialCall": {
            "type": "boolean",
            "description": "Whether this call was a trial call",
            "example": false
          },
          "executedCallActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallActionSchema"
            },
            "description": "Actions performed during the call",
            "example": [
              {
                "actionId": "507f1f77bcf86cd799439015",
                "actionType": "CALL_TRANSFER",
                "actionName": "Transfer to Manager",
                "description": "Transfers call to a manager when customer requests escalation",
                "actionParameters": {
                  "transferToType": "number",
                  "transferToValue": "+12345678901",
                  "triggerMessage": "Let me transfer you to a manager right away",
                  "hearWhisperMessage": true
                },
                "executedAt": "2024-01-15T10:32:00.000Z"
              },
              {
                "actionId": "507f1f77bcf86cd799439016",
                "actionType": "SMS",
                "actionName": "Send Confirmation SMS",
                "description": "Sends SMS confirmation to customer",
                "actionParameters": {
                  "triggerPrompt": "When caller asks for booking confirmation",
                  "triggerMessage": "I'll send you a confirmation text",
                  "messageBody": "Your appointment is confirmed for tomorrow at 2 PM"
                },
                "executedAt": "2024-01-15T10:33:30.000Z"
              },
              {
                "actionId": "507f1f77bcf86cd799439017",
                "actionType": "DATA_EXTRACTION",
                "actionName": "Extract Phone Number",
                "description": "Extracts customer phone number for contact record",
                "actionParameters": {
                  "contactFieldId": "507f1f77bcf86cd799439018",
                  "description": "Customer's phone number",
                  "examples": [
                    "+1234567890",
                    "+9876543210"
                  ],
                  "overwriteExistingValue": false
                },
                "executedAt": "2024-01-15T10:34:15.000Z"
              },
              {
                "actionId": "507f1f77bcf86cd799439019",
                "actionType": "WORKFLOW_TRIGGER",
                "actionName": "Start Follow-up Workflow",
                "description": "Triggers follow-up workflow for lead nurturing",
                "actionParameters": {
                  "triggerPrompt": "When caller requests a quote",
                  "triggerMessage": "Let me start that process for you",
                  "workflowId": "507f1f77bcf86cd799439020"
                },
                "executedAt": "2024-01-15T10:35:00.000Z"
              },
              {
                "actionId": "507f1f77bcf86cd799439021",
                "actionType": "APPOINTMENT_BOOKING",
                "actionName": "Book Consultation",
                "description": "Books consultation appointment with sales team",
                "actionParameters": {
                  "calendarId": "507f1f77bcf86cd799439022",
                  "daysOfOfferingDates": 3,
                  "slotsPerDay": 3,
                  "hoursBetweenSlots": 1
                },
                "executedAt": "2024-01-15T10:36:45.000Z"
              },
              {
                "actionId": "507f1f77bcf86cd799439023",
                "actionType": "CUSTOM_ACTION",
                "actionName": "Check Order Status",
                "description": "Checks order status via external API",
                "actionParameters": {
                  "triggerPrompt": "When caller provides order number",
                  "triggerMessage": "Let me check that order status",
                  "apiDetails": {
                    "url": "https://api.example.com/orders",
                    "method": "GET",
                    "authenticationRequired": true,
                    "authenticationValue": "token123",
                    "headers": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "parameters": [
                      {
                        "name": "orderId",
                        "description": "Order ID to look up",
                        "type": "string",
                        "example": "ORD-12345"
                      }
                    ]
                  },
                  "responsePathsToExtract": [
                    "data.orderId",
                    "status"
                  ]
                },
                "executedAt": "2024-01-15T10:37:20.000Z"
              },
              {
                "actionId": "507f1f77bcf86cd799439024",
                "actionType": "IN_CALL_DATA_EXTRACTION",
                "actionName": "Extract Email During Call",
                "description": "Extracts customer email during the call",
                "actionParameters": {
                  "contactFieldId": "507f1f77bcf86cd799439025",
                  "description": "Customer's email address",
                  "examples": [
                    "john@example.com",
                    "jane@company.com"
                  ],
                  "overwriteExistingValue": true
                },
                "executedAt": "2024-01-15T10:31:45.000Z"
              },
              {
                "actionId": "507f1f77bcf86cd799439026",
                "actionType": "KNOWLEDGE_BASE",
                "actionName": "Query Product Info",
                "description": "Queries knowledge base for product information",
                "actionParameters": {
                  "triggerPrompt": "When caller asks about pricing",
                  "triggerMessage": "Let me look that up for you",
                  "knowledgeBaseId": "507f1f77bcf86cd799439027",
                  "parameters": [
                    {
                      "name": "category",
                      "description": "Product category to search",
                      "type": "string",
                      "example": "pricing"
                    }
                  ]
                },
                "executedAt": "2024-01-15T10:38:10.000Z"
              }
            ]
          },
          "summary": {
            "type": "string",
            "description": "Call summary",
            "example": "Customer called to inquire about product pricing and was transferred to sales team."
          },
          "transcript": {
            "type": "string",
            "description": "Call transcript",
            "example": "bot: Hello, how can I help you today?\nhuman: I would like to know about your pricing..."
          },
          "translation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationSchema"
              }
            ],
            "description": "Transcript translation details",
            "example": {
              "translatedTranscript": "Translated version of the call transcript"
            }
          },
          "extractedData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtractedDataSchema"
              }
            ],
            "description": "Dynamic data extracted from the call based on agent configuration",
            "example": {
              "phoneNumber": "+1234567890",
              "customerName": "John Doe",
              "email": "john.doe@example.com",
              "companyName": "Acme Corp",
              "customField1": "Custom value",
              "customField2": "Another value"
            }
          },
          "messageId": {
            "type": "string",
            "description": "Message identifier associated with the call",
            "example": "507f1f77bcf86cd799439014"
          }
        }
      },
      "CallLogsResponseDTO": {
        "required": [
          "total",
          "page",
          "pageSize",
          "callLogs"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of items",
            "example": 150
          },
          "page": {
            "type": "number",
            "description": "Page number starting from 1",
            "example": 2
          },
          "pageSize": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          },
          "callLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallLogDTO"
            },
            "description": "Array of call logs"
          }
        }
      },
      "CreateSingleActionDTO": {
        "required": [
          "agentId",
          "locationId",
          "actionType",
          "name",
          "actionParameters"
        ],
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "Agent ID to attach the action to",
            "example": "507f1f77bcf86cd799439011"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "507f1f77bcf86cd799439012"
          },
          "actionType": {
            "enum": [
              "CALL_TRANSFER",
              "DATA_EXTRACTION",
              "IN_CALL_DATA_EXTRACTION",
              "WORKFLOW_TRIGGER",
              "SMS",
              "APPOINTMENT_BOOKING",
              "CUSTOM_ACTION"
            ],
            "type": "string",
            "description": "Type of action",
            "example": "CALL_TRANSFER"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for this action",
            "example": "Transfer to Manager"
          },
          "actionParameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CallTransferActionParameters"
              },
              {
                "$ref": "#/components/schemas/DataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/InCallDataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/WorkflowTriggerParameters"
              },
              {
                "$ref": "#/components/schemas/SMSParameters"
              },
              {
                "$ref": "#/components/schemas/AppointmentBookingActionParameters"
              },
              {
                "$ref": "#/components/schemas/CustomActionParameters"
              }
            ],
            "description": "Action parameters - structure varies by actionType"
          }
        }
      },
      "CreateActionResponseDTO": {
        "required": [
          "id",
          "actionType",
          "name",
          "actionParameters"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the created action",
            "example": "507f1f77bcf86cd799439011"
          },
          "actionType": {
            "enum": [
              "CALL_TRANSFER",
              "DATA_EXTRACTION",
              "IN_CALL_DATA_EXTRACTION",
              "WORKFLOW_TRIGGER",
              "SMS",
              "APPOINTMENT_BOOKING",
              "CUSTOM_ACTION"
            ],
            "type": "string",
            "description": "Type of action",
            "example": "CALL_TRANSFER"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for this action",
            "example": "Transfer to Manager"
          },
          "actionParameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CallTransferActionParameters"
              },
              {
                "$ref": "#/components/schemas/DataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/InCallDataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/WorkflowTriggerParameters"
              },
              {
                "$ref": "#/components/schemas/SMSParameters"
              },
              {
                "$ref": "#/components/schemas/AppointmentBookingActionParameters"
              },
              {
                "$ref": "#/components/schemas/CustomActionParameters"
              }
            ],
            "description": "Action parameters - structure varies by actionType"
          }
        }
      },
      "UpdateSingleActionDTO": {
        "required": [
          "agentId",
          "locationId",
          "actionType",
          "name",
          "actionParameters"
        ],
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "Agent ID to attach the action to",
            "example": "507f1f77bcf86cd799439011"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "507f1f77bcf86cd799439012"
          },
          "actionType": {
            "enum": [
              "CALL_TRANSFER",
              "DATA_EXTRACTION",
              "IN_CALL_DATA_EXTRACTION",
              "WORKFLOW_TRIGGER",
              "SMS",
              "APPOINTMENT_BOOKING",
              "CUSTOM_ACTION"
            ],
            "type": "string",
            "description": "Type of action",
            "example": "CALL_TRANSFER"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for this action",
            "example": "Transfer to Manager"
          },
          "actionParameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CallTransferActionParameters"
              },
              {
                "$ref": "#/components/schemas/DataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/InCallDataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/WorkflowTriggerParameters"
              },
              {
                "$ref": "#/components/schemas/SMSParameters"
              },
              {
                "$ref": "#/components/schemas/AppointmentBookingActionParameters"
              },
              {
                "$ref": "#/components/schemas/CustomActionParameters"
              }
            ],
            "description": "Action parameters - structure varies by actionType"
          }
        }
      },
      "UpdateActionResponseDTO": {
        "required": [
          "id",
          "actionType",
          "name",
          "actionParameters"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the created action",
            "example": "507f1f77bcf86cd799439011"
          },
          "actionType": {
            "enum": [
              "CALL_TRANSFER",
              "DATA_EXTRACTION",
              "IN_CALL_DATA_EXTRACTION",
              "WORKFLOW_TRIGGER",
              "SMS",
              "APPOINTMENT_BOOKING",
              "CUSTOM_ACTION"
            ],
            "type": "string",
            "description": "Type of action",
            "example": "CALL_TRANSFER"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for this action",
            "example": "Transfer to Manager"
          },
          "actionParameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CallTransferActionParameters"
              },
              {
                "$ref": "#/components/schemas/DataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/InCallDataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/WorkflowTriggerParameters"
              },
              {
                "$ref": "#/components/schemas/SMSParameters"
              },
              {
                "$ref": "#/components/schemas/AppointmentBookingActionParameters"
              },
              {
                "$ref": "#/components/schemas/CustomActionParameters"
              }
            ],
            "description": "Action parameters - structure varies by actionType"
          }
        }
      },
      "GetActionResponseDTO": {
        "required": [
          "id",
          "actionType",
          "name",
          "actionParameters"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the action",
            "example": "507f1f77bcf86cd799439011"
          },
          "actionType": {
            "enum": [
              "CALL_TRANSFER",
              "DATA_EXTRACTION",
              "IN_CALL_DATA_EXTRACTION",
              "WORKFLOW_TRIGGER",
              "SMS",
              "APPOINTMENT_BOOKING",
              "CUSTOM_ACTION"
            ],
            "type": "string",
            "description": "Type of action",
            "example": "CALL_TRANSFER"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for this action",
            "example": "Transfer to Manager"
          },
          "actionParameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CallTransferActionParameters"
              },
              {
                "$ref": "#/components/schemas/DataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/InCallDataExtractionActionParameters"
              },
              {
                "$ref": "#/components/schemas/WorkflowTriggerParameters"
              },
              {
                "$ref": "#/components/schemas/SMSParameters"
              },
              {
                "$ref": "#/components/schemas/AppointmentBookingActionParameters"
              },
              {
                "$ref": "#/components/schemas/CustomActionParameters"
              }
            ],
            "description": "Action parameters - structure varies by actionType"
          }
        }
      },
      "SettingsSchema": {
        "type": "object",
        "properties": {
          "allowDuplicateContact": {
            "type": "boolean",
            "example": false
          },
          "allowDuplicateOpportunity": {
            "type": "boolean",
            "example": false
          },
          "allowFacebookNameMerge": {
            "type": "boolean",
            "example": false
          },
          "disableContactTimezone": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "SocialSchema": {
        "type": "object",
        "properties": {
          "facebookUrl": {
            "type": "string",
            "description": "Facebook URL",
            "example": "https://www.facebook.com/"
          },
          "googlePlus": {
            "type": "string",
            "description": "Googleplus URL",
            "example": "https://www.googleplus.com/"
          },
          "linkedIn": {
            "type": "string",
            "description": "LinkedIn URL",
            "example": "https://www.linkedIn.com/"
          },
          "foursquare": {
            "type": "string",
            "description": "Foursquare URL",
            "example": "https://www.foursquare.com/"
          },
          "twitter": {
            "type": "string",
            "description": "Twitter URL",
            "example": "https://www.foutwitterrsquare.com/"
          },
          "yelp": {
            "type": "string",
            "description": "Yelp URL",
            "example": "https://www.yelp.com/"
          },
          "instagram": {
            "type": "string",
            "description": "Instagram URL",
            "example": "https://www.instagram.com/"
          },
          "youtube": {
            "type": "string",
            "description": "Instagram URL",
            "example": "https://www.youtube.com/"
          },
          "pinterest": {
            "type": "string",
            "description": "Instagram URL",
            "example": "https://www.pinterest.com/"
          },
          "blogRss": {
            "type": "string",
            "description": "Instagram URL",
            "example": "https://www.blogRss.com/"
          },
          "googlePlacesId": {
            "type": "string",
            "description": "Google Business Places ID",
            "example": "ChIJJGPdVbQTrjsRGUkefteUeFk"
          }
        }
      },
      "GetLocationSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "name": {
            "type": "string",
            "description": "The name for the sub-account/location",
            "example": "Mark Shoes"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the business for which sub-account is created",
            "example": "+1410039940"
          },
          "email": {
            "type": "string",
            "description": "The email for the sub-account/location",
            "example": "john.doe@mail.com"
          },
          "address": {
            "type": "string",
            "description": "The address of the business for which sub-account is created",
            "example": "4th fleet street"
          },
          "city": {
            "type": "string",
            "description": "The city where the business is located for which sub-account is created",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "The state in which the business operates for which sub-account is created",
            "example": "Illinois"
          },
          "country": {
            "type": "string",
            "description": "The country in which the business is present for which sub-account is created",
            "example": "US"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code of the business for which sub-account is created",
            "example": "567654"
          },
          "website": {
            "type": "string",
            "description": "The website of the business for which sub-account is created",
            "example": "https://yourwebsite.com"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the business for which sub-account is created",
            "example": "US/Central"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettingsSchema"
              }
            ],
            "description": "The default settings for location"
          },
          "social": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialSchema"
              }
            ],
            "description": "The social media links for location"
          }
        }
      },
      "SearchSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetLocationSchema"
            }
          }
        }
      },
      "BusinessSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "dentist"
          },
          "address": {
            "type": "string",
            "example": "MIG 14, Delhi"
          },
          "city": {
            "type": "string",
            "example": "delhi"
          },
          "state": {
            "type": "string",
            "example": "delhi"
          },
          "country": {
            "type": "string",
            "example": "IN"
          },
          "postalCode": {
            "type": "string",
            "example": "567654"
          },
          "website": {
            "type": "string",
            "example": "https://gohighlevel.com/"
          },
          "timezone": {
            "type": "string",
            "example": "America/Chicago"
          },
          "logoUrl": {
            "type": "string",
            "example": "https://dummyimage.com/o/locationPhotos%2Fve9EPM428h8vShlRW1KT.jpeg"
          }
        }
      },
      "GetLocationByIdSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "companyId": {
            "type": "string",
            "example": "5DP4iH6HLkQsiKESj6rh"
          },
          "name": {
            "type": "string",
            "example": "dentist"
          },
          "domain": {
            "type": "string",
            "example": "test.msgsndr.com"
          },
          "address": {
            "type": "string",
            "example": "ganthi nagar, gyanbabu chauk motihati"
          },
          "city": {
            "type": "string",
            "example": "motihari"
          },
          "state": {
            "type": "string",
            "example": "Loca"
          },
          "logoUrl": {
            "type": "string",
            "example": "https://dummyimage.com/o/locationPhotos%2Fve9EPM428h8vShlRW1KT.jpeg"
          },
          "country": {
            "type": "string",
            "example": "IN"
          },
          "postalCode": {
            "type": "string",
            "example": "567654"
          },
          "website": {
            "type": "string",
            "example": "https://gohighlevel.com/"
          },
          "timezone": {
            "type": "string",
            "example": "America/Chicago"
          },
          "firstName": {
            "type": "string",
            "example": "Dr. Rane"
          },
          "lastName": {
            "type": "string",
            "example": "deo"
          },
          "email": {
            "type": "string",
            "example": "rane@due.com"
          },
          "phone": {
            "type": "string",
            "example": "+919039160788"
          },
          "business": {
            "$ref": "#/components/schemas/BusinessSchema"
          },
          "social": {
            "$ref": "#/components/schemas/SocialSchema"
          },
          "settings": {
            "$ref": "#/components/schemas/SettingsSchema"
          },
          "reseller": {
            "type": "object"
          }
        }
      },
      "GetLocationByIdSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/GetLocationByIdSchema"
          }
        }
      },
      "ProspectInfoDto": {
        "required": [
          "firstName",
          "lastName",
          "email"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the prospect",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the prospect",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of the prospect",
            "example": "john.doe@mail.com"
          }
        }
      },
      "TwilioSchema": {
        "required": [
          "sid",
          "authToken"
        ],
        "type": "object",
        "properties": {
          "sid": {
            "type": "string",
            "description": "SID provided by Twilio",
            "example": "AC_XXXXXXXXXXX"
          },
          "authToken": {
            "type": "string",
            "description": "Auth token provided by Twilio",
            "example": "77_XXXXXXXXXXX"
          }
        }
      },
      "MailgunSchema": {
        "required": [
          "apiKey",
          "domain"
        ],
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "API key provided by Mailgun",
            "example": "key-XXXXXXXXXXX"
          },
          "domain": {
            "type": "string",
            "description": "Domain connected with Mailgun",
            "example": "replies.yourdomain.com"
          }
        }
      },
      "CreateLocationDto": {
        "required": [
          "name",
          "companyId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name for the sub-account/location",
            "example": "Mark Shoes"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the business for which sub-account is created with the appropriate country-code",
            "example": "+1410039940"
          },
          "companyId": {
            "type": "string",
            "description": "Company/Agency Id",
            "example": "UAXssdawIWAWD"
          },
          "address": {
            "type": "string",
            "description": "The address of the business for which sub-account is created",
            "example": "4th fleet street"
          },
          "city": {
            "type": "string",
            "description": "The city where the business is located for which sub-account is created",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "The state in which the business operates for which sub-account is created",
            "example": "Illinois"
          },
          "country": {
            "enum": [
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CA",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KP",
              "KR",
              "XK",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SX",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "GB",
              "UA",
              "AE",
              "US",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ],
            "type": "string",
            "description": "The 2 letter country-code in which the business is present for which sub-account is created",
            "example": "US"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code of the business for which sub-account is created",
            "example": "567654"
          },
          "website": {
            "type": "string",
            "description": "The website of the business for which sub-account is created",
            "example": "https://yourwebsite.com"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the business for which sub-account is created",
            "example": "US/Central"
          },
          "prospectInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProspectInfoDto"
              }
            ],
            "example": {
              "firstName": "John",
              "lastName": "Doe",
              "email": "john.doe@mail.com"
            }
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettingsSchema"
              }
            ],
            "description": "The default settings for location"
          },
          "social": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialSchema"
              }
            ],
            "description": "The social media links for location"
          },
          "twilio": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioSchema"
              }
            ],
            "description": "The twilio credentials for location"
          },
          "mailgun": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MailgunSchema"
              }
            ],
            "description": "The mailgun credentials for location"
          },
          "snapshotId": {
            "type": "string",
            "description": "The snapshot ID to be loaded into the location.",
            "example": "XXXXXXXXXXX"
          }
        }
      },
      "CreateLocationSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "companyId": {
            "type": "string",
            "description": "Company/Agency Id",
            "example": "UAXssdawIWAWD"
          },
          "name": {
            "type": "string",
            "description": "The name for the sub-account/location",
            "example": "Mark Shoes"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the business for which sub-account is created",
            "example": "+1410039940"
          },
          "email": {
            "type": "string",
            "description": "The email for the sub-account/location",
            "example": "john.doe@mail.com"
          },
          "address": {
            "type": "string",
            "description": "The address of the business for which sub-account is created",
            "example": "4th fleet street"
          },
          "city": {
            "type": "string",
            "description": "The city where the business is located for which sub-account is created",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "The state in which the business operates for which sub-account is created",
            "example": "Illinois"
          },
          "domain": {
            "type": "string",
            "example": "test.msgsndr.com"
          },
          "country": {
            "enum": [
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CA",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KP",
              "KR",
              "XK",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SX",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "GB",
              "UA",
              "AE",
              "US",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ],
            "type": "string",
            "description": "The country in which the business is present for which sub-account is created",
            "example": "US"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code of the business for which sub-account is created",
            "example": "567654"
          },
          "website": {
            "type": "string",
            "description": "The website of the business for which sub-account is created",
            "example": "https://yourwebsite.com"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the business for which sub-account is created",
            "example": "US/Central"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettingsSchema"
              }
            ],
            "description": "The default settings for location"
          },
          "social": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialSchema"
              }
            ],
            "description": "The social media links for location"
          }
        }
      },
      "SnapshotPutSchema": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Snaptshot ID",
            "example": "XXXXXXXXXXX"
          },
          "override": {
            "type": "boolean",
            "description": "If you want override all conflicted assets then pass true. Default value is false.",
            "default": false,
            "example": false
          }
        }
      },
      "UpdateLocationDto": {
        "required": [
          "companyId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name for the sub-account/location",
            "example": "Mark Shoes"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the business for which sub-account is created",
            "example": "+1410039940"
          },
          "companyId": {
            "type": "string",
            "description": "Company/Agency Id",
            "example": "UAXssdawIWAWD"
          },
          "address": {
            "type": "string",
            "description": "The address of the business for which sub-account is created",
            "example": "4th fleet street"
          },
          "city": {
            "type": "string",
            "description": "The city where the business is located for which sub-account is created",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "The state in which the business operates for which sub-account is created",
            "example": "Illinois"
          },
          "country": {
            "enum": [
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CA",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KP",
              "KR",
              "XK",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SX",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "GB",
              "UA",
              "AE",
              "US",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ],
            "type": "string",
            "description": "The country in which the business is present for which sub-account is created",
            "example": "US"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code of the business for which sub-account is created",
            "example": "567654"
          },
          "website": {
            "type": "string",
            "description": "The website of the business for which sub-account is created",
            "example": "https://yourwebsite.com"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the business for which sub-account is created",
            "example": "US/Central"
          },
          "prospectInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProspectInfoDto"
              }
            ],
            "example": {
              "firstName": "John",
              "lastName": "Doe",
              "email": "john.doe@mail.com"
            }
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettingsSchema"
              }
            ],
            "description": "The default settings for location"
          },
          "social": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialSchema"
              }
            ],
            "description": "The social media links for location"
          },
          "twilio": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioSchema"
              }
            ],
            "description": "The twilio credentials for location"
          },
          "mailgun": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MailgunSchema"
              }
            ],
            "description": "The mailgun credentials for location"
          },
          "snapshot": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotPutSchema"
              }
            ],
            "description": "The snapshot to be updated in the location."
          }
        }
      },
      "LocationDeletedSuccessfulResponseDto": {
        "required": [
          "success",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success status of the API",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message of the API",
            "example": "Deleted location with id: ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "LocationTagsSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "minim aliquip anim"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "id": {
            "type": "string",
            "example": "flGwEuzsfJOia1i1ikRN"
          }
        }
      },
      "LocationTagsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationTagsSchema"
            }
          }
        }
      },
      "LocationTagSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/LocationTagsSchema"
          }
        }
      },
      "tagBody": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name",
            "example": "Tag"
          }
        }
      },
      "LocationTagDeleteSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "TaskSearchParamsDto": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Contact Ids",
            "example": [
              "dSMo5jnqkJyh8YeGXM7k",
              "j5WESpmRj816VtyUuWwh"
            ]
          },
          "completed": {
            "type": "boolean",
            "description": "Task Completed Or Pending",
            "example": true
          },
          "assignedTo": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assigned User Ids",
            "example": [
              "0004Mtfsd11SBU1mBPgd"
            ]
          },
          "query": {
            "type": "string",
            "description": "Search Value",
            "example": "Task Name"
          },
          "limit": {
            "type": "number",
            "description": "Limit To Api",
            "default": 25,
            "example": 10
          },
          "skip": {
            "type": "number",
            "description": "Number Of Tasks To Skip",
            "default": 0,
            "example": 10
          },
          "businessId": {
            "type": "string",
            "description": "Bussiness Id",
            "example": "6348240b98722079e5417332"
          }
        }
      },
      "LocationTaskListSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        }
      },
      "locations_CustomFieldSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "3sv6UEo51C9Bmpo1cKTq"
          },
          "name": {
            "type": "string",
            "example": "pincode"
          },
          "fieldKey": {
            "type": "string",
            "example": "contact.pincode"
          },
          "placeholder": {
            "type": "string",
            "example": "Pin code"
          },
          "dataType": {
            "type": "string",
            "example": "TEXT"
          },
          "position": {
            "type": "number",
            "example": 0
          },
          "picklistOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "first option"
            ]
          },
          "picklistImageOptions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isAllowedCustomOption": {
            "type": "boolean",
            "example": false
          },
          "isMultiFileAllowed": {
            "type": "boolean",
            "example": true
          },
          "maxFileLimit": {
            "type": "number",
            "example": 4
          },
          "locationId": {
            "type": "string",
            "example": "3sv6UEo51C9Bmpo1cKTq"
          },
          "model": {
            "enum": [
              "contact",
              "opportunity"
            ],
            "type": "string",
            "description": "Model of the custom field",
            "example": "opportunity"
          }
        }
      },
      "CustomFieldsListSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldSchema"
            }
          }
        }
      },
      "CustomFieldSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "customField": {
            "$ref": "#/components/schemas/CustomFieldSchema"
          }
        }
      },
      "textBoxListOptionsSchema": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "example": "First"
          },
          "prefillValue": {
            "type": "string",
            "example": ""
          }
        }
      },
      "CreateCustomFieldsDTO": {
        "required": [
          "name",
          "dataType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Custom Field"
          },
          "dataType": {
            "type": "string",
            "example": "TEXT"
          },
          "placeholder": {
            "type": "string",
            "example": "Placeholder Text"
          },
          "acceptedFormat": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              ".pdf",
              ".docx",
              ".jpeg"
            ]
          },
          "isMultipleFile": {
            "type": "boolean",
            "example": false
          },
          "maxNumberOfFiles": {
            "type": "number",
            "example": 2
          },
          "textBoxListOptions": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/textBoxListOptionsSchema"
                },
                {
                  "$ref": "#/components/schemas/textBoxListOptionsSchema"
                }
              ]
            }
          },
          "position": {
            "type": "number",
            "default": 0,
            "example": 0
          },
          "model": {
            "enum": [
              "contact",
              "opportunity"
            ],
            "type": "string",
            "description": "Model of the custom field you want to create",
            "example": "opportunity"
          }
        }
      },
      "UpdateCustomFieldsDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Custom Field"
          },
          "placeholder": {
            "type": "string",
            "example": "Placeholder Text"
          },
          "acceptedFormat": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              ".pdf",
              ".docx",
              ".jpeg"
            ]
          },
          "isMultipleFile": {
            "type": "boolean",
            "example": false
          },
          "maxNumberOfFiles": {
            "type": "number",
            "example": 2
          },
          "textBoxListOptions": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/textBoxListOptionsSchema"
                },
                {
                  "$ref": "#/components/schemas/textBoxListOptionsSchema"
                }
              ]
            }
          },
          "position": {
            "type": "number",
            "default": 0,
            "example": 0
          },
          "model": {
            "enum": [
              "contact",
              "opportunity"
            ],
            "type": "string",
            "description": "Model of the custom field you want to update",
            "example": "opportunity"
          }
        }
      },
      "CustomFieldDeleteSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "FileUploadBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id(Contact Id/Opportunity Id/Custom Field Id)",
            "example": "aWdODOBVOlH1RUFKWQke"
          },
          "maxFiles": {
            "type": "string",
            "description": "Max number of files",
            "example": "15"
          }
        }
      },
      "FileUploadResponseDto": {
        "type": "object",
        "properties": {
          "uploadedFiles": {
            "type": "object",
            "description": "Uploaded files",
            "example": {
              "FileName.csv": "https://highlevel-private-staging.storage.googleapis.com/location/Ar4JQgIyuzRsVuwD9RSK/custom-Field/UpZLmohmKEQYn0ymqplY/56e0d7fc-085c-4a07-9e1d-6d8fdac7e710.csv"
            }
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Meta data of uploaded files",
            "example": [
              {
                "fieldname": "FileName.csv",
                "originalname": "FileName.csv",
                "encoding": "7bit",
                "mimetype": "text/csv",
                "size": 2061,
                "url": "https://highlevel-private-staging.storage.googleapis.com/location/Ar4JQgIyuzRsVuwD9RSK/custom-Field/UpZLmohmKEQYn0ymqplY/56e0d7fc-085c-4a07-9e1d-6d8fdac7e710.csv"
              }
            ]
          }
        }
      },
      "CustomValueSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "rWQ709Pb62syqGLceg1x"
          },
          "name": {
            "type": "string",
            "example": "Custom Field"
          },
          "fieldKey": {
            "type": "string",
            "example": "{{ custom_values.custom_field }}"
          },
          "value": {
            "type": "string",
            "example": "Value"
          },
          "locationId": {
            "type": "string",
            "example": "rWQ709Pb6dasyqGLceg1x"
          }
        }
      },
      "CustomValuesListSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "customValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomValueSchema"
            }
          }
        }
      },
      "CustomValueIdSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "customValue": {
            "$ref": "#/components/schemas/CustomValueSchema"
          }
        }
      },
      "customValuesDTO": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Custom Field Name"
          },
          "value": {
            "type": "string",
            "example": "Value"
          }
        }
      },
      "CustomValueDeleteSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "SmsTemplateSchema": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "example": "sms body"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        }
      },
      "GetSmsTemplateResponseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "2yMwhgTNO19bpintqrap"
          },
          "name": {
            "type": "string",
            "example": "sms template"
          },
          "type": {
            "type": "string",
            "example": "sms"
          },
          "template": {
            "$ref": "#/components/schemas/SmsTemplateSchema"
          },
          "dateAdded": {
            "type": "string",
            "example": "2022-01-27T12:31:19.679Z"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "urlAttachments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EmailTemplateSchema": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "example": "subject text"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "html": {
            "type": "string",
            "example": "<html><head><style>body{font-family: sans-serif;}</style></head><body>testing</body></html>"
          }
        }
      },
      "GetEmailTemplateResponseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "2yMwhgTNO19bpintqrap"
          },
          "name": {
            "type": "string",
            "example": "email template"
          },
          "type": {
            "type": "string",
            "example": "email"
          },
          "dateAdded": {
            "type": "string",
            "example": "2022-01-27T12:31:19.679Z"
          },
          "template": {
            "$ref": "#/components/schemas/EmailTemplateSchema"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "GetTemplatesSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "templates": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GetSmsTemplateResponseSchema"
                },
                {
                  "$ref": "#/components/schemas/GetEmailTemplateResponseSchema"
                }
              ]
            }
          },
          "totalCount": {
            "type": "number",
            "example": 100
          }
        }
      },
      "CustomRRulesOptions": {
        "required": [
          "intervalType",
          "interval",
          "startDate",
          "dueAfterSeconds"
        ],
        "type": "object",
        "properties": {
          "intervalType": {
            "enum": [
              "yearly",
              "monthly",
              "weekly",
              "daily",
              "hourly"
            ],
            "type": "string",
            "example": "monthly"
          },
          "interval": {
            "type": "number",
            "example": 2
          },
          "startDate": {
            "type": "string",
            "description": "Start Date",
            "example": "2021-09-30T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End Date",
            "example": "2021-09-30T00:00:00.000Z"
          },
          "dayOfMonth": {
            "type": "number",
            "description": "1, 2, 3, ..., 27, 31",
            "example": 15
          },
          "dayOfWeek": {
            "enum": [
              "MO",
              "TU",
              "WE",
              "TH",
              "FR",
              "SA",
              "SU"
            ],
            "type": "string",
            "example": "MO"
          },
          "monthOfYear": {
            "type": "number",
            "description": "1, 2, ....., 11, 12",
            "example": 1
          },
          "count": {
            "type": "number",
            "description": "Max number of task executions",
            "example": 10
          },
          "createTaskIfOverDue": {
            "type": "boolean",
            "description": "Create Task If Over Due",
            "example": true
          },
          "dueAfterSeconds": {
            "type": "number",
            "description": "Due after seconds",
            "example": 23404000
          }
        }
      },
      "RecurringTaskResponseDTO": {
        "required": [
          "id",
          "title",
          "description",
          "locationId",
          "updatedAt",
          "createdAt",
          "rruleOptions",
          "totalOccurrence",
          "deleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Recurring Task Id",
            "example": "sx6wyHhbFdRXh302Lunr"
          },
          "title": {
            "type": "string",
            "description": "Name of the task",
            "example": "Task Name"
          },
          "description": {
            "type": "string",
            "description": "Description of the task",
            "example": "Task Description"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "sx6wyHhbFdRXh302Lunr"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated At",
            "example": "2021-04-15T10:00:00.000Z"
          },
          "createdAt": {
            "type": "string",
            "description": "Created At",
            "example": "2021-04-15T10:00:00.000Z"
          },
          "rruleOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomRRulesOptions"
              }
            ],
            "description": "Recurring rules",
            "example": {
              "createTaskIfOverDue": false,
              "interval": 1,
              "intervalType": "hourly",
              "startDate": "2024-10-29T12:34:03.000Z",
              "dueAfterSeconds": 600,
              "count": 550
            }
          },
          "totalOccurrence": {
            "type": "number",
            "description": "Total Occurrence",
            "example": 10
          },
          "deleted": {
            "type": "boolean",
            "description": "Deleted",
            "example": false
          },
          "assignedTo": {
            "type": "string",
            "description": "Assigned To",
            "example": "sx6wyHhbFdRXh302Lunr"
          },
          "contactId": {
            "type": "string",
            "description": "Contact Id",
            "example": "v5cEPM428h8vShlRW1KT"
          }
        }
      },
      "RecurringTaskSingleResponseDTO": {
        "required": [
          "recurringTask"
        ],
        "type": "object",
        "properties": {
          "recurringTask": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringTaskResponseDTO"
              }
            ],
            "description": "Recurring Tasks"
          }
        }
      },
      "RecurringTaskCreateDTO": {
        "required": [
          "title",
          "rruleOptions"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Name of the task",
            "example": "Task Name"
          },
          "description": {
            "type": "string",
            "description": "Description of the task",
            "example": "Task Description"
          },
          "contactIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Contact Id",
            "example": [
              "sx6wyHhbFdRXh302Lunr"
            ]
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assigned To",
            "example": [
              "sx6wyHhbFdRXh302Lunr"
            ]
          },
          "rruleOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomRRulesOptions"
              }
            ],
            "description": "Recurring rules",
            "example": {
              "intervalType": "hourly",
              "interval": 1,
              "startDate": "2025-07-23T10:00:00.000Z",
              "dueAfterSeconds": 600
            }
          },
          "ignoreTaskCreation": {
            "type": "boolean",
            "description": "Create initial task or not",
            "example": true
          }
        }
      },
      "RecurringTaskUpdateDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Name of the task",
            "example": "Task Name"
          },
          "description": {
            "type": "string",
            "description": "Description of the task",
            "example": "Task Description"
          },
          "contactIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Contact Id",
            "example": [
              "sx6wyHhbFdRXh302Lunr"
            ]
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assigned To",
            "example": [
              "sx6wyHhbFdRXh302Lunr"
            ]
          },
          "rruleOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomRRulesOptions"
              }
            ],
            "description": "Recurring rules",
            "example": {
              "intervalType": "hourly",
              "interval": 1,
              "startDate": "2025-07-23T10:00:00.000Z",
              "dueAfterSeconds": 600
            }
          },
          "ignoreTaskCreation": {
            "type": "boolean",
            "description": "Create initial task or not",
            "example": true
          }
        }
      },
      "DeleteRecurringTaskResponseDTO": {
        "required": [
          "id",
          "success"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Recurring Task Id",
            "example": "sx6wyHhbFdRXh302Lunr"
          },
          "success": {
            "type": "boolean",
            "description": "Success",
            "example": true
          }
        }
      },
      "EntityReference": {
        "enum": [
          "contacts",
          "users"
        ],
        "type": "string",
        "description": "Entity type"
      },
      "ELEMENTS_LOOKUP": {
        "enum": [
          "Page",
          "Text",
          "Image",
          "Video",
          "Table",
          "ProductList",
          "PageBreak",
          "Signature",
          "PaymentDetails",
          "TextField",
          "DateField",
          "InitialsField",
          "Checkbox",
          "Row",
          "Column"
        ],
        "type": "string",
        "description": "Element type"
      },
      "FillableFieldsDTO": {
        "required": [
          "fieldId",
          "isRequired",
          "hasCompleted",
          "recipient",
          "entityType",
          "id",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "string",
            "description": "Field Id",
            "example": "text_field_1"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Is the field required",
            "example": true
          },
          "hasCompleted": {
            "type": "boolean",
            "description": "Has the field been completed",
            "example": true
          },
          "recipient": {
            "type": "string",
            "description": "Recipient",
            "example": "John Doe"
          },
          "entityType": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "id": {
            "type": "string",
            "description": "Id",
            "example": "2d0a6fe1-d519-4198-8785-3da1d7cab925"
          },
          "type": {
            "$ref": "#/components/schemas/ELEMENTS_LOOKUP"
          },
          "value": {
            "type": "string",
            "description": "Value of the field",
            "example": "John Doe"
          }
        }
      },
      "DiscountDto": {
        "required": [
          "id",
          "value",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the discount",
            "example": "123456"
          },
          "value": {
            "type": "number",
            "description": "Discount value (either a percentage or custom amount)",
            "example": 10
          },
          "type": {
            "enum": [
              "percentage",
              "custom_amount"
            ],
            "type": "string",
            "description": "Type of discount",
            "example": "percentage"
          }
        }
      },
      "GrandTotalDto": {
        "required": [
          "amount",
          "currency",
          "discountPercentage",
          "discounts"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Total amount before discounts",
            "example": 100
          },
          "currency": {
            "type": "string",
            "description": "Currency of the total amount",
            "example": "USD"
          },
          "discountPercentage": {
            "type": "number",
            "description": "Total discount percentage applied",
            "example": 15
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountDto"
            },
            "description": "List of applied discounts"
          }
        }
      },
      "RecipientItem": {
        "required": [
          "id",
          "email",
          "hasCompleted",
          "role",
          "isPrimary",
          "signingOrder"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Recipient Id",
            "example": "u240JcS0E5qE0ziHnwMm"
          },
          "firstName": {
            "type": "string",
            "description": "Recipient First Name",
            "example": "Jim"
          },
          "lastName": {
            "type": "string",
            "description": "Recipient Last Name",
            "example": "Anton"
          },
          "email": {
            "type": "string",
            "description": "Recipient Email",
            "example": "jim@gmail.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Recipient Phone Number",
            "example": "+1234567890"
          },
          "phone": {
            "type": "string",
            "description": "Recipient Phone",
            "example": "1234567890"
          },
          "hasCompleted": {
            "type": "boolean",
            "description": "Recipient has completed the document",
            "example": true
          },
          "role": {
            "enum": [
              "user",
              "signer"
            ],
            "type": "string",
            "description": "Recipient role",
            "example": "signer"
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Recipient is primary",
            "example": true
          },
          "signingOrder": {
            "type": "number",
            "description": "Recipient signing order",
            "example": 1
          },
          "imgUrl": {
            "type": "string",
            "description": "Recipient image url",
            "example": "base64 image url"
          },
          "ip": {
            "type": "string",
            "description": "Recipient ip",
            "example": "123.123.123.123"
          },
          "userAgent": {
            "type": "string",
            "description": "Recipient user agent",
            "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
          },
          "signedDate": {
            "type": "string",
            "description": "Recipient signed date",
            "example": "2025-02-03T18:30:00.000Z"
          },
          "contactName": {
            "type": "string",
            "description": "Recipient contact name",
            "example": "Jim Anton"
          },
          "country": {
            "type": "string",
            "description": "Recipient country",
            "example": "United States"
          },
          "entityName": {
            "type": "string",
            "description": "Recipient entity name",
            "example": "Jim Anton"
          },
          "initialsImgUrl": {
            "type": "string",
            "description": "Recipient initials image url",
            "example": "base64 image url"
          },
          "lastViewedAt": {
            "type": "string",
            "description": "Recipient last viewed date",
            "example": "2025-02-03T18:30:00.000Z"
          },
          "shareLink": {
            "type": "string",
            "description": "Share link",
            "example": "https://www.google.com"
          }
        }
      },
      "ProposalEstimateLinksDto": {
        "required": [
          "referenceId",
          "documentId",
          "recipientId",
          "entityName",
          "recipientCategory",
          "documentRevision",
          "createdBy",
          "deleted"
        ],
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "Reference ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "documentId": {
            "type": "string",
            "description": "Document ID",
            "example": "c1e87a91-93b2-4b78-821f-85cf0e1f925b"
          },
          "recipientId": {
            "type": "string",
            "description": "Recipient ID",
            "example": "u240JcS0E5qE0ziHnwMm"
          },
          "entityName": {
            "enum": [
              "contacts",
              "users"
            ],
            "type": "string",
            "description": "Entity name that the recipient belongs to",
            "example": "contacts"
          },
          "recipientCategory": {
            "enum": [
              "recipient",
              "cc",
              "bcc"
            ],
            "type": "string",
            "description": "Recipient category (recipient, cc, or bcc)",
            "example": "recipient"
          },
          "documentRevision": {
            "type": "number",
            "description": "Document revision number",
            "example": 1
          },
          "createdBy": {
            "type": "string",
            "description": "Created by user ID",
            "example": "b6d8fa28-1112-4dc7-b9d2-f22b75a477ea"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the document is deleted",
            "example": false
          }
        }
      },
      "DocumentDto": {
        "required": [
          "locationId",
          "documentId",
          "_id",
          "name",
          "type",
          "deleted",
          "isExpired",
          "documentRevision",
          "fillableFields",
          "grandTotal",
          "locale",
          "status",
          "paymentStatus",
          "recipients",
          "links",
          "updatedAt",
          "createdAt"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "hTlkh7t8gujsahgg93"
          },
          "documentId": {
            "type": "string",
            "description": "Document Id",
            "example": "hTlkh7t8gujsahgg93"
          },
          "_id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "67ac9a51106ee8311e911XXXX"
          },
          "name": {
            "type": "string",
            "description": "Name of the document",
            "example": "Document Name"
          },
          "type": {
            "type": "string",
            "description": "Type of the document",
            "example": "proposal"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the document is deleted",
            "example": false
          },
          "isExpired": {
            "type": "boolean",
            "description": "Whether the document is expired",
            "example": false
          },
          "documentRevision": {
            "type": "number",
            "description": "Number of times document is moved to draft state",
            "example": 1
          },
          "fillableFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FillableFieldsDTO"
            },
            "description": "Fillable fields"
          },
          "grandTotal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GrandTotalDto"
              }
            ],
            "description": "Grand total object of the document"
          },
          "locale": {
            "type": "string",
            "description": "Locale of the location",
            "example": "en-US"
          },
          "status": {
            "type": "array",
            "items": {
              "enum": [
                "draft",
                "sent",
                "viewed",
                "completed",
                "accepted"
              ],
              "type": "string"
            },
            "description": "Document status",
            "example": "draft"
          },
          "paymentStatus": {
            "type": "array",
            "items": {
              "enum": [
                "waiting_for_payment",
                "paid",
                "no_payment"
              ],
              "type": "string"
            },
            "description": "Payment status",
            "example": "paid"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecipientItem"
            },
            "description": "Recipients",
            "example": [
              {
                "id": "u240JcS0E5qE0ziHnwMm",
                "email": "jim@gmail.com",
                "imageUrl": "",
                "contactName": "Jim Anton",
                "firstName": "Jim",
                "lastName": "Anton",
                "role": "signer",
                "hasCompleted": true,
                "signingOrder": 1,
                "imgUrl": "base64 image url",
                "ip": "123.123.123.123"
              }
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProposalEstimateLinksDto"
            },
            "description": "Links for the document if its sent"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date start from (ISO 8601)",
            "example": "2025-02-03T18:30:00.000Z"
          },
          "createdAt": {
            "type": "string",
            "description": "Date to (ISO 8601)",
            "example": "2025-02-14T18:29:59.999Z"
          }
        }
      },
      "DocumentListResponseDto": {
        "required": [
          "documents",
          "total"
        ],
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentDto"
            },
            "description": "List of documents"
          },
          "total": {
            "type": "number",
            "description": "Total records available",
            "example": 10
          },
          "whiteLabelBaseUrl": {
            "type": "number",
            "description": "WhiteLabel url for document",
            "example": "https://example.com"
          },
          "whiteLabelBaseUrlForInvoice": {
            "type": "number",
            "description": "WhiteLabel url for invoice",
            "example": "https://example.com"
          }
        }
      },
      "proposals_BadRequestDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Bad Request"
          }
        }
      },
      "CCRecipientItem": {
        "required": [
          "email",
          "id",
          "imageUrl",
          "contactName",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email",
            "example": "jim@gmail.com"
          },
          "id": {
            "type": "string",
            "description": "Contact ID",
            "example": "contactId"
          },
          "imageUrl": {
            "type": "string",
            "description": "Contact Image URL",
            "example": "https://example.com/image.jpg"
          },
          "contactName": {
            "type": "string",
            "description": "Contact Name",
            "example": "Jim Anton"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "Jim"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Anton"
          }
        }
      },
      "NotificationSendSettingDto": {
        "required": [
          "templateId",
          "subject"
        ],
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "NotificationSenderSettingDto": {
        "required": [
          "fromEmail",
          "fromName"
        ],
        "type": "object",
        "properties": {
          "fromEmail": {
            "type": "string"
          },
          "fromName": {
            "type": "string"
          }
        }
      },
      "NotificationSettingsDto": {
        "required": [
          "receive",
          "sender"
        ],
        "type": "object",
        "properties": {
          "receive": {
            "$ref": "#/components/schemas/NotificationSendSettingDto"
          },
          "sender": {
            "$ref": "#/components/schemas/NotificationSenderSettingDto"
          }
        }
      },
      "SendDocumentDto": {
        "required": [
          "locationId",
          "documentId",
          "sentBy"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "hTlkh7t8gujsahgg93"
          },
          "documentId": {
            "type": "string",
            "description": "Document Id",
            "example": "hTlkh7t8gujsahgg93"
          },
          "documentName": {
            "type": "string",
            "description": "Document Name",
            "example": "new Document"
          },
          "medium": {
            "enum": [
              "link",
              "email"
            ],
            "type": "string",
            "description": "Medium to be used for sending the document",
            "example": "email"
          },
          "ccRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CCRecipientItem"
            },
            "description": "CC Recipient",
            "example": [
              {
                "id": "u240JcS0E5qE0ziHnwMm",
                "email": "jim@gmail.com",
                "imageUrl": "",
                "contactName": "Jim Anton",
                "firstName": "Jim",
                "lastName": "Anton"
              }
            ]
          },
          "notificationSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationSettingsDto"
              }
            ],
            "example": {
              "sender": {
                "fromName": "",
                "fromEmail": ""
              },
              "receive": {
                "subject": "",
                "templateId": ""
              }
            }
          },
          "sentBy": {
            "type": "string",
            "description": "Sent ByUser Id",
            "example": "1234567890"
          }
        }
      },
      "SendDocumentResponseDto": {
        "required": [
          "success",
          "links"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success status",
            "example": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProposalEstimateLinksDto"
            },
            "description": "Links for all recipients"
          }
        }
      },
      "TemplateListResponseDTO": {
        "required": [
          "_id",
          "deleted",
          "version",
          "name",
          "locationId",
          "type",
          "updatedBy",
          "isPublicDocument",
          "createdAt",
          "updatedAt",
          "id"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Template ID",
            "example": "685d11c371c22e636e9c04b2"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the template is deleted",
            "example": false
          },
          "version": {
            "type": "number",
            "description": "Template version",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "Template name",
            "example": "New Template"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "5rORm9p7RtxWQPzBIbTG"
          },
          "type": {
            "enum": [
              "proposal",
              "estimate",
              "contentLibrary"
            ],
            "type": "string",
            "description": "Template type",
            "example": "proposal"
          },
          "updatedBy": {
            "type": "string",
            "description": "User ID who last updated the template",
            "example": "K9PSPnWjfNoE8DCf5LJZ"
          },
          "isPublicDocument": {
            "type": "boolean",
            "description": "Whether the template is a public document",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "Template creation date",
            "example": "2025-06-26T09:24:19.305Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Template last update date",
            "example": "2025-06-26T09:27:32.119Z"
          },
          "id": {
            "type": "string",
            "description": "Template ID (alias for _id)",
            "example": "685d11c371c22e636e9c04b2"
          },
          "documentCount": {
            "type": "number",
            "description": "Document count (only present when isPublicDocument is true)",
            "example": 0
          },
          "docFormUrl": {
            "type": "string",
            "description": "Document form URL (only present when isPublicDocument is true)",
            "example": "https://staging.sendlink.co/documents/doc-form/685d11c371c22e636e9c04b2?locale=en_US"
          }
        }
      },
      "TemplateListPaginationResponseDTO": {
        "required": [
          "data",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateListResponseDTO"
            },
            "description": "Array of templates"
          },
          "total": {
            "type": "number",
            "description": "Total number of templates",
            "example": 2
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID for request tracking",
            "example": "d5656876-86a5-46fb-84df-788f1da7937a"
          }
        }
      },
      "SendDocumentFromPublicApiBodyDto": {
        "required": [
          "templateId",
          "userId",
          "locationId",
          "contactId"
        ],
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "description": "Template Id",
            "example": "hTlkh7t8gujsahgg93"
          },
          "userId": {
            "type": "string",
            "description": "User Id",
            "example": "hTlkh7t8gujsahgg93"
          },
          "sendDocument": {
            "type": "boolean",
            "description": "Send Document",
            "example": true
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "hTlkh7t8gujsahgg93"
          },
          "contactId": {
            "type": "string",
            "description": "Contact Id",
            "example": "hTlkh7t8gujsahgg93"
          },
          "opportunityId": {
            "type": "string",
            "description": "Opportunity Id",
            "example": "hTlkh7t8gujsahgg93"
          }
        }
      },
      "SendTemplateResponseDto": {
        "required": [
          "success",
          "links"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success status",
            "example": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProposalEstimateLinksDto"
            },
            "description": "Links for all recipients"
          }
        }
      },
      "proposals_UnauthorizedDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Invalid token: access token is invalid"
          },
          "error": {
            "type": "string",
            "example": "Unauthorized"
          }
        }
      },
      "IconSchemaOptional": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the icon",
            "example": "yin-yang"
          },
          "fontFamily": {
            "enum": [
              "fab",
              "fas",
              "far"
            ],
            "type": "string",
            "description": "Font family of the icon"
          }
        }
      },
      "CustomMenuSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the custom menu",
            "example": "12345"
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IconSchemaOptional"
              }
            ],
            "description": "Icon information for the menu item"
          },
          "title": {
            "type": "string",
            "description": "Title of the custom menu",
            "example": "Dashboard"
          },
          "url": {
            "type": "string",
            "description": "URL of the custom menu",
            "example": "/dashboard"
          },
          "order": {
            "type": "number",
            "description": "Order of the custom menu",
            "example": 1
          },
          "showOnCompany": {
            "type": "boolean",
            "description": "Filter to show only agency-level menu links. When omitted, fetches both agency and sub-account menu links. Ignored if locationId is provided",
            "example": true
          },
          "showOnLocation": {
            "type": "boolean",
            "description": "Whether the menu must be displayed for sub-accounts level",
            "example": true
          },
          "showToAllLocations": {
            "type": "boolean",
            "description": "Whether the menu must be displayed to all sub-accounts",
            "example": true
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of sub-account IDs where the menu should be shown. This list is applicable only when showOnLocation is true and showToAllLocations is false",
            "example": [
              "gfWreTIHL8pDbggBb7af",
              "67WreTIHL8pDbggBb7ty"
            ]
          },
          "openMode": {
            "enum": [
              "iframe",
              "new_tab",
              "current_tab"
            ],
            "type": "string",
            "description": "Mode for opening the menu link"
          },
          "userRole": {
            "enum": [
              "all",
              "admin",
              "user"
            ],
            "type": "string",
            "description": "Which user-roles should the menu be accessible to?"
          },
          "allowCamera": {
            "type": "boolean",
            "description": "Indicates if camera access is allowed for this menu",
            "example": false
          },
          "allowMicrophone": {
            "type": "boolean",
            "description": "Indicates if microphone access is allowed for this menu",
            "example": false
          }
        }
      },
      "GetCustomMenusResponseDTO": {
        "type": "object",
        "properties": {
          "customMenus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomMenuSchema"
            },
            "description": "Array of custom menu links"
          },
          "totalLinks": {
            "type": "number",
            "description": "Total number of custom menu records",
            "example": 100
          }
        }
      },
      "GetSingleCustomMenusSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "customMenu": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomMenuSchema"
              }
            ],
            "description": "Single Custom menu link object"
          }
        }
      },
      "DeleteCustomMenuSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the custom menu was successfully deleted",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "A message providing additional information about the deletion operation",
            "example": "Custom menu successfully deleted"
          },
          "deletedMenuId": {
            "type": "string",
            "description": "The ID of the deleted custom menu",
            "example": "12345abcde"
          },
          "deletedAt": {
            "type": "string",
            "description": "Timestamp of when the deletion was performed",
            "format": "date-time",
            "example": "2023-09-12T15:30:45.123Z"
          }
        }
      },
      "IconSchema": {
        "required": [
          "name",
          "fontFamily"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the icon",
            "example": "yin-yang"
          },
          "fontFamily": {
            "enum": [
              "fab",
              "fas",
              "far"
            ],
            "type": "string",
            "description": "Font family of the icon"
          }
        }
      },
      "CreateCustomMenuDTO": {
        "required": [
          "title",
          "url",
          "icon",
          "showOnCompany",
          "showOnLocation",
          "showToAllLocations",
          "openMode",
          "locations",
          "userRole"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the custom menu",
            "example": "Custom Menu"
          },
          "url": {
            "type": "string",
            "description": "URL of the custom menu",
            "example": "https://custom-menus.com/"
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IconSchema"
              }
            ],
            "description": "Icon information for the custom menu"
          },
          "showOnCompany": {
            "type": "boolean",
            "description": "Whether the menu must be displayed on the agency's level",
            "default": true,
            "example": true
          },
          "showOnLocation": {
            "type": "boolean",
            "description": "Whether the menu must be displayed for sub-accounts level",
            "default": true,
            "example": true
          },
          "showToAllLocations": {
            "type": "boolean",
            "description": "Whether the menu must be displayed to all sub-accounts",
            "default": true,
            "example": true
          },
          "openMode": {
            "enum": [
              "iframe",
              "new_tab",
              "current_tab"
            ],
            "type": "string",
            "description": "Mode for opening the menu link"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of sub-account IDs where the menu should be shown. This list is applicable only when showOnLocation is true and showToAllLocations is false",
            "example": [
              "gfWreTIHL8pDbggBb7af",
              "67WreTIHL8pDbggBb7ty"
            ]
          },
          "userRole": {
            "enum": [
              "all",
              "admin",
              "user"
            ],
            "type": "string",
            "description": "Which user-roles should the menu be accessible to?"
          },
          "allowCamera": {
            "type": "boolean",
            "description": "Whether to allow camera access (only for iframe mode)",
            "example": false
          },
          "allowMicrophone": {
            "type": "boolean",
            "description": "Whether to allow microphone access (only for iframe mode)",
            "example": false
          }
        }
      },
      "UpdateCustomMenuDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the custom menu",
            "example": "Custom Menu"
          },
          "url": {
            "type": "string",
            "description": "URL of the custom menu",
            "example": "https://custom-menus.com/"
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IconSchemaOptional"
              }
            ],
            "description": "Icon information for the custom menu"
          },
          "showOnCompany": {
            "type": "boolean",
            "description": "Whether the menu must be displayed on the agency's level",
            "default": true,
            "example": true
          },
          "showOnLocation": {
            "type": "boolean",
            "description": "Whether the menu must be displayed for sub-accounts level",
            "default": true,
            "example": true
          },
          "showToAllLocations": {
            "type": "boolean",
            "description": "Whether the menu must be displayed to all sub-accounts",
            "default": true,
            "example": true
          },
          "openMode": {
            "enum": [
              "iframe",
              "new_tab",
              "current_tab"
            ],
            "type": "string",
            "description": "Mode for opening the menu link"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of sub-account IDs where the menu should be shown. This list is applicable only when showOnLocation is true and showToAllLocations is false",
            "example": [
              "gfWreTIHL8pDbggBb7af",
              "67WreTIHL8pDbggBb7ty"
            ]
          },
          "userRole": {
            "enum": [
              "all",
              "admin",
              "user"
            ],
            "type": "string",
            "description": "Which user-roles should the menu be accessible to?"
          },
          "allowCamera": {
            "type": "boolean",
            "description": "Whether to allow camera access (only for iframe mode)",
            "example": false
          },
          "allowMicrophone": {
            "type": "boolean",
            "description": "Whether to allow microphone access (only for iframe mode)",
            "example": false
          }
        }
      },
      "UpdateCustomMenuLinkResponseDTO": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Status of update"
          },
          "customMenu": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomMenuSchema"
              }
            ],
            "description": "Updated custom menu link"
          }
        }
      },
      "createRelationReqDto": {
        "required": [
          "locationId",
          "associationId",
          "firstRecordId",
          "secondRecordId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Your Sub Account's ID",
            "example": "clF1LD04GTUKN3b3XuOj"
          },
          "associationId": {
            "type": "string",
            "description": "Association's Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "firstRecordId": {
            "type": "string",
            "description": "First Record's Id. For instance, if you have an association between a contact and a custom object, and you specify the contact as the first object while creating the association, then your firstRecordId would be the contactId ",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "secondRecordId": {
            "type": "string",
            "description": "Second Record's Id.For instance, if you have an association between a contact and a custom object, and you specify the custom object as the second entity while creating the association, then your secondRecordId would be the customObject record Id",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "GetPostSuccessfulResponseDto": {
        "required": [
          "locationId",
          "id",
          "key",
          "firstObjectLabel",
          "firstObjectKey",
          "secondObjectLabel",
          "secondObjectKey",
          "associationType"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "string"
          },
          "id": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "key": {
            "type": "string",
            "description": "First Objects Association Label (custom_objects.children)",
            "example": "student"
          },
          "firstObjectLabel": {
            "type": "object",
            "description": "First Objects Association Label (custom_objects.children)",
            "example": "student"
          },
          "firstObjectKey": {
            "type": "object",
            "description": "First Objects Key",
            "example": "custom_objects.children"
          },
          "secondObjectLabel": {
            "type": "object",
            "description": "Second Object Association Label (contact)",
            "example": "Teacher"
          },
          "secondObjectKey": {
            "type": "object",
            "description": "Second Objects Key",
            "example": "contact"
          },
          "associationType": {
            "type": "object",
            "description": "Association Type can be USER_DEFINED or SYSTEM_DEFINED",
            "example": "USER_DEFINED"
          }
        }
      },
      "createAssociationReqDto": {
        "required": [
          "locationId",
          "key",
          "firstObjectLabel",
          "firstObjectKey",
          "secondObjectLabel",
          "secondObjectKey"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "string"
          },
          "key": {
            "type": "string",
            "description": "Association's Unique key",
            "example": "student_teacher"
          },
          "firstObjectLabel": {
            "type": "object",
            "description": "First Objects Association Label (custom_objects.children)",
            "example": "student"
          },
          "firstObjectKey": {
            "type": "object",
            "description": "First Objects Key",
            "example": "custom_objects.children"
          },
          "secondObjectLabel": {
            "type": "object",
            "description": "Second Object Association Label (contact)",
            "example": "Teacher"
          },
          "secondObjectKey": {
            "type": "object",
            "description": "Second Objects Key",
            "example": "contact"
          }
        }
      },
      "UpdateAssociationReqDto": {
        "required": [
          "firstObjectLabel",
          "secondObjectLabel"
        ],
        "type": "object",
        "properties": {
          "firstObjectLabel": {
            "type": "object",
            "example": "student"
          },
          "secondObjectLabel": {
            "type": "object",
            "example": "tutor"
          }
        }
      },
      "DeleteAssociationsResponseDTO": {
        "required": [
          "deleted",
          "id",
          "message"
        ],
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean",
            "description": "Deletion status",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "Association Id",
            "example": "6d6f6e676f5f6576656e7473"
          },
          "message": {
            "type": "string",
            "example": "Association deleted successfully"
          }
        }
      },
      "PageDetailsSchema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://example.com"
          },
          "title": {
            "type": "string",
            "example": "Example Page"
          }
        }
      },
      "ContactSessionIds": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "example": [
              "session1",
              "session2"
            ]
          }
        }
      },
      "EventDataSchema": {
        "type": "object",
        "properties": {
          "fbc": {
            "type": "string",
            "example": "fb.1.123456789.987654321"
          },
          "fbp": {
            "type": "string",
            "example": "fbp.1.987654321.123456789"
          },
          "page": {
            "$ref": "#/components/schemas/PageDetailsSchema"
          },
          "type": {
            "type": "string",
            "example": "page-visit"
          },
          "domain": {
            "type": "string",
            "example": "example.com"
          },
          "medium": {
            "type": "string",
            "example": "form"
          },
          "source": {
            "type": "string",
            "example": "Direct traffic"
          },
          "version": {
            "type": "string",
            "example": "v3"
          },
          "adSource": {
            "type": "string",
            "example": "example-ad-source"
          },
          "mediumId": {
            "type": "string",
            "example": "medium-id-123"
          },
          "parentId": {
            "type": "string",
            "example": "parent-id-456"
          },
          "referrer": {
            "type": "string",
            "example": "https://staging.gohighlevel.com"
          },
          "fbEventId": {
            "type": "string",
            "example": "event-id-789"
          },
          "timestamp": {
            "type": "number",
            "example": 1234567890
          },
          "parentName": {
            "type": "string",
            "example": "Parent Form"
          },
          "fingerprint": {
            "type": "string",
            "example": "example-fingerprint"
          },
          "pageVisitType": {
            "type": "string",
            "example": "form"
          },
          "contactSessionIds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactSessionIds"
              }
            ],
            "nullable": true
          }
        }
      },
      "othersSchema": {
        "type": "object",
        "properties": {
          "__submissions_other_field__": {
            "type": "string",
            "example": "john@deo.com"
          },
          "__custom_field_id__": {
            "type": "string",
            "example": "20"
          },
          "eventData": {
            "$ref": "#/components/schemas/EventDataSchema"
          },
          "fieldsOriSequance": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "full_name",
              "first_name",
              "last_name",
              "phone",
              "email"
            ]
          }
        }
      },
      "FormsSubmissionsSubmissionsSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "38303ec7-629a-49e2-888a-cf8bf0b1f97e"
          },
          "contactId": {
            "type": "string",
            "example": "DWQ45t2IPVxi9LDu1wBl"
          },
          "createdAt": {
            "type": "string",
            "example": "2021-06-23T06:07:04.000Z"
          },
          "formId": {
            "type": "string",
            "example": "YSWdvS4Is98wtIDGnpmI"
          },
          "name": {
            "type": "string",
            "example": "test"
          },
          "email": {
            "type": "string",
            "example": "test@test.com"
          },
          "others": {
            "$ref": "#/components/schemas/othersSchema"
          }
        }
      },
      "metaSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 1
          },
          "currentPage": {
            "type": "number",
            "example": 1
          },
          "nextPage": {
            "type": "number",
            "nullable": true
          },
          "prevPage": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "FormsSubmissionsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "submissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormsSubmissionsSubmissionsSchema"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/metaSchema"
          }
        }
      },
      "FormsParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "YSWdvS4Is98wtIDGnpmI"
          },
          "name": {
            "type": "string",
            "example": "Form 1"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "FormsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormsParams"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of forms",
            "example": "20"
          }
        }
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "Address Line 1",
            "example": "9931 Beechwood"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address Line 2",
            "example": "Beechwood"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "St. Houston"
          },
          "state": {
            "type": "string",
            "description": "State",
            "example": "TX"
          },
          "countryCode": {
            "type": "string",
            "description": "Country Code",
            "example": "US"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal Code",
            "example": "559-6993"
          }
        }
      },
      "BusinessDetailsDto": {
        "type": "object",
        "properties": {
          "logoUrl": {
            "type": "string",
            "description": "Business Logo URL",
            "example": "https://example.com/logo.png"
          },
          "name": {
            "type": "string",
            "description": "Business Name",
            "example": "ABC Corp."
          },
          "phoneNo": {
            "type": "string",
            "description": "Business Phone Number",
            "example": "+1-214-559-6993"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDto"
              }
            ],
            "description": "Business Address",
            "example": "9931 Beechwood, TX"
          },
          "website": {
            "type": "string",
            "description": "Business Website Link",
            "example": "wwww.example.com"
          },
          "customValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Custom Values"
          }
        }
      },
      "ItemTaxDto": {
        "required": [
          "_id",
          "name",
          "rate"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          },
          "calculation": {
            "enum": [
              "exclusive"
            ],
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "taxId": {
            "type": "string"
          }
        }
      },
      "InvoiceItemDto": {
        "required": [
          "name",
          "currency",
          "amount",
          "qty"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Invoice Item Name",
            "example": "ABC Product"
          },
          "description": {
            "type": "string",
            "description": "Invoice descriptions",
            "example": "ABC Corp."
          },
          "productId": {
            "type": "string",
            "description": "Product Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "priceId": {
            "type": "string",
            "description": "Price Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "Product amount",
            "example": 999
          },
          "qty": {
            "type": "number",
            "description": "Product Quantity",
            "example": 1
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemTaxDto"
            },
            "description": "Tax"
          },
          "automaticTaxCategoryId": {
            "type": "string",
            "description": "Tax category id for calculating automatic tax",
            "example": "6578278e879ad2646715ba9c"
          },
          "isSetupFeeItem": {
            "type": "boolean",
            "description": "Setupfee item, only created when 1st invoice of recurring schedule is generated"
          },
          "type": {
            "enum": [
              "one_time",
              "recurring"
            ],
            "type": "string",
            "description": "Price type of the item",
            "example": "one_time"
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "true if item amount is tax inclusive",
            "default": false,
            "example": true
          }
        }
      },
      "invoices_DiscountDto": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "Discount Value",
            "default": 0,
            "example": 10
          },
          "type": {
            "enum": [
              "percentage",
              "fixed"
            ],
            "type": "string",
            "description": "Discount type",
            "default": "percentage",
            "example": "percentage"
          },
          "validOnProductIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Product Ids on which discount is applicable",
            "example": "[ '6579751d56f60276e5bd4154' ]"
          }
        }
      },
      "TipsConfigurationDto": {
        "required": [
          "tipsPercentage",
          "tipsEnabled"
        ],
        "type": "object",
        "properties": {
          "tipsPercentage": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Percentage of tips allowed",
            "example": [
              5,
              10,
              15
            ]
          },
          "tipsEnabled": {
            "type": "boolean",
            "description": "Tips enabled status",
            "example": true
          }
        }
      },
      "LateFeesFrequencyDto": {
        "required": [
          "interval"
        ],
        "type": "object",
        "properties": {
          "intervalCount": {
            "type": "number",
            "description": "Late fees interval count",
            "example": 10
          },
          "interval": {
            "enum": [
              "minute",
              "hour",
              "day",
              "week",
              "month",
              "one_time"
            ],
            "type": "string",
            "description": "Late fees interval",
            "example": "day"
          }
        }
      },
      "LateFeesGraceDto": {
        "required": [
          "intervalCount",
          "interval"
        ],
        "type": "object",
        "properties": {
          "intervalCount": {
            "type": "number",
            "description": "Late fees grace interval count",
            "example": 10
          },
          "interval": {
            "enum": [
              "day"
            ],
            "type": "string",
            "description": "Late fees grace interval",
            "example": "day"
          }
        }
      },
      "LateFeesMaxFeesDto": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "fixed"
            ],
            "type": "string",
            "example": "fixed"
          },
          "value": {
            "type": "number",
            "description": "10",
            "example": "Max late fees to pay"
          }
        }
      },
      "LateFeesConfigurationDto": {
        "required": [
          "enable",
          "value",
          "type",
          "frequency"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "Enable late fees",
            "example": true
          },
          "value": {
            "type": "number",
            "description": "Late Fees Value",
            "example": 10
          },
          "type": {
            "enum": [
              "fixed",
              "percentage"
            ],
            "type": "string",
            "description": "Late Fees Type",
            "example": "fixed"
          },
          "frequency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LateFeesFrequencyDto"
              }
            ],
            "description": "Late Fees Frequency"
          },
          "grace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LateFeesGraceDto"
              }
            ],
            "description": "Late Fees Grace"
          },
          "maxLateFees": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LateFeesMaxFeesDto"
              }
            ],
            "description": "Max late fees payable"
          }
        }
      },
      "StripePaymentMethodDto": {
        "required": [
          "enableBankDebitOnly"
        ],
        "type": "object",
        "properties": {
          "enableBankDebitOnly": {
            "type": "boolean",
            "description": "Enable Bank Debit Only",
            "example": false
          }
        }
      },
      "PaymentMethodDto": {
        "required": [
          "stripe"
        ],
        "type": "object",
        "properties": {
          "stripe": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StripePaymentMethodDto"
              }
            ],
            "description": "Payment Method"
          }
        }
      },
      "ProcessingFeePaidChargeDto": {
        "required": [
          "name",
          "charge",
          "amount",
          "_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the processing fee",
            "example": "Processing Fee"
          },
          "charge": {
            "type": "number",
            "description": "charge for the processing fee",
            "example": 10
          },
          "amount": {
            "type": "number",
            "description": "amount of the processing fee",
            "example": 10
          },
          "_id": {
            "type": "string",
            "description": "id of the processing fee",
            "example": "673d01d7d547648a8dab6211"
          }
        }
      },
      "ProcessingFeeDto": {
        "required": [
          "charges"
        ],
        "type": "object",
        "properties": {
          "charges": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "charges for the processing fee"
          },
          "collectedMiscellaneousCharges": {
            "type": "number",
            "description": "collected miscellaneous charges",
            "example": 10
          },
          "paidCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessingFeePaidChargeDto"
            },
            "description": "paid miscellaneous charges"
          }
        }
      },
      "CreateInvoiceTemplateDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "businessDetails",
          "currency",
          "items"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "internal": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "Name of the template",
            "example": "New Template"
          },
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetailsDto"
          },
          "currency": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            }
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "termsNotes": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Template title",
            "example": "New Template"
          },
          "tipsConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TipsConfigurationDto"
              }
            ],
            "description": "Configuration for tips on invoices"
          },
          "lateFeesConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LateFeesConfigurationDto"
              }
            ],
            "description": "Late fees configuration for the invoices"
          },
          "invoiceNumberPrefix": {
            "type": "string",
            "description": "prefix for invoice number",
            "example": "INV-"
          },
          "paymentMethods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDto"
              }
            ],
            "description": "Payment Methods for Invoices"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "attachments for the invoice"
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the invoice"
          }
        }
      },
      "CreateInvoiceTemplateResponseDto": {
        "required": [
          "_id",
          "altId",
          "altType",
          "name",
          "businessDetails",
          "currency",
          "items",
          "total",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Template Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the Template",
            "example": "New Template"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "invoiceNumberPrefix": {
            "type": "string",
            "description": "prefix for invoice number",
            "example": "INV-"
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "GetTemplateResponseDto": {
        "required": [
          "_id",
          "altId",
          "altType",
          "name",
          "businessDetails",
          "currency",
          "items",
          "total",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Template Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the Template",
            "example": "New Template"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "invoiceNumberPrefix": {
            "type": "string",
            "description": "prefix for invoice number",
            "example": "INV-"
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "ListTemplatesResponseDto": {
        "required": [
          "data",
          "totalCount"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTemplateResponseDto"
            }
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of Templates",
            "example": 100
          }
        }
      },
      "UpdateInvoiceTemplateDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "businessDetails",
          "currency",
          "items"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "internal": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "Name of the template",
            "example": "New Template"
          },
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetailsDto"
          },
          "currency": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            }
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "termsNotes": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Template title",
            "example": "New Template"
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the invoice"
          }
        }
      },
      "UpdateInvoiceTemplateResponseDto": {
        "required": [
          "_id",
          "altId",
          "altType",
          "name",
          "businessDetails",
          "currency",
          "items",
          "total",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Template Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the Template",
            "example": "New Template"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "invoiceNumberPrefix": {
            "type": "string",
            "description": "prefix for invoice number",
            "example": "INV-"
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "UpdateInvoiceLateFeesConfigurationDto": {
        "required": [
          "altId",
          "altType",
          "lateFeesConfiguration"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "lateFeesConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LateFeesConfigurationDto"
              }
            ],
            "description": "late fees configuration"
          }
        }
      },
      "UpdatePaymentMethodsConfigurationDto": {
        "required": [
          "altId",
          "altType"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "paymentMethods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDto"
              }
            ],
            "description": "Payment Methods for Invoices"
          }
        }
      },
      "DeleteInvoiceTemplateResponseDto": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "success",
            "example": true
          }
        }
      },
      "AdditionalEmailsDto": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "alex@example.com"
          }
        }
      },
      "ContactDetailsDto": {
        "required": [
          "id",
          "name",
          "phoneNo",
          "email"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Contact ID",
            "example": "6578278e879ad2646715ba9c"
          },
          "name": {
            "type": "string",
            "description": "Contact Name",
            "example": "Alex"
          },
          "phoneNo": {
            "type": "string",
            "description": "Contact Phone Number",
            "example": "+1234567890"
          },
          "email": {
            "type": "string",
            "description": "Contact Email",
            "example": "alex@example.com"
          },
          "additionalEmails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalEmailsDto"
            },
            "description": "Secondary email addresses for the contact to be saved"
          },
          "companyName": {
            "type": "string",
            "description": "Contact Company Name",
            "example": "ABC Corp."
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "customFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Custom Values"
          }
        }
      },
      "invoices_CustomRRuleOptionsDto": {
        "required": [
          "intervalType",
          "interval",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "intervalType": {
            "enum": [
              "yearly",
              "monthly",
              "weekly",
              "daily",
              "hourly",
              "minutely",
              "secondly"
            ],
            "type": "string",
            "example": "monthly"
          },
          "interval": {
            "type": "number",
            "example": 2
          },
          "startDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in HH:mm:ss format",
            "example": "20:45:00"
          },
          "endDate": {
            "type": "string",
            "description": "End date in YYYY-MM-DD format",
            "example": "2029-11-01"
          },
          "endTime": {
            "type": "string",
            "description": "End time in HH:mm:ss format",
            "example": "18:45:00"
          },
          "dayOfMonth": {
            "type": "number",
            "description": "-1, 1, 2, 3, ..., 27, 28",
            "example": 15
          },
          "dayOfWeek": {
            "enum": [
              "mo",
              "tu",
              "we",
              "th",
              "fr",
              "sa",
              "su"
            ],
            "type": "string",
            "example": "mo"
          },
          "numOfWeek": {
            "type": "number",
            "description": "-1, 1, 2, 3, 4",
            "example": -1
          },
          "monthOfYear": {
            "enum": [
              "jan",
              "feb",
              "mar",
              "apr",
              "may",
              "jun",
              "jul",
              "aug",
              "sep",
              "oct",
              "nov",
              "dec"
            ],
            "type": "string",
            "example": "jan"
          },
          "count": {
            "type": "number",
            "description": "Max number of task executions",
            "example": 10
          },
          "daysBefore": {
            "type": "number",
            "description": "Execute task number of days before",
            "example": 5
          },
          "useStartAsPrimaryUserAccepted": {
            "type": "boolean",
            "description": "Start as primary user accepted date",
            "example": true
          },
          "endType": {
            "type": "string",
            "description": "End type like after, by, count",
            "example": "by"
          }
        }
      },
      "invoices_ScheduleOptionsDto": {
        "type": "object",
        "properties": {
          "executeAt": {
            "type": "string"
          },
          "rrule": {
            "$ref": "#/components/schemas/CustomRRuleOptionsDto"
          }
        }
      },
      "AttachmentsDto": {
        "required": [
          "id",
          "name",
          "url",
          "type",
          "size"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the file selected",
            "example": "6241712be68f7a98102ba272"
          },
          "name": {
            "type": "string",
            "description": "Name of the file ",
            "example": "Electronics.pdf"
          },
          "url": {
            "type": "string",
            "description": "URL of the file",
            "example": "https://example.com/digital-delivery"
          },
          "type": {
            "type": "string",
            "description": "Type of the file"
          },
          "size": {
            "type": "number",
            "description": "Size of the file",
            "example": 10000
          }
        }
      },
      "CreateInvoiceScheduleDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "contactDetails",
          "schedule",
          "liveMode",
          "businessDetails",
          "currency",
          "items",
          "discount"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "name": {
            "type": "string"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/ContactDetailsDto"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOptionsDto"
          },
          "liveMode": {
            "type": "boolean"
          },
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetailsDto"
          },
          "currency": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            }
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "termsNotes": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "tipsConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TipsConfigurationDto"
              }
            ],
            "description": "Configuration for tips on invoices"
          },
          "lateFeesConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LateFeesConfigurationDto"
              }
            ],
            "description": "Late fees configuration for the invoices"
          },
          "invoiceNumberPrefix": {
            "type": "string",
            "description": "prefix for invoice number",
            "example": "INV-"
          },
          "paymentMethods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDto"
              }
            ],
            "description": "Payment Methods for Invoices"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "attachments for the invoice"
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the invoice"
          }
        }
      },
      "DefaultInvoiceResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "amountPaid",
          "altId",
          "altType",
          "name",
          "businessDetails",
          "invoiceNumber",
          "currency",
          "contactDetails",
          "issueDate",
          "dueDate",
          "invoiceItems",
          "total",
          "title",
          "amountDue",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Invoice Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "enum": [
              "draft",
              "sent",
              "payment_processing",
              "paid",
              "void",
              "partially_paid"
            ],
            "type": "string",
            "description": "Invoice Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "amountPaid": {
            "type": "number",
            "description": "Amount Paid",
            "example": 0
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "businessDetails": {
            "type": "object",
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "invoiceNumber": {
            "type": "number",
            "description": "Invoice Number",
            "example": "19"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "type": "object",
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "discount": {
            "type": "object",
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "amountDue": {
            "type": "number",
            "description": "Total Amount Due",
            "example": 999
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "automaticTaxesCalculated": {
            "type": "boolean",
            "description": "Is Automatic taxes calculated for the Invoice items",
            "example": true
          },
          "paymentSchedule": {
            "type": "object",
            "description": "split invoice into payment schedule summing up to full invoice amount"
          }
        }
      },
      "CreateInvoiceScheduleResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "altId",
          "altType",
          "name",
          "invoices",
          "businessDetails",
          "currency",
          "contactDetails",
          "items",
          "total",
          "title",
          "termsNotes",
          "compiledTermsNotes",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Schedule Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "type": "object",
            "description": "Schedule Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOptionsDto"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
            },
            "description": "List of invoices"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes",
            "example": "Confidential"
          },
          "compiledTermsNotes": {
            "type": "string",
            "description": "Compiled terms notes",
            "example": "Confidential"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "GetScheduleResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "altId",
          "altType",
          "name",
          "invoices",
          "businessDetails",
          "currency",
          "contactDetails",
          "items",
          "total",
          "title",
          "termsNotes",
          "compiledTermsNotes",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Schedule Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "type": "object",
            "description": "Schedule Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOptionsDto"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
            },
            "description": "List of invoices"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes",
            "example": "Confidential"
          },
          "compiledTermsNotes": {
            "type": "string",
            "description": "Compiled terms notes",
            "example": "Confidential"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "ListSchedulesResponseDto": {
        "required": [
          "schedules",
          "total"
        ],
        "type": "object",
        "properties": {
          "schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetScheduleResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of Schedules",
            "example": 100
          }
        }
      },
      "UpdateInvoiceScheduleDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "contactDetails",
          "schedule",
          "liveMode",
          "businessDetails",
          "currency",
          "items",
          "discount"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "name": {
            "type": "string"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/ContactDetailsDto"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOptionsDto"
          },
          "liveMode": {
            "type": "boolean"
          },
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetailsDto"
          },
          "currency": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            }
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "termsNotes": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "attachments for the invoice"
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the invoice"
          }
        }
      },
      "UpdateInvoiceScheduleResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "altId",
          "altType",
          "name",
          "invoices",
          "businessDetails",
          "currency",
          "contactDetails",
          "items",
          "total",
          "title",
          "termsNotes",
          "compiledTermsNotes",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Schedule Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "type": "object",
            "description": "Schedule Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOptionsDto"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
            },
            "description": "List of invoices"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes",
            "example": "Confidential"
          },
          "compiledTermsNotes": {
            "type": "string",
            "description": "Compiled terms notes",
            "example": "Confidential"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "DeleteInvoiceScheduleResponseDto": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "success",
            "example": true
          }
        }
      },
      "UpdateAndScheduleInvoiceScheduleResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "altId",
          "altType",
          "name",
          "invoices",
          "businessDetails",
          "currency",
          "contactDetails",
          "items",
          "total",
          "title",
          "termsNotes",
          "compiledTermsNotes",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Schedule Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "type": "object",
            "description": "Schedule Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOptionsDto"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
            },
            "description": "List of invoices"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes",
            "example": "Confidential"
          },
          "compiledTermsNotes": {
            "type": "string",
            "description": "Compiled terms notes",
            "example": "Confidential"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "invoices_CardDto": {
        "required": [
          "brand",
          "last4"
        ],
        "type": "object",
        "properties": {
          "brand": {
            "type": "string"
          },
          "last4": {
            "type": "string"
          }
        }
      },
      "USBankAccountDto": {
        "required": [
          "bank_name",
          "last4"
        ],
        "type": "object",
        "properties": {
          "bank_name": {
            "type": "string"
          },
          "last4": {
            "type": "string"
          }
        }
      },
      "SepaDirectDebitDTO": {
        "required": [
          "bank_code",
          "last4",
          "branch_code"
        ],
        "type": "object",
        "properties": {
          "bank_code": {
            "type": "string"
          },
          "last4": {
            "type": "string"
          },
          "branch_code": {
            "type": "string"
          }
        }
      },
      "BacsDirectDebitDTO": {
        "required": [
          "sort_code",
          "last4"
        ],
        "type": "object",
        "properties": {
          "sort_code": {
            "type": "string"
          },
          "last4": {
            "type": "string"
          }
        }
      },
      "BecsDirectDebitDTO": {
        "required": [
          "bsb_number",
          "last4"
        ],
        "type": "object",
        "properties": {
          "bsb_number": {
            "type": "string"
          },
          "last4": {
            "type": "string"
          }
        }
      },
      "AutoPaymentDetailsDto": {
        "required": [
          "enable"
        ],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "paymentMethodId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "card": {
            "$ref": "#/components/schemas/CardDto"
          },
          "usBankAccount": {
            "$ref": "#/components/schemas/USBankAccountDto"
          },
          "sepaDirectDebit": {
            "$ref": "#/components/schemas/SepaDirectDebitDTO"
          },
          "bacsDirectDebit": {
            "$ref": "#/components/schemas/BacsDirectDebitDTO"
          },
          "becsDirectDebit": {
            "$ref": "#/components/schemas/BecsDirectDebitDTO"
          },
          "cardId": {
            "type": "string"
          }
        }
      },
      "ScheduleInvoiceScheduleDto": {
        "required": [
          "altId",
          "altType",
          "liveMode"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "liveMode": {
            "type": "boolean"
          },
          "autoPayment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoPaymentDetailsDto"
              }
            ],
            "description": "auto-payment configuration"
          }
        }
      },
      "ScheduleInvoiceScheduleResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "altId",
          "altType",
          "name",
          "invoices",
          "businessDetails",
          "currency",
          "contactDetails",
          "items",
          "total",
          "title",
          "termsNotes",
          "compiledTermsNotes",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Schedule Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "type": "object",
            "description": "Schedule Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOptionsDto"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
            },
            "description": "List of invoices"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes",
            "example": "Confidential"
          },
          "compiledTermsNotes": {
            "type": "string",
            "description": "Compiled terms notes",
            "example": "Confidential"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "AutoPaymentScheduleDto": {
        "required": [
          "altId",
          "altType",
          "id",
          "autoPayment"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "id": {
            "type": "string"
          },
          "autoPayment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoPaymentDetailsDto"
              }
            ],
            "description": "auto-payment configuration"
          }
        }
      },
      "AutoPaymentInvoiceScheduleResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "altId",
          "altType",
          "name",
          "invoices",
          "businessDetails",
          "currency",
          "contactDetails",
          "items",
          "total",
          "title",
          "termsNotes",
          "compiledTermsNotes",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Schedule Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "type": "object",
            "description": "Schedule Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOptionsDto"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
            },
            "description": "List of invoices"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes",
            "example": "Confidential"
          },
          "compiledTermsNotes": {
            "type": "string",
            "description": "Compiled terms notes",
            "example": "Confidential"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "CancelInvoiceScheduleDto": {
        "required": [
          "altId",
          "altType"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          }
        }
      },
      "CancelInvoiceScheduleResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "altId",
          "altType",
          "name",
          "invoices",
          "businessDetails",
          "currency",
          "contactDetails",
          "items",
          "total",
          "title",
          "termsNotes",
          "compiledTermsNotes",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Schedule Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "type": "object",
            "description": "Schedule Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOptionsDto"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
            },
            "description": "List of invoices"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes",
            "example": "Confidential"
          },
          "compiledTermsNotes": {
            "type": "string",
            "description": "Compiled terms notes",
            "example": "Confidential"
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          }
        }
      },
      "SentToDto": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Email Address",
            "example": [
              "alex@example.com"
            ]
          },
          "emailCc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "cc to be kept in any sent out emails",
            "example": [
              "alex@example.com"
            ]
          },
          "emailBcc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "bcc to be kept in any sent out emails",
            "example": [
              "alex@example.com"
            ]
          },
          "phoneNo": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Contact Phone Number",
            "example": [
              "+1-214-559-6993"
            ]
          }
        }
      },
      "PaymentScheduleDto": {
        "required": [
          "type",
          "schedules"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "fixed",
              "percentage"
            ],
            "type": "string",
            "description": "Payment schedule type",
            "example": "percentage"
          },
          "schedules": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "payment schedule item"
          }
        }
      },
      "Text2PayDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "currency",
          "items",
          "contactDetails",
          "issueDate",
          "sentTo",
          "liveMode",
          "action",
          "userId"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "name": {
            "type": "string",
            "description": "Invoice Name",
            "example": "New Invoice"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            },
            "description": "An array of items for the invoice."
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes, Also supports HTML markups",
            "example": "<p>This is a default terms.</p>"
          },
          "title": {
            "type": "string",
            "description": "Title for the invoice",
            "example": "INVOICE"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact information to send the invoice to"
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Invoice Number",
            "example": "1001"
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date in YYYY-MM-DD format",
            "example": "2023-01-14"
          },
          "sentTo": {
            "$ref": "#/components/schemas/SentToDto"
          },
          "liveMode": {
            "type": "boolean"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "paymentSchedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheduleDto"
              }
            ],
            "description": "split invoice into payment schedule summing up to full invoice amount"
          },
          "lateFeesConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LateFeesConfigurationDto"
              }
            ],
            "description": "late fees configuration"
          },
          "tipsConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TipsConfigurationDto"
              }
            ],
            "description": "tips configuration for the invoice"
          },
          "invoiceNumberPrefix": {
            "type": "string",
            "description": "prefix for invoice number",
            "example": "INV-"
          },
          "paymentMethods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDto"
              }
            ],
            "description": "Payment Methods for Invoices"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "attachments for the invoice"
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the invoice"
          },
          "id": {
            "type": "string",
            "description": "id of invoice to update. If skipped, a new invoice will be created"
          },
          "includeTermsNote": {
            "type": "boolean",
            "description": "include terms & notes with receipts",
            "example": true
          },
          "action": {
            "enum": [
              "draft",
              "send"
            ],
            "type": "string",
            "description": "create invoice in draft mode or send mode",
            "example": "draft"
          },
          "userId": {
            "type": "string",
            "description": "id of user generating invoice"
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetailsDto"
          }
        }
      },
      "Text2PayInvoiceResponseDto": {
        "required": [
          "invoice",
          "invoiceUrl"
        ],
        "type": "object",
        "properties": {
          "invoice": {
            "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
          },
          "invoiceUrl": {
            "type": "string",
            "description": "preview url of generated invoice"
          }
        }
      },
      "GenerateInvoiceNumberResponseDto": {
        "type": "object",
        "properties": {
          "invoiceNumber": {
            "type": "number",
            "description": "Invoice Number",
            "example": "19"
          }
        }
      },
      "CreateInvoiceDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "businessDetails",
          "currency",
          "items",
          "discount",
          "contactDetails",
          "issueDate",
          "sentTo",
          "liveMode"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "name": {
            "type": "string",
            "description": "Invoice Name",
            "example": "New Invoice"
          },
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetailsDto"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            },
            "description": "An array of items for the invoice."
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes, Also supports HTML markups",
            "example": "<p>This is a default terms.</p>"
          },
          "title": {
            "type": "string",
            "description": "Title for the invoice",
            "example": "INVOICE"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact information to send the invoice to"
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Invoice Number",
            "example": "1001"
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date in YYYY-MM-DD format",
            "example": "2023-01-14"
          },
          "sentTo": {
            "$ref": "#/components/schemas/SentToDto"
          },
          "liveMode": {
            "type": "boolean"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "paymentSchedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheduleDto"
              }
            ],
            "description": "split invoice into payment schedule summing up to full invoice amount"
          },
          "lateFeesConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LateFeesConfigurationDto"
              }
            ],
            "description": "late fees configuration"
          },
          "tipsConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TipsConfigurationDto"
              }
            ],
            "description": "tips configuration for the invoice"
          },
          "invoiceNumberPrefix": {
            "type": "string",
            "description": "prefix for invoice number",
            "example": "INV-"
          },
          "paymentMethods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDto"
              }
            ],
            "description": "Payment Methods for Invoices"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "attachments for the invoice"
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the invoice"
          }
        }
      },
      "OldCreateInvoiceDTO": {
        "type": "object"
      },
      "CreateInvoiceResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "amountPaid",
          "altId",
          "altType",
          "name",
          "businessDetails",
          "invoiceNumber",
          "currency",
          "contactDetails",
          "issueDate",
          "dueDate",
          "invoiceItems",
          "total",
          "title",
          "amountDue",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Invoice Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "enum": [
              "draft",
              "sent",
              "payment_processing",
              "paid",
              "void",
              "partially_paid"
            ],
            "type": "string",
            "description": "Invoice Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "amountPaid": {
            "type": "number",
            "description": "Amount Paid",
            "example": 0
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "businessDetails": {
            "type": "object",
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "invoiceNumber": {
            "type": "number",
            "description": "Invoice Number",
            "example": "19"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "type": "object",
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "discount": {
            "type": "object",
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "amountDue": {
            "type": "number",
            "description": "Total Amount Due",
            "example": 999
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "automaticTaxesCalculated": {
            "type": "boolean",
            "description": "Is Automatic taxes calculated for the Invoice items",
            "example": true
          },
          "paymentSchedule": {
            "type": "object",
            "description": "split invoice into payment schedule summing up to full invoice amount"
          }
        }
      },
      "TotalSummaryDto": {
        "required": [
          "subTotal",
          "discount",
          "tax"
        ],
        "type": "object",
        "properties": {
          "subTotal": {
            "type": "number",
            "description": "subTotal",
            "example": 999
          },
          "discount": {
            "type": "number",
            "description": "discount",
            "example": 0
          },
          "tax": {
            "type": "number",
            "description": "tax",
            "example": 0
          }
        }
      },
      "ReminderExecutionDetailsList": {
        "type": "object"
      },
      "ReminderDto": {
        "required": [
          "enabled",
          "emailTemplate",
          "smsTemplate",
          "emailSubject",
          "reminderId",
          "reminderName",
          "reminderTime",
          "intervalType",
          "maxReminders",
          "reminderInvoiceCondition",
          "reminderNumber"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Flag indicating if the reminder is enabled or not",
            "example": true
          },
          "emailTemplate": {
            "type": "string",
            "description": "Email template to be used for sending reminders",
            "example": "default"
          },
          "smsTemplate": {
            "type": "string",
            "description": "SMS template to be used for sending reminders",
            "example": "default"
          },
          "emailSubject": {
            "type": "string",
            "description": "Subject of the reminder",
            "example": "Reminder"
          },
          "reminderId": {
            "type": "string",
            "description": "Unique identifier for the reminder",
            "example": "9333e45f-a27d-4659-90e5-76c5ef06d094"
          },
          "reminderName": {
            "type": "string",
            "description": "Name of the reminder",
            "example": "Special Reminder"
          },
          "reminderTime": {
            "enum": [
              "before",
              "after"
            ],
            "type": "string",
            "description": "Time condition for the reminder",
            "example": "before"
          },
          "intervalType": {
            "enum": [
              "yearly",
              "monthly",
              "weekly",
              "daily",
              "hourly",
              "minutely",
              "secondly"
            ],
            "type": "string",
            "description": "Interval type for the reminder",
            "example": "daily"
          },
          "maxReminders": {
            "type": "number",
            "description": "Maximum number of reminders that can be sent",
            "example": 3
          },
          "reminderInvoiceCondition": {
            "enum": [
              "invoice_sent",
              "invoice_overdue"
            ],
            "type": "string",
            "description": "Condition for sending the reminder",
            "example": "invoice_sent"
          },
          "reminderNumber": {
            "type": "number",
            "description": "frequency gap of the reminder to exeucte",
            "example": 10
          },
          "startTime": {
            "type": "string",
            "description": "Business Hour Start Time",
            "example": "9:00 AM"
          },
          "endTime": {
            "type": "string",
            "description": "Business Hour End Time",
            "example": "5:00 PM"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone at which reminder will be sent",
            "example": "businessTZ"
          }
        }
      },
      "ReminderSettingsDto": {
        "required": [
          "defaultEmailTemplateId",
          "reminders"
        ],
        "type": "object",
        "properties": {
          "defaultEmailTemplateId": {
            "type": "string",
            "description": "default template Id of reminder",
            "example": "dhwjqi2899012990w2u"
          },
          "reminders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReminderDto"
            },
            "description": "List of reminders"
          }
        }
      },
      "RemindersConfigurationDto": {
        "required": [
          "reminderExecutionDetailsList",
          "reminderSettings"
        ],
        "type": "object",
        "properties": {
          "reminderExecutionDetailsList": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReminderExecutionDetailsList"
              }
            ],
            "description": "List of reminders"
          },
          "reminderSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReminderSettingsDto"
              }
            ],
            "description": "Reminder settings"
          }
        }
      },
      "GetInvoiceResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "amountPaid",
          "altId",
          "altType",
          "name",
          "businessDetails",
          "invoiceNumber",
          "currency",
          "contactDetails",
          "issueDate",
          "dueDate",
          "invoiceItems",
          "total",
          "title",
          "amountDue",
          "createdAt",
          "updatedAt",
          "totalSummary"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Invoice Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "enum": [
              "draft",
              "sent",
              "payment_processing",
              "paid",
              "void",
              "partially_paid"
            ],
            "type": "string",
            "description": "Invoice Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "amountPaid": {
            "type": "number",
            "description": "Amount Paid",
            "example": 0
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "businessDetails": {
            "type": "object",
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "invoiceNumber": {
            "type": "number",
            "description": "Invoice Number",
            "example": "19"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "type": "object",
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "discount": {
            "type": "object",
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "amountDue": {
            "type": "number",
            "description": "Total Amount Due",
            "example": 999
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "automaticTaxesCalculated": {
            "type": "boolean",
            "description": "Is Automatic taxes calculated for the Invoice items",
            "example": true
          },
          "paymentSchedule": {
            "type": "object",
            "description": "split invoice into payment schedule summing up to full invoice amount"
          },
          "totalSummary": {
            "$ref": "#/components/schemas/TotalSummaryDto"
          },
          "remindersConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RemindersConfigurationDto"
              }
            ],
            "description": "Reminders Configuration"
          }
        }
      },
      "ListInvoicesResponseDto": {
        "required": [
          "invoices",
          "total"
        ],
        "type": "object",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInvoiceResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of invoices",
            "example": 100
          }
        }
      },
      "UpdateInvoiceDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "currency",
          "invoiceItems",
          "issueDate",
          "dueDate"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "name": {
            "type": "string",
            "description": "Name to be updated",
            "example": "New Invoice"
          },
          "title": {
            "type": "string",
            "description": "Title for the invoice",
            "example": "INVOICE"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "ABC Corp payments"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetailsDto"
              }
            ],
            "description": "Business details which need to be updated",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Invoice Number",
            "example": "1001"
          },
          "contactId": {
            "type": "string",
            "description": "Id of the contact which you need to send the invoice",
            "example": "6578278e879ad2646715ba9c"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/ContactDetailsDto"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes, Also supports HTML markups",
            "example": "<p>This is a default terms.</p>"
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            }
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "liveMode": {
            "type": "boolean",
            "description": "Payment mode"
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date in YYYY-MM-DD format",
            "example": "2023-01-14"
          },
          "paymentSchedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheduleDto"
              }
            ],
            "description": "split invoice into payment schedule summing up to full invoice amount"
          },
          "tipsConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TipsConfigurationDto"
              }
            ],
            "description": "tips configuration for the invoice"
          },
          "xeroDetails": {
            "type": "object"
          },
          "invoiceNumberPrefix": {
            "type": "string",
            "description": "prefix for invoice number",
            "example": "INV-"
          },
          "paymentMethods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDto"
              }
            ],
            "description": "Payment Methods for Invoices"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "attachments for the invoice"
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the invoice"
          }
        }
      },
      "UpdateInvoiceResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "amountPaid",
          "altId",
          "altType",
          "name",
          "businessDetails",
          "invoiceNumber",
          "currency",
          "contactDetails",
          "issueDate",
          "dueDate",
          "invoiceItems",
          "total",
          "title",
          "amountDue",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Invoice Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "enum": [
              "draft",
              "sent",
              "payment_processing",
              "paid",
              "void",
              "partially_paid"
            ],
            "type": "string",
            "description": "Invoice Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "amountPaid": {
            "type": "number",
            "description": "Amount Paid",
            "example": 0
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "businessDetails": {
            "type": "object",
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "invoiceNumber": {
            "type": "number",
            "description": "Invoice Number",
            "example": "19"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "type": "object",
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "discount": {
            "type": "object",
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "amountDue": {
            "type": "number",
            "description": "Total Amount Due",
            "example": 999
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "automaticTaxesCalculated": {
            "type": "boolean",
            "description": "Is Automatic taxes calculated for the Invoice items",
            "example": true
          },
          "paymentSchedule": {
            "type": "object",
            "description": "split invoice into payment schedule summing up to full invoice amount"
          }
        }
      },
      "DeleteInvoiceResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "amountPaid",
          "altId",
          "altType",
          "name",
          "businessDetails",
          "invoiceNumber",
          "currency",
          "contactDetails",
          "issueDate",
          "dueDate",
          "invoiceItems",
          "total",
          "title",
          "amountDue",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Invoice Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "enum": [
              "draft",
              "sent",
              "payment_processing",
              "paid",
              "void",
              "partially_paid"
            ],
            "type": "string",
            "description": "Invoice Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "amountPaid": {
            "type": "number",
            "description": "Amount Paid",
            "example": 0
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "businessDetails": {
            "type": "object",
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "invoiceNumber": {
            "type": "number",
            "description": "Invoice Number",
            "example": "19"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "type": "object",
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "discount": {
            "type": "object",
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "amountDue": {
            "type": "number",
            "description": "Total Amount Due",
            "example": 999
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "automaticTaxesCalculated": {
            "type": "boolean",
            "description": "Is Automatic taxes calculated for the Invoice items",
            "example": true
          },
          "paymentSchedule": {
            "type": "object",
            "description": "split invoice into payment schedule summing up to full invoice amount"
          }
        }
      },
      "VoidInvoiceDto": {
        "required": [
          "altId",
          "altType"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          }
        }
      },
      "VoidInvoiceResponseDto": {
        "required": [
          "_id",
          "status",
          "liveMode",
          "amountPaid",
          "altId",
          "altType",
          "name",
          "businessDetails",
          "invoiceNumber",
          "currency",
          "contactDetails",
          "issueDate",
          "dueDate",
          "invoiceItems",
          "total",
          "title",
          "amountDue",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Invoice Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "enum": [
              "draft",
              "sent",
              "payment_processing",
              "paid",
              "void",
              "partially_paid"
            ],
            "type": "string",
            "description": "Invoice Status",
            "example": "draft"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Live Mode",
            "example": false
          },
          "amountPaid": {
            "type": "number",
            "description": "Amount Paid",
            "example": 0
          },
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice",
            "example": "New Invoice"
          },
          "businessDetails": {
            "type": "object",
            "description": "Business Details",
            "example": {
              "name": "Alex",
              "address": {
                "addressLine1": "9931 Beechwood",
                "city": "St. Houston",
                "state": "TX",
                "countryCode": "USA",
                "postalCode": "559-6993"
              },
              "phoneNo": "+1-214-559-6993",
              "website": "www.example.com"
            }
          },
          "invoiceNumber": {
            "type": "number",
            "description": "Invoice Number",
            "example": "19"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "contactDetails": {
            "type": "object",
            "description": "Contact Details",
            "example": {
              "id": "c6tZZU0rJBf30ZXx9Gli",
              "phoneNo": "+1-214-559-6993",
              "email": "alex@example.com",
              "customFields": [ ],
              "name": "Alex",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date in YYYY-MM-DD format",
            "example": "2023-01-01"
          },
          "discount": {
            "type": "object",
            "description": "Discount",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Invoice Items",
            "example": [
              {
                "taxes": [ ],
                "_id": "c6tZZU0rJBf30ZXx9Gli",
                "productId": "c6tZZU0rJBf30ZXx9Gli",
                "priceId": "c6tZZU0rJBf30ZXx9Gli",
                "currency": "USD",
                "name": "Macbook Pro",
                "qty": 1,
                "amount": 999
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "Total Amount",
            "example": 999
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "INVOICE"
          },
          "amountDue": {
            "type": "number",
            "description": "Total Amount Due",
            "example": 999
          },
          "createdAt": {
            "type": "string",
            "description": "created at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "updated at",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Invoice",
            "example": true
          },
          "automaticTaxesCalculated": {
            "type": "boolean",
            "description": "Is Automatic taxes calculated for the Invoice items",
            "example": true
          },
          "paymentSchedule": {
            "type": "object",
            "description": "split invoice into payment schedule summing up to full invoice amount"
          }
        }
      },
      "InvoiceSettingsSenderConfigurationDto": {
        "type": "object",
        "properties": {
          "fromName": {
            "type": "string",
            "description": "Sender name to be used while sending invoice",
            "example": "Alex"
          },
          "fromEmail": {
            "type": "string",
            "description": "Email id to be used while sending out invoices",
            "example": "alex@example.com"
          }
        }
      },
      "SendInvoiceDto": {
        "required": [
          "altId",
          "altType",
          "userId",
          "action",
          "liveMode"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "userId": {
            "type": "string",
            "description": "Please ensure that the UserId corresponds to an authorized personnel, either by an employee ID or agency ID, to access this location. This account will serve as the primary channel for all future communications and updates.",
            "example": "6578278e879ad2646715ba9c"
          },
          "action": {
            "enum": [
              "sms_and_email",
              "send_manually",
              "email",
              "sms"
            ],
            "type": "string"
          },
          "liveMode": {
            "type": "boolean"
          },
          "sentFrom": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceSettingsSenderConfigurationDto"
              }
            ],
            "description": "sender details for invoice, valid only if invoice is not sent manually"
          },
          "autoPayment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoPaymentDetailsDto"
              }
            ],
            "description": "auto-payment configuration"
          }
        }
      },
      "SendInvoicesResponseDto": {
        "required": [
          "invoice",
          "smsData",
          "emailData"
        ],
        "type": "object",
        "properties": {
          "invoice": {
            "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
          },
          "smsData": {
            "type": "object"
          },
          "emailData": {
            "type": "object"
          }
        }
      },
      "invoices_ChequeDto": {
        "required": [
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "check number",
            "example": "129-129-129-912"
          }
        }
      },
      "RecordPaymentDto": {
        "required": [
          "altId",
          "altType",
          "mode",
          "card",
          "cheque",
          "notes"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "location Id / company Id based on altType",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type",
            "example": "location"
          },
          "mode": {
            "enum": [
              "cash",
              "card",
              "cheque",
              "bank_transfer",
              "other"
            ],
            "type": "string",
            "description": "manual payment method",
            "example": "card"
          },
          "card": {
            "$ref": "#/components/schemas/CardDto"
          },
          "cheque": {
            "$ref": "#/components/schemas/ChequeDto"
          },
          "notes": {
            "type": "string",
            "description": "Any note to be recorded with the transaction",
            "example": "This was a direct payment"
          },
          "amount": {
            "type": "number",
            "description": "Amount to be paid against the invoice.",
            "example": 999
          },
          "meta": {
            "type": "object"
          },
          "paymentScheduleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Payment Schedule Ids to be recorded against the invoice.",
            "example": [
              "6578278e879ad2646715ba9c"
            ]
          },
          "fulfilledAt": {
            "type": "string",
            "description": "Updated At to be recorded against the invoice.",
            "example": "2025-03-19T05:03:00.000Z"
          }
        }
      },
      "RecordPaymentResponseDto": {
        "required": [
          "success",
          "invoice"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "status",
            "example": true
          },
          "invoice": {
            "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
          }
        }
      },
      "PatchInvoiceStatsLastViewedDto": {
        "required": [
          "invoiceId"
        ],
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "string",
            "description": "Invoice Id",
            "example": "6578278e879ad2646715ba9c"
          }
        }
      },
      "SendEstimateDto": {
        "required": [
          "altId",
          "altType",
          "action",
          "liveMode",
          "userId"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "action": {
            "enum": [
              "sms_and_email",
              "send_manually",
              "email",
              "sms"
            ],
            "type": "string"
          },
          "liveMode": {
            "type": "boolean",
            "description": "livemode for estimate",
            "example": true
          },
          "userId": {
            "type": "string",
            "description": "Please ensure that the UserId corresponds to an authorized personnel, either by an employee ID or agency ID, to access this location. This account will serve as the primary channel for all future communications and updates.",
            "example": "6578278e879ad2646715ba9c"
          },
          "sentFrom": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceSettingsSenderConfigurationDto"
              }
            ],
            "description": "sender details for invoice, valid only if invoice is not sent manually"
          },
          "estimateName": {
            "type": "string",
            "description": "estimate name",
            "example": "Estimate"
          }
        }
      },
      "FrequencySettingsDto": {
        "required": [
          "enabled",
          "schedule"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "enabled for the frequency settings",
            "example": true
          },
          "schedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleOptionsDto"
              }
            ],
            "description": "schedule setting for the estimate"
          }
        }
      },
      "AutoInvoicingDto": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable Auto Invoice",
            "example": true
          },
          "directPayments": {
            "type": "boolean",
            "description": "Direct Payments",
            "example": true
          }
        }
      },
      "PaymentScheduleDateConfigDto": {
        "required": [
          "depositDateType",
          "scheduleDateType"
        ],
        "type": "object",
        "properties": {
          "depositDateType": {
            "enum": [
              "estimate_accepted",
              "custom"
            ],
            "type": "string",
            "description": "Deposit date type",
            "example": "estimate_accepted"
          },
          "scheduleDateType": {
            "enum": [
              "regular_interval",
              "custom"
            ],
            "type": "string",
            "description": "Payment Schedule Date Type",
            "example": "regular_interval"
          }
        }
      },
      "PaymentScheduleConfigDto": {
        "required": [
          "type",
          "dateConfig",
          "schedules"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "fixed",
              "percentage"
            ],
            "type": "string",
            "description": "Payment Schedule Type",
            "example": "fixed"
          },
          "dateConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheduleDateConfigDto"
              }
            ],
            "description": "Due date type configuration"
          },
          "schedules": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "Payment Schedule Items"
          }
        }
      },
      "CreateEstimatesDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "businessDetails",
          "currency",
          "items",
          "discount",
          "contactDetails",
          "frequencySettings"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Estimate Name",
            "example": "Home Service Estimate"
          },
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetailsDto"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            },
            "description": "An array of items for the estimate."
          },
          "liveMode": {
            "type": "boolean",
            "description": "livemode for estimate",
            "default": true,
            "example": true
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes, Also supports HTML markups",
            "example": "<p>This is a default terms.</p>"
          },
          "title": {
            "type": "string",
            "description": "Title for the estimate",
            "example": "ESTIMATE"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact information to send the estimate to"
          },
          "estimateNumber": {
            "type": "number",
            "description": "Estimate Number, if not specified will take in the next valid estimate number",
            "example": 1001
          },
          "issueDate": {
            "type": "string",
            "description": "issue date estimate",
            "example": "2024-08-07"
          },
          "expiryDate": {
            "type": "string",
            "description": "expiry date estimate",
            "example": "2024-08-10"
          },
          "sentTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SentToDto"
              }
            ],
            "description": "Email and sent to details for the estimate"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Estimate",
            "default": false,
            "example": true
          },
          "meta": {
            "type": "object",
            "description": "Meta data for the estimate",
            "example": {
              "key": "value"
            }
          },
          "sendEstimateDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SendEstimateDto"
              }
            ],
            "description": "When sending estimate directly while saving"
          },
          "frequencySettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrequencySettingsDto"
              }
            ],
            "description": "frequency settings for the estimate"
          },
          "estimateNumberPrefix": {
            "type": "string",
            "description": "Prefix for the estimate number",
            "default": "EST-",
            "example": "EST-"
          },
          "userId": {
            "type": "string",
            "description": "User Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "attachments for the invoice"
          },
          "autoInvoice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoInvoicingDto"
              }
            ],
            "description": "Auto invoice for the estimate",
            "example": {
              "enabled": true,
              "directPayments": true
            }
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the estimate"
          },
          "paymentScheduleConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheduleConfigDto"
              }
            ],
            "description": "Payment Schedule Config for the estimate"
          }
        }
      },
      "BusinessDetails": {
        "type": "object"
      },
      "ContactDetails": {
        "type": "object"
      },
      "SentTo": {
        "type": "object"
      },
      "AutoInvoice": {
        "type": "object"
      },
      "EstimateResponseDto": {
        "required": [
          "altId",
          "altType",
          "_id",
          "liveMode",
          "deleted",
          "name",
          "currency",
          "businessDetails",
          "items",
          "discount",
          "total",
          "createdAt",
          "updatedAt",
          "__v",
          "automaticTaxesEnabled",
          "companyId",
          "contactDetails",
          "issueDate",
          "expiryDate",
          "automaticTaxesCalculated",
          "meta",
          "estimateActionHistory",
          "sentTo",
          "frequencySettings",
          "lastVisitedAt",
          "totalamountInUSD",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "_id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "67ac9a51106ee8311e911XXXX"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Indicates if it is in live mode",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates if deleted",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Estimate Name"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetails"
              }
            ],
            "description": "Business details associated with the estimate",
            "example": {
              "logoUrl": "your_image-url",
              "name": "Business name",
              "address": {
                "addressLine1": "address line 1",
                "city": "Test City",
                "state": "State Name",
                "countryCode": "US",
                "postalCode": "12345"
              },
              "phoneNo": "+1 1234567890",
              "website": "www.example.com",
              "customValues": [
                {
                  "name": "Test",
                  "fieldKey": "{{custom_values.test}}",
                  "id": "5DYTWoiQvWiIJZXX44XXX",
                  "value": "Test's Custom Value"
                }
              ]
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "An array of items",
            "example": [
              {
                "taxes": [ ],
                "taxInclusive": false,
                "_id": "67ac9a51106ee8311e911XXXX",
                "description": "<p>Futuristic anti-gravity racing</p>",
                "currency": "USD",
                "productId": "67ac9a51106ee8311e911XXXX",
                "priceId": "67ac9a51106ee8311e911XXXX",
                "amount": 9.99,
                "qty": 1,
                "name": "TEST",
                "type": "one_time"
              },
              {
                "taxes": [
                  {
                    "_id": "67ac9a51106ee8311e911XXXX",
                    "name": "TaxTwo",
                    "rate": 8.5,
                    "calculation": "exclusive"
                  }
                ],
                "taxInclusive": true,
                "_id": "67ac9a51106ee8311e911XXXX",
                "productId": "67ac9a51106ee8311e911XXXX",
                "priceId": "67ac9a51106ee8311e911XXXX",
                "currency": "USD",
                "name": "TEST2",
                "qty": 1,
                "amount": 500,
                "description": "",
                "type": "recurring"
              }
            ]
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount details for the estimate template",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "ESTIMATE"
          },
          "estimateNumberPrefix": {
            "type": "string",
            "description": "Estimate number prefix",
            "example": "EST-"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "Attachments"
          },
          "updatedBy": {
            "type": "string",
            "description": "User Id of who last updated",
            "example": "3HIpOF9NIc5ltriQXXXX"
          },
          "total": {
            "type": "number",
            "description": "Total amount",
            "example": 1222.03
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when created",
            "format": "date-time",
            "example": "2025-02-12T13:17:47.416Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp when last updated",
            "format": "date-time",
            "example": "2025-02-12T13:17:47.416Z"
          },
          "__v": {
            "type": "number",
            "description": "Version number",
            "example": 0
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Indicates if automatic taxes are enabled for this estimate",
            "example": false
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms and conditions for the estimate, supports HTML markup",
            "example": "<p>All services are subject to availability.</p>"
          },
          "companyId": {
            "type": "string",
            "description": "Company identifier associated with the estimate",
            "example": "COMP12345"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "Contact details for the estimate",
            "example": {
              "id": "jvzfKTNdE7OYXXXXXX",
              "name": "Contact Name",
              "phoneNo": "+911111111114",
              "email": "email@test.com",
              "address": {
                "countryCode": "US"
              }
            }
          },
          "issueDate": {
            "type": "string",
            "description": "Date when the estimate was issued",
            "format": "date-time",
            "example": "2023-06-15T00:00:00.000Z"
          },
          "expiryDate": {
            "type": "string",
            "description": "Date when the estimate expires",
            "format": "date-time",
            "example": "2023-07-15T00:00:00.000Z"
          },
          "sentBy": {
            "type": "string",
            "description": "User who sent the estimate",
            "example": "user@example.com"
          },
          "automaticTaxesCalculated": {
            "type": "boolean",
            "description": "Indicates if automatic taxes were calculated",
            "example": true
          },
          "meta": {
            "type": "object",
            "description": "Additional metadata associated with the estimate",
            "example": {
              "key": "value"
            }
          },
          "estimateActionHistory": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "History of actions taken on the estimate",
            "example": [
              {
                "action": "Created",
                "timestamp": "2023-06-15T10:00:00.000Z"
              }
            ]
          },
          "sentTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SentTo"
              }
            ],
            "description": "Recipient details for the estimate",
            "example": {
              "email": [
                "test@example.com"
              ],
              "phoneNo": [
                "+1 99444444444"
              ]
            }
          },
          "frequencySettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrequencySettingsDto"
              }
            ],
            "description": "Frequency settings for recurring estimates"
          },
          "lastVisitedAt": {
            "type": "string",
            "description": "Timestamp when the estimate was last visited",
            "format": "date-time",
            "example": "2023-06-20T08:30:00.000Z"
          },
          "totalamountInUSD": {
            "type": "number",
            "description": "Total amount in USD",
            "example": 1500.75
          },
          "autoInvoice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoInvoice"
              }
            ],
            "description": "Auto-invoice settings for the estimate",
            "example": {
              "enabled": true,
              "directPayments": false
            }
          },
          "traceId": {
            "type": "string",
            "description": "Trace ID for logging and debugging",
            "example": "010c7a01-857f-4619-970d-xyxyxyxy"
          }
        }
      },
      "UpdateEstimateDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "businessDetails",
          "currency",
          "items",
          "discount",
          "contactDetails",
          "frequencySettings"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Estimate Name",
            "example": "Home Service Estimate"
          },
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetailsDto"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            },
            "description": "An array of items for the estimate."
          },
          "liveMode": {
            "type": "boolean",
            "description": "livemode for estimate",
            "default": true,
            "example": true
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes, Also supports HTML markups",
            "example": "<p>This is a default terms.</p>"
          },
          "title": {
            "type": "string",
            "description": "Title for the estimate",
            "example": "ESTIMATE"
          },
          "contactDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailsDto"
              }
            ],
            "description": "Contact information to send the estimate to"
          },
          "estimateNumber": {
            "type": "number",
            "description": "Estimate Number, if not specified will take in the next valid estimate number",
            "example": 1001
          },
          "issueDate": {
            "type": "string",
            "description": "issue date estimate",
            "example": "2024-08-07"
          },
          "expiryDate": {
            "type": "string",
            "description": "expiry date estimate",
            "example": "2024-08-10"
          },
          "sentTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SentToDto"
              }
            ],
            "description": "Email and sent to details for the estimate"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Estimate",
            "default": false,
            "example": true
          },
          "meta": {
            "type": "object",
            "description": "Meta data for the estimate",
            "example": {
              "key": "value"
            }
          },
          "sendEstimateDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SendEstimateDto"
              }
            ],
            "description": "When sending estimate directly while saving"
          },
          "frequencySettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrequencySettingsDto"
              }
            ],
            "description": "frequency settings for the estimate"
          },
          "estimateNumberPrefix": {
            "type": "string",
            "description": "Prefix for the estimate number",
            "default": "EST-",
            "example": "EST-"
          },
          "userId": {
            "type": "string",
            "description": "User Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "attachments for the invoice"
          },
          "autoInvoice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoInvoicingDto"
              }
            ],
            "description": "Auto invoice for the estimate",
            "example": {
              "enabled": true,
              "directPayments": true
            }
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the estimate"
          },
          "paymentScheduleConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheduleConfigDto"
              }
            ],
            "description": "Payment Schedule Config for the estimate"
          },
          "estimateStatus": {
            "enum": [
              "all",
              "draft",
              "sent",
              "accepted",
              "declined",
              "invoiced",
              "viewed"
            ],
            "type": "string",
            "description": "Estimate Status",
            "example": "sent"
          }
        }
      },
      "GenerateEstimateNumberResponse": {
        "required": [
          "estimateNumber",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "estimateNumber": {
            "type": "number"
          },
          "traceId": {
            "type": "string"
          }
        }
      },
      "AltDto": {
        "required": [
          "altId",
          "altType"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          }
        }
      },
      "CreateInvoiceFromEstimateDto": {
        "required": [
          "altId",
          "altType",
          "markAsInvoiced"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "markAsInvoiced": {
            "type": "boolean",
            "description": "Mark Estimate as Invoiced",
            "example": true
          },
          "version": {
            "enum": [
              "v1",
              "v2"
            ],
            "type": "string",
            "description": "Version of the update request",
            "example": "v2"
          }
        }
      },
      "CreateInvoiceFromEstimateResponseDTO": {
        "required": [
          "estimate",
          "invoice"
        ],
        "type": "object",
        "properties": {
          "estimate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateResponseDto"
              }
            ],
            "description": "Estimate details"
          },
          "invoice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
              }
            ],
            "description": "Invoice details"
          }
        }
      },
      "ListEstimatesResponseDTO": {
        "required": [
          "estimates",
          "total",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "estimates": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of estimates"
          },
          "total": {
            "type": "number",
            "description": "Total number of estimates"
          },
          "traceId": {
            "type": "string",
            "description": "Unique identifier for tracing the request"
          }
        }
      },
      "EstimateIdParam": {
        "required": [
          "estimateId"
        ],
        "type": "object",
        "properties": {
          "estimateId": {
            "type": "string",
            "description": "Estimate Id",
            "example": "5f9d6d8b1b2d2c001f2d9e4b"
          }
        }
      },
      "ListEstimateTemplateResponseDTO": {
        "required": [
          "data",
          "totalCount",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of estimate templates"
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of estimate templates available"
          },
          "traceId": {
            "type": "string",
            "description": "Unique identifier for tracing the request"
          }
        }
      },
      "EstimateTemplatesDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "businessDetails",
          "currency",
          "items",
          "discount"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Estimate Name",
            "example": "Home Service Estimate Template"
          },
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetailsDto"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "An array of items for the estimate."
          },
          "liveMode": {
            "type": "boolean",
            "description": "livemode for estimate",
            "default": true,
            "example": true
          },
          "discount": {
            "$ref": "#/components/schemas/DiscountDto"
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms notes, Also supports HTML markups",
            "example": "<p>This is a default terms.</p>"
          },
          "title": {
            "type": "string",
            "description": "Title for the estimate",
            "example": "ESTIMATE"
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Automatic taxes enabled for the Estimate",
            "default": false,
            "example": true
          },
          "meta": {
            "type": "object",
            "description": "Meta data for the estimate",
            "example": {
              "key": "value"
            }
          },
          "sendEstimateDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SendEstimateDto"
              }
            ],
            "description": "When sending estimate directly while saving"
          },
          "estimateNumberPrefix": {
            "type": "string",
            "description": "Prefix for the estimate number",
            "default": "EST-",
            "example": "EST-"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "attachments for the invoice"
          },
          "miscellaneousCharges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingFeeDto"
              }
            ],
            "description": "miscellaneous charges for the estimate"
          }
        }
      },
      "EstimateTemplateResponseDTO": {
        "required": [
          "altId",
          "altType",
          "_id",
          "liveMode",
          "deleted",
          "name",
          "currency",
          "businessDetails",
          "items",
          "discount",
          "total",
          "createdAt",
          "updatedAt",
          "__v",
          "automaticTaxesEnabled"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "_id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "67ac9a51106ee8311e911XXXX"
          },
          "liveMode": {
            "type": "boolean",
            "description": "Indicates if it is in live mode",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates if deleted",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Estimate Name"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "businessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetails"
              }
            ],
            "description": "Business details associated with the estimate",
            "example": {
              "logoUrl": "your_image-url",
              "name": "Business name",
              "address": {
                "addressLine1": "address line 1",
                "city": "Test City",
                "state": "State Name",
                "countryCode": "US",
                "postalCode": "12345"
              },
              "phoneNo": "+1 1234567890",
              "website": "www.example.com",
              "customValues": [
                {
                  "name": "Test",
                  "fieldKey": "{{custom_values.test}}",
                  "id": "5DYTWoiQvWiIJZXX44XXX",
                  "value": "Test's Custom Value"
                }
              ]
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "An array of items",
            "example": [
              {
                "taxes": [ ],
                "taxInclusive": false,
                "_id": "67ac9a51106ee8311e911XXXX",
                "description": "<p>Futuristic anti-gravity racing</p>",
                "currency": "USD",
                "productId": "67ac9a51106ee8311e911XXXX",
                "priceId": "67ac9a51106ee8311e911XXXX",
                "amount": 9.99,
                "qty": 1,
                "name": "TEST",
                "type": "one_time"
              },
              {
                "taxes": [
                  {
                    "_id": "67ac9a51106ee8311e911XXXX",
                    "name": "TaxTwo",
                    "rate": 8.5,
                    "calculation": "exclusive"
                  }
                ],
                "taxInclusive": true,
                "_id": "67ac9a51106ee8311e911XXXX",
                "productId": "67ac9a51106ee8311e911XXXX",
                "priceId": "67ac9a51106ee8311e911XXXX",
                "currency": "USD",
                "name": "TEST2",
                "qty": 1,
                "amount": 500,
                "description": "",
                "type": "recurring"
              }
            ]
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountDto"
              }
            ],
            "description": "Discount details for the estimate template",
            "example": {
              "type": "percentage",
              "value": 0
            }
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "ESTIMATE"
          },
          "estimateNumberPrefix": {
            "type": "string",
            "description": "Estimate number prefix",
            "example": "EST-"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentsDto"
            },
            "description": "Attachments"
          },
          "updatedBy": {
            "type": "string",
            "description": "User Id of who last updated",
            "example": "3HIpOF9NIc5ltriQXXXX"
          },
          "total": {
            "type": "number",
            "description": "Total amount",
            "example": 1222.03
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when created",
            "format": "date-time",
            "example": "2025-02-12T13:17:47.416Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp when last updated",
            "format": "date-time",
            "example": "2025-02-12T13:17:47.416Z"
          },
          "__v": {
            "type": "number",
            "description": "Version number",
            "example": 0
          },
          "automaticTaxesEnabled": {
            "type": "boolean",
            "description": "Indicates if automatic taxes are enabled for this estimate",
            "example": false
          },
          "termsNotes": {
            "type": "string",
            "description": "Terms and conditions for the estimate, supports HTML markup",
            "example": "<p>All services are subject to availability.</p>"
          }
        }
      },
      "GetSurveysSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "I5GFa3d3cKjojpe4VVUx"
          },
          "name": {
            "type": "string",
            "example": "Survey 1"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "GetSurveysSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "surveys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSurveysSchema"
            }
          },
          "total": {
            "type": "number",
            "description": "Number of surveys",
            "example": 20
          }
        }
      },
      "surveys_PageDetailsSchema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://example.com"
          },
          "title": {
            "type": "string",
            "example": "Example Page"
          }
        }
      },
      "surveys_ContactSessionIds": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "example": [
              "session1",
              "session2"
            ]
          }
        }
      },
      "surveys_EventDataSchema": {
        "type": "object",
        "properties": {
          "fbc": {
            "type": "string",
            "example": "fb.1.123456789.987654321"
          },
          "fbp": {
            "type": "string",
            "example": "fbp.1.987654321.123456789"
          },
          "page": {
            "$ref": "#/components/schemas/PageDetailsSchema"
          },
          "type": {
            "type": "string",
            "example": "page-visit"
          },
          "domain": {
            "type": "string",
            "example": "example.com"
          },
          "medium": {
            "type": "string",
            "example": "survey"
          },
          "source": {
            "type": "string",
            "example": "Direct traffic"
          },
          "version": {
            "type": "string",
            "example": "v3"
          },
          "adSource": {
            "type": "string",
            "example": "example-ad-source"
          },
          "mediumId": {
            "type": "string",
            "example": "medium-id-123"
          },
          "parentId": {
            "type": "string",
            "example": "parent-id-456"
          },
          "referrer": {
            "type": "string",
            "example": "https://staging.gohighlevel.com"
          },
          "fbEventId": {
            "type": "string",
            "example": "event-id-789"
          },
          "timestamp": {
            "type": "number",
            "example": 1234567890
          },
          "parentName": {
            "type": "string",
            "example": "Parent Survey"
          },
          "fingerprint": {
            "type": "string",
            "example": "example-fingerprint"
          },
          "pageVisitType": {
            "type": "string",
            "example": "survey"
          },
          "contactSessionIds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactSessionIds"
              }
            ],
            "nullable": true
          }
        }
      },
      "surveys_othersSchema": {
        "type": "object",
        "properties": {
          "__submissions_other_field__": {
            "type": "string",
            "example": "john@deo.com"
          },
          "__custom_field_id__": {
            "type": "string",
            "example": "20"
          },
          "eventData": {
            "$ref": "#/components/schemas/EventDataSchema"
          },
          "fieldsOriSequance": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "full_name",
              "first_name",
              "last_name",
              "phone",
              "email"
            ]
          }
        }
      },
      "SubmissionSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "be759b9a-c3ec-4b29-ba07-fc3c89c77673"
          },
          "contactId": {
            "type": "string",
            "example": "9NkT25Vor1v4aQatFsv2"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-01T18:02:21.000Z"
          },
          "surveyId": {
            "type": "string",
            "example": "jjusM6EOngDExnbo2DbU"
          },
          "name": {
            "type": "string",
            "example": "test"
          },
          "email": {
            "type": "string",
            "example": "test@test.com"
          },
          "others": {
            "$ref": "#/components/schemas/othersSchema"
          }
        }
      },
      "surveys_metaSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 1
          },
          "currentPage": {
            "type": "number",
            "example": 1
          },
          "nextPage": {
            "type": "number",
            "nullable": true
          },
          "prevPage": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "GetSurveysSubmissionSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "submissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmissionSchema"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/metaSchema"
          }
        }
      },
      "OptionDTO": {
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the option (Included in Create and Response, excluded in Update)"
          },
          "label": {
            "type": "string",
            "description": "Value of the option"
          },
          "url": {
            "type": "string",
            "description": "URL associated with the option (Optional, valid only for RADIO type)"
          }
        }
      },
      "ICustomField": {
        "required": [
          "locationId",
          "showInForms",
          "id",
          "objectKey",
          "dataType",
          "parentId",
          "fieldKey",
          "dateAdded",
          "dateUpdated"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "name": {
            "type": "string",
            "description": "Field name",
            "example": "Name"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for the field"
          },
          "showInForms": {
            "type": "boolean",
            "description": "Whether the field should be shown in forms"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionDTO"
            },
            "description": "Options for the field (Optional, valid only for SINGLE_OPTIONS, MULTIPLE_OPTIONS, RADIO, CHECKBOX, TEXTBOX_LIST type)"
          },
          "acceptedFormats": {
            "enum": [
              ".pdf",
              ".docx",
              ".doc",
              ".jpg",
              ".jpeg",
              ".png",
              ".gif",
              ".csv",
              ".xlsx",
              ".xls",
              "all"
            ],
            "type": "string",
            "description": "Allowed file formats for uploads. Options include: .pdf, .docx, .doc, .jpg, .jpeg, .png, .gif, .csv, .xlsx, .xls, all"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the object"
          },
          "objectKey": {
            "type": "string",
            "description": "The key for your custom / standard object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
            "example": "custom_object.pet"
          },
          "dataType": {
            "enum": [
              "TEXT",
              "LARGE_TEXT",
              "NUMERICAL",
              "PHONE",
              "MONETORY",
              "CHECKBOX",
              "SINGLE_OPTIONS",
              "MULTIPLE_OPTIONS",
              "DATE",
              "TEXTBOX_LIST",
              "FILE_UPLOAD",
              "RADIO"
            ],
            "type": "string",
            "description": "Type of field that you are trying to create"
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent folder",
            "example": "3v34PM428h8vShlRW1KT"
          },
          "fieldKey": {
            "type": "string",
            "description": "Field key. For Custom Object it's formatted as \"custom_object.{objectKey}.{fieldKey}\". \"custom_object\" is a fixed prefix, \"{objectKey}\" is your custom object's identifier, and \"{fieldName}\" is the unique field name within that object. Example: \"custom_object.pet.name\" for a \"name\" field in a \"pet\" custom object.",
            "example": "custom_object.pet.name"
          },
          "allowCustomOption": {
            "type": "boolean",
            "description": "Determines if users can add a custom option value different from the predefined options in records for RADIO type fields. A custom value added in one record does not automatically become an option and will not appear as an option for other records.",
            "example": true
          },
          "maxFileLimit": {
            "type": "number",
            "description": "Maximum file limit for uploads",
            "example": 2
          },
          "dateAdded": {
            "type": "string",
            "description": "Date and time when the object was added",
            "format": "date-time"
          },
          "dateUpdated": {
            "type": "string",
            "description": "Date and time when the object was last updated",
            "format": "date-time"
          }
        }
      },
      "custom_fields_CustomFieldSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/ICustomField"
          }
        }
      },
      "CustomFieldsResponseDTO": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICustomField"
            },
            "description": "Custom Fields for the object."
          },
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICustomField"
            },
            "description": "Custom Fields folder for the object."
          }
        }
      },
      "custom_fields_CreateCustomFieldsDTO": {
        "required": [
          "locationId",
          "showInForms",
          "dataType",
          "fieldKey",
          "objectKey",
          "parentId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "name": {
            "type": "string",
            "description": "Field name",
            "example": "Name"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for the field"
          },
          "showInForms": {
            "type": "boolean",
            "description": "Whether the field should be shown in forms"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionDTO"
            },
            "description": "Options for the field (Optional, valid only for SINGLE_OPTIONS, MULTIPLE_OPTIONS, RADIO, CHECKBOX, TEXTBOX_LIST type)"
          },
          "acceptedFormats": {
            "enum": [
              ".pdf",
              ".docx",
              ".doc",
              ".jpg",
              ".jpeg",
              ".png",
              ".gif",
              ".csv",
              ".xlsx",
              ".xls",
              "all"
            ],
            "type": "string",
            "description": "Allowed file formats for uploads. Options include: .pdf, .docx, .doc, .jpg, .jpeg, .png, .gif, .csv, .xlsx, .xls, all"
          },
          "dataType": {
            "enum": [
              "TEXT",
              "LARGE_TEXT",
              "NUMERICAL",
              "PHONE",
              "MONETORY",
              "CHECKBOX",
              "SINGLE_OPTIONS",
              "MULTIPLE_OPTIONS",
              "DATE",
              "TEXTBOX_LIST",
              "FILE_UPLOAD",
              "RADIO",
              "EMAIL"
            ],
            "type": "string",
            "description": "Type of field that you are trying to create"
          },
          "fieldKey": {
            "type": "string",
            "description": "Field key. For Custom Object it's formatted as \"custom_object.{objectKey}.{fieldKey}\". \"custom_object\" is a fixed prefix, \"{objectKey}\" is your custom object's identifier, and \"{fieldKey}\" is the unique field name within that object. Example: \"custom_object.pet.name\" for a \"name\" field in a \"pet\" custom object.",
            "example": "custom_object.pet.name"
          },
          "objectKey": {
            "type": "string",
            "description": "The key for your custom object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
            "example": "custom_object.pet"
          },
          "maxFileLimit": {
            "type": "number",
            "description": "Maximum file limit for uploads. Applicable only for fields with a data type of FILE_UPLOAD.",
            "example": 2
          },
          "allowCustomOption": {
            "type": "boolean",
            "description": "Determines if users can add a custom option value different from the predefined options in records for RADIO type fields. A custom value added in one record does not automatically become an option and will not appear as an option for other records.",
            "example": true
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent folder"
          }
        }
      },
      "CreateFolder": {
        "required": [
          "objectKey",
          "name",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "objectKey": {
            "type": "string",
            "description": "The key for your custom object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
            "example": "custom_object.pet"
          },
          "name": {
            "type": "string",
            "description": "Field name",
            "example": "Name"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "ICustomFieldFolder": {
        "required": [
          "id",
          "objectKey",
          "locationId",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the object"
          },
          "objectKey": {
            "type": "string",
            "description": "The key for your custom object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
            "example": "custom_object.pet"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "name": {
            "type": "string",
            "description": "Field name",
            "example": "Name"
          }
        }
      },
      "UpdateFolder": {
        "required": [
          "name",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Field name",
            "example": "Name"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "CustomFolderDeleteResponseDto": {
        "required": [
          "succeded",
          "id",
          "key"
        ],
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          },
          "id": {
            "type": "string",
            "example": "3v34PM428h8vShlRW1KT"
          },
          "key": {
            "type": "string",
            "example": "custom_object.pet.name"
          }
        }
      },
      "custom_fields_UpdateCustomFieldsDTO": {
        "required": [
          "locationId",
          "showInForms"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "name": {
            "type": "string",
            "description": "Field name",
            "example": "Name"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for the field"
          },
          "showInForms": {
            "type": "boolean",
            "description": "Whether the field should be shown in forms"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionDTO"
            },
            "description": "Options for the field. Important: Providing options will completely replace the existing options array. You must include all existing options alongside any new options you wish to add. Removal of options is not supported through this update. Applicable only for SINGLE_OPTIONS, MULTIPLE_OPTIONS, RADIO, CHECKBOX, TEXTBOX_LIST types."
          },
          "acceptedFormats": {
            "enum": [
              ".pdf",
              ".docx",
              ".doc",
              ".jpg",
              ".jpeg",
              ".png",
              ".gif",
              ".csv",
              ".xlsx",
              ".xls",
              "all"
            ],
            "type": "string",
            "description": "Allowed file formats for uploads. Options include: .pdf, .docx, .doc, .jpg, .jpeg, .png, .gif, .csv, .xlsx, .xls, all"
          },
          "maxFileLimit": {
            "type": "number",
            "description": "Maximum file limit for uploads. Applicable only for fields with a data type of FILE_UPLOAD.",
            "example": 2
          }
        }
      },
      "CustomObjectLabelDto": {
        "required": [
          "singular",
          "plural"
        ],
        "type": "object",
        "properties": {
          "singular": {
            "type": "string",
            "description": "Singular name of the custom object",
            "example": "Pet"
          },
          "plural": {
            "type": "string",
            "description": "Plural name of the custom object",
            "example": "Pets"
          }
        }
      },
      "ICustomObjectSchema": {
        "required": [
          "id",
          "standard",
          "key",
          "labels",
          "locationId",
          "primaryDisplayProperty",
          "dateAdded",
          "dateUpdated"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the custom / standard object schema",
            "example": "661c06b4ffde146bdb469442"
          },
          "standard": {
            "type": "boolean",
            "description": "false in case of custom objects and true in case of standard objects like contacts and opportunities ",
            "example": false
          },
          "key": {
            "type": "string",
            "description": "key that would be used to refer the custom / standard Object internally (lowercase + underscore_separated). For custom objects, 'custom_objects.' would be added as prefix by default",
            "example": "custom_objects.pet"
          },
          "labels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomObjectLabelDto"
              }
            ],
            "description": "This is what your custom / standard  object will be called. These labels will be used to display your custom object on the UI",
            "example": {
              "singular": "Pet",
              "plural": "Pets"
            }
          },
          "description": {
            "type": "string",
            "description": "Custom / Standard  Object Descriptions for example , Pet Object`s description",
            "example": "These are non vaccinated pets"
          },
          "locationId": {
            "type": "string",
            "description": "location's id",
            "example": "Q9DT3OAqEXDLYuob1G32"
          },
          "primaryDisplayProperty": {
            "type": "string",
            "description": "Primary property for the custom / standard  Object. This would be used as primary data when rendering the UI. 'custom_objects.{{object_key}} or business.{{object_key}} (for company)' would be added as prefix by default for all the custom / standard objects",
            "example": "custom_objects.pet.name"
          },
          "dateAdded": {
            "type": "string",
            "description": "Date and time when the object was added",
            "format": "date-time"
          },
          "dateUpdated": {
            "type": "string",
            "description": "Date and time when the object was last updated",
            "format": "date-time"
          },
          "type": {
            "type": "object",
            "description": "Object`s Type",
            "example": "The Object type can either USER_DEFINED or SYSTEM_DEFINED"
          }
        }
      },
      "objects_OptionDTO": {
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the option (Included in Create and Response, excluded in Update)"
          },
          "label": {
            "type": "string",
            "description": "Value of the option"
          },
          "url": {
            "type": "string",
            "description": "URL associated with the option (Optional, valid only for RADIO type)"
          }
        }
      },
      "objects_ICustomField": {
        "required": [
          "locationId",
          "showInForms",
          "id",
          "objectKey",
          "dataType",
          "parentId",
          "fieldKey",
          "dateAdded",
          "dateUpdated"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "name": {
            "type": "string",
            "description": "Field name",
            "example": "Name"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for the field"
          },
          "showInForms": {
            "type": "boolean",
            "description": "Whether the field should be shown in forms"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionDTO"
            },
            "description": "Options for the field (Optional, valid only for SINGLE_OPTIONS, MULTIPLE_OPTIONS, RADIO, CHECKBOX, TEXTBOX_LIST type)"
          },
          "acceptedFormats": {
            "enum": [
              ".pdf",
              ".docx",
              ".doc",
              ".jpg",
              ".jpeg",
              ".png",
              ".gif",
              ".csv",
              ".xlsx",
              ".xls",
              "all"
            ],
            "type": "string",
            "description": "Allowed file formats for uploads. Options include: .pdf, .docx, .doc, .jpg, .jpeg, .png, .gif, .csv, .xlsx, .xls, all"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the object"
          },
          "objectKey": {
            "type": "string",
            "description": "The key for your custom / standard object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
            "example": "custom_object.pet"
          },
          "dataType": {
            "enum": [
              "TEXT",
              "LARGE_TEXT",
              "NUMERICAL",
              "PHONE",
              "MONETORY",
              "CHECKBOX",
              "SINGLE_OPTIONS",
              "MULTIPLE_OPTIONS",
              "DATE",
              "TEXTBOX_LIST",
              "FILE_UPLOAD",
              "RADIO"
            ],
            "type": "string",
            "description": "Type of field that you are trying to create"
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent folder",
            "example": "3v34PM428h8vShlRW1KT"
          },
          "fieldKey": {
            "type": "string",
            "description": "Field key. For Custom Object it's formatted as \"custom_object.{objectKey}.{fieldKey}\". \"custom_object\" is a fixed prefix, \"{objectKey}\" is your custom object's identifier, and \"{fieldName}\" is the unique field name within that object. Example: \"custom_object.pet.name\" for a \"name\" field in a \"pet\" custom object.",
            "example": "custom_object.pet.name"
          },
          "allowCustomOption": {
            "type": "boolean",
            "description": "Determines if users can add a custom option value different from the predefined options in records for RADIO type fields. A custom value added in one record does not automatically become an option and will not appear as an option for other records.",
            "example": true
          },
          "maxFileLimit": {
            "type": "number",
            "description": "Maximum file limit for uploads",
            "example": 2
          },
          "dateAdded": {
            "type": "string",
            "description": "Date and time when the object was added",
            "format": "date-time"
          },
          "dateUpdated": {
            "type": "string",
            "description": "Date and time when the object was last updated",
            "format": "date-time"
          }
        }
      },
      "CustomObjectByIdResponseDTO": {
        "required": [
          "cache"
        ],
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/ICustomObjectSchema"
          },
          "cache": {
            "type": "boolean",
            "description": "Is the response served from cache",
            "example": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICustomField"
            }
          }
        }
      },
      "CustomObjectListResponseDTO": {
        "type": "object",
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICustomObjectSchema"
            }
          }
        }
      },
      "CustomObjectDisplayPropertyDetails": {
        "required": [
          "key",
          "name",
          "dataType"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "key that would be used to refer the custom field internally (lowercase + underscore_separated). 'custom_objects.{{objectKey}}' would be added as prefix by default is not passed",
            "example": "custom_objects.pet.name"
          },
          "name": {
            "type": "string",
            "description": "Name of the Primary property name which will be displayed on the record page",
            "example": "Pet name"
          },
          "dataType": {
            "type": "string",
            "description": "Primary property data Type (it can either be TEXT or NUMERICAL type)",
            "example": "TEXT"
          }
        }
      },
      "CreateCustomObjectSchemaDTO": {
        "required": [
          "labels",
          "key",
          "locationId",
          "primaryDisplayPropertyDetails"
        ],
        "type": "object",
        "properties": {
          "labels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomObjectLabelDto"
              }
            ],
            "description": "This is what your custom object will be called. These labels will be used to display your custom object on the UI",
            "example": {
              "singular": "Pet",
              "plural": "Pets"
            }
          },
          "key": {
            "type": "string",
            "description": "key that would be used to refer the Custom Object internally (lowercase + underscore_separated). 'custom_objects.' would be added as prefix by default",
            "example": "custom_objects.pet"
          },
          "description": {
            "type": "string",
            "description": "Pet Object`s description",
            "example": "These are non vaccinated pets"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "primaryDisplayPropertyDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomObjectDisplayPropertyDetails"
              }
            ],
            "description": "Primary property which will be displayed on the record page"
          }
        }
      },
      "CustomObjectResponseDTO": {
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/ICustomObjectSchema"
          }
        }
      },
      "CustomObjectLabelUpdateDto": {
        "type": "object",
        "properties": {
          "singular": {
            "type": "string",
            "description": "Singular name of the custom object",
            "example": "Car"
          },
          "plural": {
            "type": "string",
            "description": "Plural name of the custom object",
            "example": "Cars"
          }
        }
      },
      "UpdateCustomObjectSchemaDTO": {
        "required": [
          "locationId",
          "searchableProperties"
        ],
        "type": "object",
        "properties": {
          "labels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomObjectLabelUpdateDto"
              }
            ],
            "description": "This is how your custom object will  be  displayed",
            "example": {
              "singular": "Pet",
              "plural": "Pets"
            }
          },
          "description": {
            "type": "string",
            "description": "Pet Object`s description",
            "nullable": true,
            "example": "These are non vaccinated pets"
          },
          "locationId": {
            "type": "string",
            "description": "location id",
            "example": "632c34b4c9b7da3358ac9891"
          },
          "searchableProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Searchable Fields: Provide the field key of your object that you want to search on, using the format (custom_object.<object_name>.<field_key>).",
            "example": [
              "custom_objects.mad.mad",
              "custom_objects.mad.record_1",
              "custom_objects.mad.nn"
            ]
          }
        }
      },
      "IRecordSchema": {
        "required": [
          "id",
          "owner",
          "followers",
          "properties",
          "dateAdded",
          "dateUpdated"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the record",
            "example": "661c06b4ffde146bdb469442"
          },
          "owner": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Owner (User's id). Limited to 1 for now. Only Supported with custom objects",
            "example": [
              "sx6wyHhbFdRXh302Lunr"
            ]
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Follower (User's ids). Limited to 10 for now",
            "example": [
              "sx6wyHhbFdRXh302Lunr",
              "v5cEPM428h8vShlRW1KT"
            ]
          },
          "properties": {
            "type": "string",
            "description": "Properties of the record",
            "example": {
              "customer_number": 1424,
              "ticket_name": "Customer not able login",
              "phone_number": "+917000000000",
              "money": {
                "currency": "default",
                "value": 100
              },
              "type_of_ticket": "doubt",
              "section_of_app": [
                "contacts",
                "smartlist"
              ],
              "recieved_on": "2024-07-11",
              "my_files": [
                {
                  "url": "---url_of_file---"
                }
              ],
              "my_textbox_list.option_a": "Value 1",
              "my_textbox_list.option_b": "Value 2"
            }
          },
          "dateAdded": {
            "type": "string",
            "description": "Date and time when the object was added",
            "format": "date-time"
          },
          "dateUpdated": {
            "type": "string",
            "description": "Date and time when the object was last updated",
            "format": "date-time"
          }
        }
      },
      "RecordByIdResponseDTO": {
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/IRecordSchema"
          }
        }
      },
      "CreateCustomObjectRecordDto": {
        "type": "object"
      },
      "UpdateCustomObjectRecordDto": {
        "type": "object"
      },
      "ObjectRecordDeleteResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the deleted object",
            "example": "661c06b4ffde146bdb469442"
          },
          "success": {
            "type": "boolean",
            "description": "boolean that defines if the operation was a success or not",
            "example": true
          }
        }
      },
      "SearchRecordsBody": {
        "required": [
          "locationId",
          "page",
          "pageLimit",
          "query",
          "searchAfter"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "page": {
            "type": "number",
            "description": "Page",
            "example": 1
          },
          "pageLimit": {
            "type": "number",
            "description": "Page Limit",
            "example": 10
          },
          "query": {
            "type": "string",
            "description": "Pass this query parameter to search using your searchable properties. For example, if you have a custom object called “Pets” and have configured “name” as a searchable property, you can pass name:Buddy to search for pets with the name “Buddy.”",
            "example": "Buddy"
          },
          "searchAfter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sx6wyHhbFdRXh302Lunr",
              "sx6wyHhbFdRXh302Lunr"
            ]
          }
        }
      },
      "CreatedByResponseDTO": {
        "required": [
          "channel",
          "createdAt",
          "source",
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "description": "Creation Channel",
            "example": "WEB_USER"
          },
          "createdAt": {
            "type": "string",
            "description": "Created At",
            "example": "2025-01-02T09:35:39.032Z"
          },
          "source": {
            "type": "string",
            "description": "From where the record was created",
            "example": "PUBLIC_API"
          },
          "sourceId": {
            "type": "string",
            "description": "User/Resource Id",
            "example": "26653146-ec82-435d-8a99-84ecdb7fde13"
          }
        }
      },
      "RecordResponseDTO": {
        "required": [
          "id",
          "owner",
          "followers",
          "properties",
          "createdAt",
          "updatedAt",
          "locationId",
          "objectId",
          "objectKey",
          "createdBy",
          "lastUpdatedBy",
          "searchAfter"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the record",
            "example": "661c06b4ffde146bdb469442"
          },
          "owner": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Owner (User's id). Limited to 1 for now . Only supported for custom objects for now",
            "example": [
              "sx6wyHhbFdRXh302Lunr"
            ]
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Follower (User's ids). Limited to 10 and supported for custom objects for now",
            "example": [
              "sx6wyHhbFdRXh302Lunr",
              "v5cEPM428h8vShlRW1KT"
            ]
          },
          "properties": {
            "type": "string",
            "description": "Properties of the record",
            "example": {
              "customer_number": 1424,
              "ticket_name": "Customer not able login",
              "phone_number": "+917000000000",
              "money": {
                "currency": "default",
                "value": 100
              },
              "type_of_ticket": "doubt",
              "section_of_app": [
                "contacts",
                "smartlist"
              ],
              "recieved_on": "2024-07-11",
              "my_files": [
                {
                  "url": "---url_of_file---"
                }
              ],
              "my_textbox_list.option_a": "Value 1",
              "my_textbox_list.option_b": "Value 2"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time when the object was added",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time when the object was last updated",
            "format": "date-time"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "objectId": {
            "type": "string",
            "description": "ObjectId Id",
            "example": "6d6f6e676f5f6576656e7473"
          },
          "objectKey": {
            "type": "string",
            "description": "ObjectId key",
            "example": "custom_objects.pet"
          },
          "createdBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedByResponseDTO"
              }
            ],
            "description": "Created By Meta"
          },
          "lastUpdatedBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedByResponseDTO"
              }
            ],
            "description": "Last Updated By Meta"
          },
          "searchAfter": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "example": [
              1738683828372,
              "67a235b49b289431bcf657f8"
            ]
          }
        }
      },
      "SearchRecordResponseDTO": {
        "required": [
          "total"
        ],
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordResponseDTO"
            },
            "description": "Records"
          },
          "total": {
            "type": "number",
            "description": "Total Number of records",
            "example": 20
          }
        }
      },
      "SearchOpportunitiesContactResponseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "byMEV0NQinDhq8ZfiOi2"
          },
          "name": {
            "type": "string",
            "example": "John Deo"
          },
          "companyName": {
            "type": "string",
            "example": "Tesla Inc"
          },
          "email": {
            "type": "string",
            "example": "john@deo.com"
          },
          "phone": {
            "type": "string",
            "example": "+1202-555-0107"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CustomFieldResponseSchema": {
        "required": [
          "id",
          "fieldValue"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "MgobCB14YMVKuE4Ka8p1"
          },
          "fieldValue": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            ],
            "description": "The value of the custom field"
          }
        }
      },
      "SearchOpportunitiesResponseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "yWQobCRIhRguQtD2llvk"
          },
          "name": {
            "type": "string",
            "example": "testing"
          },
          "monetaryValue": {
            "type": "number",
            "example": 500
          },
          "pipelineId": {
            "type": "string",
            "example": "VDm7RPYC2GLUvdpKmBfC"
          },
          "pipelineStageId": {
            "type": "string",
            "example": "e93ba61a-53b3-45e7-985a-c7732dbcdb69"
          },
          "assignedTo": {
            "type": "string",
            "example": "zT46WSCPbudrq4zhWMk6"
          },
          "status": {
            "type": "string",
            "example": "open"
          },
          "source": {
            "type": "string",
            "example": ""
          },
          "lastStatusChangeAt": {
            "type": "string",
            "example": "2021-08-03T04:55:17.355Z"
          },
          "lastStageChangeAt": {
            "type": "string",
            "example": "2021-08-03T04:55:17.355Z"
          },
          "lastActionDate": {
            "type": "string",
            "example": "2021-08-03T04:55:17.355Z"
          },
          "indexVersion": {
            "type": "string",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2021-08-03T04:55:17.355Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2021-08-03T04:55:17.355Z"
          },
          "contactId": {
            "type": "string",
            "example": "zT46WSCPbudrq4zhWMk6"
          },
          "locationId": {
            "type": "string",
            "example": "zT46WSCPbudrq4zhW"
          },
          "contact": {
            "$ref": "#/components/schemas/SearchOpportunitiesContactResponseSchema"
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tasks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "calendarEvents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldResponseSchema"
            }
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        }
      },
      "SearchMetaResponseSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 1
          },
          "nextPageUrl": {
            "type": "string",
            "example": "http://localhost:5066/opportunities/search?q=&location_id=ve9EPM428h8vShlRW1KT&pipeline_id=&pipeline_stage_id=&status=&assigned_to+=&campaignId=&id=&order=&endDate=&startAfter=1625203104328&startAfterId=yWQobCRIhRguQtD2llvk&date=&limit=1&country=&page=1"
          },
          "startAfterId": {
            "type": "string",
            "example": "yWQobCRIhRguQtD2llvk"
          },
          "startAfter": {
            "type": "number",
            "example": 1625203104328
          },
          "currentPage": {
            "type": "number",
            "example": 2
          },
          "nextPage": {
            "type": "number",
            "example": 3
          },
          "prevPage": {
            "type": "number",
            "example": 1
          }
        }
      },
      "opportunities_SearchSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "opportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchOpportunitiesResponseSchema"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/SearchMetaResponseSchema"
          },
          "aggregations": {
            "type": "object"
          }
        }
      },
      "PipelinesResponseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aWdODOBVOlH1RUFKWQke"
          },
          "name": {
            "type": "string",
            "example": "new pipeline"
          },
          "stages": {
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "showInFunnel": {
            "type": "boolean",
            "example": false
          },
          "showInPieChart": {
            "type": "boolean",
            "example": true
          },
          "locationId": {
            "type": "string",
            "example": "dsjddjkndadqaja"
          }
        }
      },
      "GetPipelinesSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "pipelines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelinesResponseSchema"
            }
          }
        }
      },
      "GetPostOpportunitySuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "opportunity": {
            "$ref": "#/components/schemas/SearchOpportunitiesResponseSchema"
          }
        }
      },
      "DeleteUpdateOpportunitySuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "UpdateStatusDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "open",
              "won",
              "lost",
              "abandoned",
              "all"
            ],
            "type": "string"
          }
        }
      },
      "opportunities_customFieldsInputArraySchema": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "test",
              "test2"
            ]
          }
        }
      },
      "opportunities_customFieldsInputObjectSchema": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "object"
          }
        }
      },
      "opportunities_customFieldsInputStringSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pass either `id` or `key` of custom field",
            "example": "6dvNaf7VhkQ9snc5vnjJ"
          },
          "key": {
            "type": "string",
            "description": "Pass either `id` or `key` of custom field",
            "example": "my_custom_field"
          },
          "field_value": {
            "type": "string",
            "example": "9039160788"
          }
        }
      },
      "CreateDto": {
        "required": [
          "pipelineId",
          "locationId",
          "name",
          "status",
          "contactId"
        ],
        "type": "object",
        "properties": {
          "pipelineId": {
            "type": "string",
            "description": "pipeline Id",
            "example": "VDm7RPYC2GLUvdpKmBfC"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "name": {
            "type": "string",
            "example": "First Opps"
          },
          "pipelineStageId": {
            "type": "string",
            "example": "7915dedc-8f18-44d5-8bc3-77c04e994a10"
          },
          "status": {
            "enum": [
              "open",
              "won",
              "lost",
              "abandoned",
              "all"
            ],
            "type": "string"
          },
          "contactId": {
            "type": "string",
            "example": "mTkSCb1UBjb5tk4OvB69"
          },
          "monetaryValue": {
            "type": "number",
            "example": 220
          },
          "assignedTo": {
            "type": "string",
            "example": "082goXVW3lIExEQPOnd3"
          },
          "customFields": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/customFieldsInputStringSchema"
                },
                {
                  "$ref": "#/components/schemas/customFieldsInputArraySchema"
                },
                {
                  "$ref": "#/components/schemas/customFieldsInputObjectSchema"
                }
              ]
            },
            "description": "Add custom fields to opportunities."
          }
        }
      },
      "UpdateOpportunityDto": {
        "type": "object",
        "properties": {
          "pipelineId": {
            "type": "string",
            "description": "pipeline Id",
            "example": "bCkKGpDsyPP4peuKowkG"
          },
          "name": {
            "type": "string",
            "example": "First Opps"
          },
          "pipelineStageId": {
            "type": "string",
            "example": "7915dedc-8f18-44d5-8bc3-77c04e994a10"
          },
          "status": {
            "enum": [
              "open",
              "won",
              "lost",
              "abandoned",
              "all"
            ],
            "type": "string"
          },
          "monetaryValue": {
            "type": "number",
            "example": 220
          },
          "assignedTo": {
            "type": "string",
            "example": "082goXVW3lIExEQPOnd3"
          },
          "customFields": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/customFieldsInputStringSchema"
                },
                {
                  "$ref": "#/components/schemas/customFieldsInputArraySchema"
                },
                {
                  "$ref": "#/components/schemas/customFieldsInputObjectSchema"
                }
              ]
            },
            "description": "Update custom fields to opportunities."
          }
        }
      },
      "UpsertOpportunityDto": {
        "required": [
          "pipelineId",
          "locationId",
          "contactId"
        ],
        "type": "object",
        "properties": {
          "pipelineId": {
            "type": "string",
            "description": "pipeline Id",
            "example": "bCkKGpDsyPP4peuKowkG"
          },
          "locationId": {
            "type": "string",
            "description": "locationId",
            "example": "CLu7BaljjqrEjBGKTNNe"
          },
          "contactId": {
            "type": "string",
            "description": "contactId",
            "example": "LiKJ2vnRg5ETM8Z19K7"
          },
          "name": {
            "type": "string",
            "description": "name",
            "example": "opportunity name"
          },
          "status": {
            "enum": [
              "open",
              "won",
              "lost",
              "abandoned",
              "all"
            ],
            "type": "string"
          },
          "pipelineStageId": {
            "type": "string",
            "example": "7915dedc-8f18-44d5-8bc3-77c04e994a10"
          },
          "monetaryValue": {
            "type": "number",
            "example": 220
          },
          "assignedTo": {
            "type": "string",
            "example": "082goXVW3lIExEQPOnd3"
          }
        }
      },
      "UpsertOpportunitySuccessfulResponseDto": {
        "required": [
          "opportunity",
          "new"
        ],
        "type": "object",
        "properties": {
          "opportunity": {
            "type": "object",
            "description": "Updated / New Opportunity"
          },
          "new": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "opportunities_FollowersDTO": {
        "required": [
          "followers"
        ],
        "type": "object",
        "properties": {
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sx6wyHhbFdRXh302Lunr",
              "sx6wyHhbFdRXh302Lunr"
            ]
          }
        }
      },
      "opportunities_CreateAddFollowersSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sx6wyHhbFdRXh302Lunr",
              "sx6wyHhbFdRXh302LLss"
            ]
          },
          "followersAdded": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Mx6wyHhbFdRXh302Luer",
              "Ka6wyHhbFdRXh302LLsAm"
            ]
          }
        }
      },
      "opportunities_DeleteFollowersSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sx6wyHhbFdRXh302Lunr",
              "sx6wyHhbFdRXh302LLss"
            ]
          },
          "followersRemoved": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Mx6wyHhbFdRXh302Luer",
              "Ka6wyHhbFdRXh302LLsAm"
            ]
          }
        }
      },
      "BulkUpdateFilters": {
        "type": "object",
        "properties": {
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by collection IDs",
            "example": [
              "5f8d0d55b54764421b7156c1",
              "5f8d0d55b54764421b7156c2"
            ]
          },
          "productType": {
            "type": "string",
            "description": "Filter by product type",
            "example": "one-time"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Filter by availability status",
            "example": true
          },
          "search": {
            "type": "string",
            "description": "Filter by search term",
            "example": "blue t-shirt"
          }
        }
      },
      "PriceUpdateField": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "INCREASE_BY_AMOUNT",
              "REDUCE_BY_AMOUNT",
              "SET_NEW_PRICE",
              "INCREASE_BY_PERCENTAGE",
              "REDUCE_BY_PERCENTAGE"
            ],
            "type": "string",
            "description": "Type of price update",
            "example": "INCREASE_BY_AMOUNT"
          },
          "value": {
            "type": "number",
            "description": "Value to update (amount or percentage based on type)",
            "example": 100
          },
          "roundToWhole": {
            "type": "boolean",
            "description": "Round to nearest whole number",
            "example": true
          }
        }
      },
      "BulkUpdateDto": {
        "required": [
          "altId",
          "altType",
          "type",
          "productIds"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "bulk-update-price",
              "bulk-update-availability",
              "bulk-update-product-collection",
              "bulk-delete-products",
              "bulk-update-currency"
            ],
            "type": "string",
            "description": "Type of bulk update operation",
            "example": "bulk-update-price"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of product IDs",
            "example": [
              "5f8d0d55b54764421b7156c1"
            ]
          },
          "filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BulkUpdateFilters"
              }
            ],
            "description": "Filters to apply when selectAll is true"
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceUpdateField"
              }
            ],
            "description": "Price update configuration"
          },
          "compareAtPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceUpdateField"
              }
            ],
            "description": "Compare at price update configuration"
          },
          "availability": {
            "type": "boolean",
            "description": "New availability status"
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of collection IDs"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          }
        }
      },
      "BulkUpdateResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "WeightOptionsDto": {
        "required": [
          "value",
          "unit"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "Actual weight of the product",
            "example": 10
          },
          "unit": {
            "enum": [
              "kg",
              "lb",
              "g",
              "oz"
            ],
            "type": "string",
            "description": "Weight unit of the product",
            "example": "kg"
          }
        }
      },
      "PriceDimensionsDto": {
        "required": [
          "height",
          "width",
          "length",
          "unit"
        ],
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "description": "Height of the price",
            "example": 10
          },
          "width": {
            "type": "number",
            "description": "Width of the price",
            "example": 10
          },
          "length": {
            "type": "number",
            "description": "Length of the price",
            "example": 10
          },
          "unit": {
            "enum": [
              "cm",
              "in",
              "m"
            ],
            "type": "string",
            "description": "Unit of the price dimensions",
            "example": "cm"
          }
        }
      },
      "ShippingOptionsDto": {
        "type": "object",
        "properties": {
          "weight": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WeightOptionsDto"
              }
            ],
            "description": "Weight options of the product"
          },
          "dimensions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDimensionsDto"
              }
            ],
            "description": "Dimensions of the product"
          }
        }
      },
      "products_RecurringDto": {
        "required": [
          "interval",
          "intervalCount"
        ],
        "type": "object",
        "properties": {
          "interval": {
            "enum": [
              "day",
              "month",
              "week",
              "year"
            ],
            "type": "string",
            "description": "The interval at which the recurring event occurs.",
            "example": "day"
          },
          "intervalCount": {
            "type": "number",
            "description": "The number of intervals between each occurrence of the event.",
            "example": 1
          }
        }
      },
      "BulkEditPriceDto": {
        "required": [
          "_id"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Price ID",
            "example": "64a1b2c3d4e5f67890123456"
          },
          "name": {
            "type": "string",
            "description": "Price name",
            "example": "Standard Plan"
          },
          "amount": {
            "type": "number",
            "description": "Price amount",
            "example": 99.99
          },
          "currency": {
            "type": "string",
            "description": "Price currency",
            "example": "USD"
          },
          "compareAtPrice": {
            "type": "number",
            "description": "Compare at price",
            "example": 129.99
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available quantity",
            "example": 100
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Track inventory",
            "example": true
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Allow out of stock purchases",
            "example": false
          },
          "sku": {
            "type": "string",
            "description": "SKU",
            "example": "SKU-001"
          },
          "trialPeriod": {
            "type": "number",
            "description": "Trial period in days",
            "example": 7
          },
          "totalCycles": {
            "type": "number",
            "description": "Total billing cycles",
            "example": 12
          },
          "setupFee": {
            "type": "number",
            "description": "Setup fee",
            "example": 25
          },
          "shippingOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingOptionsDto"
              }
            ],
            "description": "Shipping options"
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "Recurring details"
          }
        }
      },
      "products_ProductSEODto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "SEO title",
            "example": "Best Product - Buy Now"
          },
          "description": {
            "type": "string",
            "description": "SEO description",
            "example": "This is the best product you can buy online with amazing features and great value"
          }
        }
      },
      "BulkEditProductDto": {
        "required": [
          "_id"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Product ID",
            "example": "64a1b2c3d4e5f67890123456"
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Premium Product"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "A high-quality premium product with excellent features and durability"
          },
          "image": {
            "type": "string",
            "description": "Product image",
            "example": "https://example.com/product-image.jpg"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Product availability in store",
            "example": true
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkEditPriceDto"
            },
            "description": "Array of price variants for the product"
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection IDs",
            "example": [
              "64a1b2c3d4e5f67890123458",
              "64a1b2c3d4e5f67890123459"
            ]
          },
          "isLabelEnabled": {
            "type": "boolean",
            "description": "Enable product label",
            "example": true
          },
          "isTaxesEnabled": {
            "type": "boolean",
            "description": "Enable taxes",
            "example": true
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "SEO metadata for the product"
          },
          "slug": {
            "type": "string",
            "description": "Product URL slug",
            "example": "premium-product"
          },
          "automaticTaxCategoryId": {
            "type": "string",
            "description": "Automatic tax category ID",
            "example": "64a1b2c3d4e5f67890123460"
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "Tax inclusive pricing",
            "example": false
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Product taxes"
          },
          "medias": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Product media"
          },
          "label": {
            "type": "object",
            "description": "Product label"
          }
        }
      },
      "BulkEditRequestDto": {
        "required": [
          "altId",
          "altType",
          "products"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkEditProductDto"
            },
            "description": "Array of products to update. Note: The total count includes all prices within each product."
          }
        }
      },
      "BulkEditResponseDto": {
        "required": [
          "message",
          "status",
          "updatedCount"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Products updated successfully"
          },
          "status": {
            "type": "boolean",
            "description": "Operation status",
            "example": true
          },
          "updatedCount": {
            "type": "number",
            "description": "Number of products updated",
            "example": 5
          }
        }
      },
      "products_MembershipOfferDto": {
        "required": [
          "label",
          "value",
          "_id"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Membership offer label",
            "example": "top_50"
          },
          "value": {
            "type": "string",
            "description": "Membership offer label",
            "example": "50"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier for the membership offer.",
            "example": "655b33aa2209e60b6adb87a7"
          }
        }
      },
      "PriceMetaDto": {
        "required": [
          "source",
          "stripePriceId",
          "internalSource"
        ],
        "type": "object",
        "properties": {
          "source": {
            "enum": [
              "stripe",
              "woocommerce",
              "shopify"
            ],
            "type": "string",
            "description": "The source of the price.",
            "example": "stripe"
          },
          "sourceId": {
            "type": "string",
            "description": "The id of the source of the price from where it is imported",
            "example": "123"
          },
          "stripePriceId": {
            "type": "string",
            "description": "The Stripe price ID associated with the price.",
            "example": "price_123"
          },
          "internalSource": {
            "enum": [
              "agency_plan",
              "funnel",
              "membership",
              "communities",
              "gokollab",
              "calendar"
            ],
            "type": "string",
            "description": "The internal source of the price.",
            "example": "agency_plan"
          }
        }
      },
      "CreatePriceDto": {
        "required": [
          "name",
          "type",
          "currency",
          "amount",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the price.",
            "example": "Price Name"
          },
          "type": {
            "enum": [
              "one_time",
              "recurring"
            ],
            "type": "string",
            "description": "The type of the price.",
            "example": "one_time"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the price.",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the price. ( min: 0 )",
            "example": 99.99
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the price."
          },
          "membershipOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "description": "An array of membership offers associated with the price."
          },
          "trialPeriod": {
            "type": "number",
            "description": "The trial period duration in days (if applicable).",
            "example": 7
          },
          "totalCycles": {
            "type": "number",
            "description": "The total number of billing cycles for the price. ( min: 1 )",
            "example": 12
          },
          "setupFee": {
            "type": "number",
            "description": "The setup fee for the price.",
            "example": 10.99
          },
          "variantOptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of variant option IDs associated with the price.",
            "example": [
              "option_id_1",
              "option_id_2"
            ]
          },
          "compareAtPrice": {
            "type": "number",
            "description": "The compare at price for the price.",
            "example": 19.99
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier of the location associated with the price.",
            "example": "6578278e879ad2646715ba9c"
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier of the user who created the price.",
            "example": "6578278e879ad2646715ba9c"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceMetaDto"
              }
            ],
            "description": "Additional metadata associated with the price."
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Need to track inventory stock quantity",
            "example": true
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available inventory stock quantity",
            "example": 5
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Continue selling when out of stock",
            "example": true
          },
          "sku": {
            "type": "string",
            "description": "The unique identifier of the SKU associated with the price",
            "example": "sku_123"
          },
          "shippingOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingOptionsDto"
              }
            ],
            "description": "Shipping options of the Price"
          },
          "isDigitalProduct": {
            "type": "boolean",
            "description": "Is the product a digital product",
            "example": true
          },
          "digitalDelivery": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Digital delivery options"
          }
        }
      },
      "CreatePriceResponseDto": {
        "required": [
          "_id",
          "name",
          "type",
          "currency",
          "amount"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the price.",
            "example": "655b33aa2209e60b6adb87a7"
          },
          "membershipOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "description": "An array of membership offers associated with the price."
          },
          "variantOptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of variant option IDs associated with the price.",
            "example": [
              "h4z7u0im2q8",
              "h3nst2ltsnn"
            ]
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "product": {
            "type": "string",
            "description": "The unique identifier for the associated product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier for the user.",
            "example": "6YAtzfzpmHAdj0e8GkKp"
          },
          "name": {
            "type": "string",
            "description": "The name of the price.",
            "example": "Red / S"
          },
          "type": {
            "enum": [
              "one_time",
              "recurring"
            ],
            "type": "string",
            "description": "The type of the price (e.g., one_time).",
            "example": "one_time"
          },
          "currency": {
            "type": "string",
            "description": "The currency code for the price.",
            "example": "INR"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the price.",
            "example": 199999
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the price.",
            "format": "date-time",
            "example": "2023-11-20T10:23:38.645Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the price.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.852Z"
          },
          "compareAtPrice": {
            "type": "number",
            "description": "The compare-at price for comparison purposes.",
            "example": 2000000
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Indicates whether inventory tracking is enabled."
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available inventory stock quantity",
            "example": 5
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Continue selling when out of stock",
            "example": true
          }
        }
      },
      "products_DefaultPriceResponseDto": {
        "required": [
          "_id",
          "name",
          "type",
          "currency",
          "amount"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the price.",
            "example": "655b33aa2209e60b6adb87a7"
          },
          "membershipOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "description": "An array of membership offers associated with the price."
          },
          "variantOptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of variant option IDs associated with the price.",
            "example": [
              "h4z7u0im2q8",
              "h3nst2ltsnn"
            ]
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "product": {
            "type": "string",
            "description": "The unique identifier for the associated product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier for the user.",
            "example": "6YAtzfzpmHAdj0e8GkKp"
          },
          "name": {
            "type": "string",
            "description": "The name of the price.",
            "example": "Red / S"
          },
          "type": {
            "enum": [
              "one_time",
              "recurring"
            ],
            "type": "string",
            "description": "The type of the price (e.g., one_time).",
            "example": "one_time"
          },
          "currency": {
            "type": "string",
            "description": "The currency code for the price.",
            "example": "INR"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the price.",
            "example": 199999
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the price.",
            "format": "date-time",
            "example": "2023-11-20T10:23:38.645Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the price.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.852Z"
          },
          "compareAtPrice": {
            "type": "number",
            "description": "The compare-at price for comparison purposes.",
            "example": 2000000
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Indicates whether inventory tracking is enabled."
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available inventory stock quantity",
            "example": 5
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Continue selling when out of stock",
            "example": true
          }
        }
      },
      "ListPricesResponseDto": {
        "required": [
          "prices",
          "total"
        ],
        "type": "object",
        "properties": {
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultPriceResponseDto"
            },
            "description": "An array of prices"
          },
          "total": {
            "type": "number",
            "default": "Total number of prices available",
            "example": 10
          }
        }
      },
      "InventoryItemDto": {
        "required": [
          "_id",
          "name",
          "availableQuantity",
          "sku",
          "allowOutOfStockPurchases",
          "product",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the price",
            "example": "6241712be68f7a98102ba272"
          },
          "name": {
            "type": "string",
            "description": "Name of the price/variant",
            "example": "Medium T-shirt"
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available quantity in inventory",
            "example": 50
          },
          "sku": {
            "type": "string",
            "description": "SKU for the product variant",
            "example": "TSHIRT-MED-001"
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Whether out of stock purchases are allowed",
            "example": false
          },
          "product": {
            "type": "string",
            "description": "Product ID this price belongs to",
            "example": "6241712be68f7a98102ba270"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2023-12-12T09:27:42.355Z"
          },
          "image": {
            "type": "string",
            "description": "Product image URL",
            "example": "https://example.com/images/product.jpg"
          },
          "productName": {
            "type": "string",
            "description": "Product name",
            "example": "T-shirt"
          }
        }
      },
      "GetInventoryResponseDto": {
        "required": [
          "inventory",
          "total"
        ],
        "type": "object",
        "properties": {
          "inventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItemDto"
            },
            "description": "List of inventory items"
          },
          "total": {
            "type": "object",
            "description": "Total count of inventory items",
            "example": {
              "total": 100
            }
          }
        }
      },
      "UpdateInventoryItemDto": {
        "required": [
          "priceId"
        ],
        "type": "object",
        "properties": {
          "priceId": {
            "type": "string",
            "description": "The unique identifier for the price, in MongoDB ID format.",
            "example": "5e9f8f8f8f8f8f8f8f8f8f8"
          },
          "availableQuantity": {
            "type": "number",
            "description": "The available quantity of the item.",
            "example": 10
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Whether to continue selling the item when out of stock.",
            "example": false
          }
        }
      },
      "UpdateInventoryDto": {
        "required": [
          "altId",
          "altType",
          "items"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateInventoryItemDto"
            },
            "description": "Array of items to update in the inventory."
          }
        }
      },
      "UpdateInventoryResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "GetPriceResponseDto": {
        "required": [
          "_id",
          "name",
          "type",
          "currency",
          "amount"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the price.",
            "example": "655b33aa2209e60b6adb87a7"
          },
          "membershipOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "description": "An array of membership offers associated with the price."
          },
          "variantOptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of variant option IDs associated with the price.",
            "example": [
              "h4z7u0im2q8",
              "h3nst2ltsnn"
            ]
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "product": {
            "type": "string",
            "description": "The unique identifier for the associated product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier for the user.",
            "example": "6YAtzfzpmHAdj0e8GkKp"
          },
          "name": {
            "type": "string",
            "description": "The name of the price.",
            "example": "Red / S"
          },
          "type": {
            "enum": [
              "one_time",
              "recurring"
            ],
            "type": "string",
            "description": "The type of the price (e.g., one_time).",
            "example": "one_time"
          },
          "currency": {
            "type": "string",
            "description": "The currency code for the price.",
            "example": "INR"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the price.",
            "example": 199999
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the price.",
            "format": "date-time",
            "example": "2023-11-20T10:23:38.645Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the price.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.852Z"
          },
          "compareAtPrice": {
            "type": "number",
            "description": "The compare-at price for comparison purposes.",
            "example": 2000000
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Indicates whether inventory tracking is enabled."
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available inventory stock quantity",
            "example": 5
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Continue selling when out of stock",
            "example": true
          }
        }
      },
      "UpdatePriceDto": {
        "required": [
          "name",
          "type",
          "currency",
          "amount",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the price.",
            "example": "Price Name"
          },
          "type": {
            "enum": [
              "one_time",
              "recurring"
            ],
            "type": "string",
            "description": "The type of the price.",
            "example": "one_time"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the price.",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the price. ( min: 0 )",
            "example": 99.99
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the price."
          },
          "membershipOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "description": "An array of membership offers associated with the price."
          },
          "trialPeriod": {
            "type": "number",
            "description": "The trial period duration in days (if applicable).",
            "example": 7
          },
          "totalCycles": {
            "type": "number",
            "description": "The total number of billing cycles for the price. ( min: 1 )",
            "example": 12
          },
          "setupFee": {
            "type": "number",
            "description": "The setup fee for the price.",
            "example": 10.99
          },
          "variantOptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of variant option IDs associated with the price.",
            "example": [
              "option_id_1",
              "option_id_2"
            ]
          },
          "compareAtPrice": {
            "type": "number",
            "description": "The compare at price for the price.",
            "example": 19.99
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier of the location associated with the price.",
            "example": "6578278e879ad2646715ba9c"
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier of the user who created the price.",
            "example": "6578278e879ad2646715ba9c"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceMetaDto"
              }
            ],
            "description": "Additional metadata associated with the price."
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Need to track inventory stock quantity",
            "example": true
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available inventory stock quantity",
            "example": 5
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Continue selling when out of stock",
            "example": true
          },
          "sku": {
            "type": "string",
            "description": "The unique identifier of the SKU associated with the price",
            "example": "sku_123"
          },
          "shippingOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingOptionsDto"
              }
            ],
            "description": "Shipping options of the Price"
          },
          "isDigitalProduct": {
            "type": "boolean",
            "description": "Is the product a digital product",
            "example": true
          },
          "digitalDelivery": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Digital delivery options"
          }
        }
      },
      "UpdatePriceResponseDto": {
        "required": [
          "_id",
          "name",
          "type",
          "currency",
          "amount"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the price.",
            "example": "655b33aa2209e60b6adb87a7"
          },
          "membershipOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "description": "An array of membership offers associated with the price."
          },
          "variantOptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of variant option IDs associated with the price.",
            "example": [
              "h4z7u0im2q8",
              "h3nst2ltsnn"
            ]
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "product": {
            "type": "string",
            "description": "The unique identifier for the associated product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier for the user.",
            "example": "6YAtzfzpmHAdj0e8GkKp"
          },
          "name": {
            "type": "string",
            "description": "The name of the price.",
            "example": "Red / S"
          },
          "type": {
            "enum": [
              "one_time",
              "recurring"
            ],
            "type": "string",
            "description": "The type of the price (e.g., one_time).",
            "example": "one_time"
          },
          "currency": {
            "type": "string",
            "description": "The currency code for the price.",
            "example": "INR"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the price.",
            "example": 199999
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the price.",
            "format": "date-time",
            "example": "2023-11-20T10:23:38.645Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the price.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.852Z"
          },
          "compareAtPrice": {
            "type": "number",
            "description": "The compare-at price for comparison purposes.",
            "example": 2000000
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Indicates whether inventory tracking is enabled."
          },
          "availableQuantity": {
            "type": "number",
            "description": "Available inventory stock quantity",
            "example": 5
          },
          "allowOutOfStockPurchases": {
            "type": "boolean",
            "description": "Continue selling when out of stock",
            "example": true
          }
        }
      },
      "DeletePriceResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "returns true if the price is successfully deleted",
            "example": true
          }
        }
      },
      "GetProductStatsResponseDto": {
        "required": [
          "totalProducts",
          "includedInStore",
          "excludedFromStore"
        ],
        "type": "object",
        "properties": {
          "totalProducts": {
            "type": "number",
            "description": "Total number of products",
            "example": 100
          },
          "includedInStore": {
            "type": "number",
            "description": "Number of products included in the store",
            "example": 80
          },
          "excludedFromStore": {
            "type": "number",
            "description": "Number of products excluded from the store",
            "example": 20
          }
        }
      },
      "UpdateProductStoreDto": {
        "required": [
          "altId",
          "altType",
          "action",
          "productIds"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "action": {
            "enum": [
              "include",
              "exclude"
            ],
            "type": "string",
            "description": "Action to include or exclude the product from the store",
            "example": "include"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of product IDs",
            "example": [
              "productId1",
              "productId2"
            ]
          }
        }
      },
      "UpdateProductStoreResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "UpdateDisplayPriorityBodyDto": {
        "required": [
          "altId",
          "altType",
          "products"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "Array of products with their display priorities"
          }
        }
      },
      "ListCollectionResponseDto": {
        "required": [
          "data",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "Array of Collections"
          },
          "total": {
            "type": "number",
            "description": "The total count of the collections present, which is useful to calculate the pagination"
          }
        }
      },
      "ProductCategories": {
        "type": "object"
      },
      "DefaultCollectionResponseDto": {
        "required": [
          "data",
          "status"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductCategories"
              }
            ],
            "description": "Collection Data"
          },
          "status": {
            "type": "boolean",
            "description": "Status of the operation",
            "example": true
          }
        }
      },
      "CollectionSEODto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title which will be displayed as an SEO format",
            "example": "Best Sellers"
          },
          "description": {
            "type": "string",
            "description": "The description which would be displayed in preview purposes",
            "example": "Collections where all the best products are available"
          }
        }
      },
      "CreateProductCollectionsDto": {
        "required": [
          "altId",
          "altType",
          "name",
          "slug"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "The type of alt. For now it is only LOCATION",
            "example": "LOCATION"
          },
          "collectionId": {
            "type": "string",
            "description": "Unique Identifier of the Product Collection, Mongo Id",
            "example": "66057f9d28536eae584ec047"
          },
          "name": {
            "type": "string",
            "description": "Name of the Product Collection",
            "example": "Best Sellers"
          },
          "slug": {
            "type": "string",
            "description": "Slug of the Product Collection which helps in navigation",
            "example": "best-sellers"
          },
          "image": {
            "type": "string",
            "description": "The URL of the image that is going to be displayed as the collection Thumbnail",
            "example": "http://example.com/watermark.png"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionSEODto"
              }
            ],
            "description": "The metadata information which will be displayed in SEO previews"
          }
        }
      },
      "CollectionSchema": {
        "required": [
          "_id",
          "altId",
          "name",
          "slug",
          "image",
          "seo",
          "createdAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the collection",
            "example": "655b33a82209e60b6adb87a5"
          },
          "altId": {
            "type": "string",
            "description": "Location Id to which the collection is associated",
            "example": "Z4Bxl8J4SaPEPLq9IQ8g"
          },
          "name": {
            "type": "string",
            "description": "Name of the collection",
            "example": "Best Sellers"
          },
          "slug": {
            "type": "string",
            "description": "Slug of the collection with which navigation is established. Special Characters and spacing is not allowed and should be unique",
            "example": "best-sellers"
          },
          "image": {
            "type": "string",
            "description": "The URL of the image that is going to be displayed as the collection Thumbnail",
            "example": "http://example.com/watermark.png"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionSEODto"
              }
            ],
            "description": "The information which will be displayed in SEO previews"
          },
          "createdAt": {
            "type": "string",
            "description": "Date at which the collection was created",
            "example": "2024-02-22T09:27:19.728Z"
          }
        }
      },
      "CreateCollectionResponseDto": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionSchema"
              }
            ],
            "description": "created Collection"
          }
        }
      },
      "UpdateProductCollectionsDto": {
        "required": [
          "altId",
          "altType"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "The type of alt. For now it is only LOCATION",
            "example": "LOCATION"
          },
          "name": {
            "type": "string",
            "description": "Name of the Product Collection",
            "example": "Best Sellers"
          },
          "slug": {
            "type": "string",
            "description": "Slug of the Product Collection which helps in navigation",
            "example": "best-sellers"
          },
          "image": {
            "type": "string",
            "description": "The URL of the image that is going to be displayed as the collection Thumbnail",
            "example": "http://example.com/watermark.png"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionSEODto"
              }
            ],
            "description": "The metadata information which will be displayed in SEO previews"
          }
        }
      },
      "UpdateProductCollectionResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "DeleteProductCollectionResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "ListProductReviewsResponseDto": {
        "required": [
          "data",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "Array of Collections"
          },
          "total": {
            "type": "number",
            "description": "The total count of the collections present, which is useful to calculate the pagination"
          }
        }
      },
      "CountReviewsByStatusResponseDto": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "Array of review status counts"
          }
        }
      },
      "UserDetailsDto": {
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Name of the customer",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of the customer",
            "example": "example@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone no of the customer",
            "example": "+1-555-555-5555"
          },
          "isCustomer": {
            "type": "boolean",
            "description": "Is the person an admin or customer",
            "example": true
          }
        }
      },
      "ProductReviewDto": {
        "required": [
          "headline",
          "comment",
          "user"
        ],
        "type": "object",
        "properties": {
          "headline": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Headline of the Review",
            "example": "Amazing product with great quality"
          },
          "comment": {
            "maxLength": 5000,
            "minLength": 0,
            "type": "string",
            "description": "Detailed Review of the product",
            "example": "This product exceeded my expectations in terms of quality and performance. Highly recommended!"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            ],
            "description": "User who is giving the review/reply"
          }
        }
      },
      "UpdateProductReviewDto": {
        "required": [
          "altId",
          "altType",
          "productId",
          "status"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "productId": {
            "type": "string",
            "description": "Product Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "status": {
            "type": "string",
            "description": "Status of the review",
            "example": "approved"
          },
          "reply": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductReviewDto"
            },
            "description": "Reply of the review"
          },
          "rating": {
            "type": "number",
            "description": "Rating of the product",
            "example": "4.5"
          },
          "headline": {
            "type": "string",
            "description": "Headline of the Review",
            "example": "Amazing product with great quality"
          },
          "detail": {
            "type": "string",
            "description": "Detailed Review of the product",
            "example": "The product is for sure a must and recommended buy"
          }
        }
      },
      "UpdateProductReviewsResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "UpdateProductReviewObjectDto": {
        "required": [
          "reviewId",
          "productId",
          "storeId"
        ],
        "type": "object",
        "properties": {
          "reviewId": {
            "type": "string",
            "description": "Review Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "productId": {
            "type": "string",
            "description": "Product Id",
            "example": "6578278e879ad2646715ba9d"
          },
          "storeId": {
            "type": "string",
            "description": "Store Id",
            "example": "a1b2c3d4e5f6g7h8i9j0k1l2"
          }
        }
      },
      "UpdateProductReviewsDto": {
        "required": [
          "altId",
          "altType",
          "reviews",
          "status"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string"
          },
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateProductReviewObjectDto"
            },
            "description": "Array of Product Reviews"
          },
          "status": {
            "type": "object",
            "description": "Status of the review",
            "example": "approved"
          }
        }
      },
      "DeleteProductReviewResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of api action",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Successfully created"
          }
        }
      },
      "products_ProductVariantOptionDto": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the option.",
            "example": "h4z7u0im2q8"
          },
          "name": {
            "type": "string",
            "description": "The name of the option.",
            "example": "XL"
          }
        }
      },
      "products_ProductVariantDto": {
        "required": [
          "id",
          "name",
          "options"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the variant.",
            "example": "38s63qmxfr4"
          },
          "name": {
            "type": "string",
            "description": "The name of the variant.",
            "example": "Size"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantOptionDto"
            },
            "description": "An array of options for the variant."
          }
        }
      },
      "products_ProductLabelDto": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The content for the product label.",
            "example": "Featured"
          },
          "startDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2024-06-26T05:43:35.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2024-06-30T05:43:39.000Z"
          }
        }
      },
      "GetProductResponseDto": {
        "required": [
          "_id",
          "locationId",
          "name",
          "productType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "description": {
            "type": "string",
            "description": "product description",
            "example": "This is a really awesome product"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "description": "An array of variants for the product."
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Awesome Product"
          },
          "productType": {
            "type": "string",
            "description": "The type of the product (e.g., PHYSICAL).",
            "example": "PHYSICAL"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Indicates whether the product is available in-store.",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the product.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the product.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "statementDescriptor": {
            "type": "string",
            "description": "The statement descriptor for the product.",
            "example": "abcde"
          },
          "image": {
            "type": "string",
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of category Ids for the product",
            "example": [
              "65d71377c326ea78e1c47df5",
              "65d71377c326ea78e1c47d34"
            ]
          },
          "isTaxesEnabled": {
            "type": "boolean",
            "description": "The field indicates whether taxes are enabled for the product or not.",
            "default": false,
            "example": true
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
            "example": [
              "654492a4e6bef380114de15a"
            ]
          },
          "automaticTaxCategoryId": {
            "type": "string",
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "The Product label details"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the product by which the product will be navigated",
            "example": "washing-machine"
          }
        }
      },
      "DeleteProductResponseDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "returns true if the product is successfully deleted",
            "example": true
          }
        }
      },
      "products_ProductMediaDto": {
        "required": [
          "id",
          "url",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the media.",
            "example": "fzrgusiuu0m"
          },
          "title": {
            "type": "string",
            "description": "The title of the media file.",
            "example": "1dd7dcd0-e71d-4cf7-a06b-6d47723d6a29.png"
          },
          "url": {
            "type": "string",
            "description": "The URL where the media file is stored.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/sample.png"
          },
          "type": {
            "enum": [
              "image",
              "video"
            ],
            "type": "string",
            "description": "The type of the media file (e.g., image, video will be supporting soon).",
            "example": "image"
          },
          "isFeatured": {
            "type": "boolean",
            "description": "Indicates whether the media is featured.",
            "example": true
          },
          "priceIds": {
            "type": "array",
            "items": {
              "type": "array"
            },
            "description": "Mongo ObjectIds of the prices for which the media is assigned",
            "example": "6578278e879ad2646715ba9c"
          }
        }
      },
      "CreateProductDto": {
        "required": [
          "name",
          "locationId",
          "productType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Awesome Product"
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product.",
            "example": "Product description goes here."
          },
          "productType": {
            "enum": [
              "DIGITAL",
              "PHYSICAL",
              "SERVICE",
              "PHYSICAL/DIGITAL"
            ],
            "type": "string"
          },
          "image": {
            "type": "string",
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
          },
          "statementDescriptor": {
            "type": "string",
            "description": "The statement descriptor for the product.",
            "example": "abcde"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Indicates whether the product is available in-store.",
            "example": true
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMediaDto"
            },
            "description": "An array of medias for the product."
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "description": "An array of variants for the product."
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of category Ids for the product",
            "example": [
              "65d71377c326ea78e1c47df5",
              "65d71377c326ea78e1c47d34"
            ]
          },
          "isTaxesEnabled": {
            "type": "boolean",
            "description": "Are there any taxes attached to the product. If this is true, taxes array cannot be empty.",
            "default": false,
            "example": true
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of Taxes attached to the Product. If taxes are passed, isTaxesEnabled should be true.",
            "example": [
              "654492a4e6bef380114de15a"
            ]
          },
          "automaticTaxCategoryId": {
            "type": "string",
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5"
          },
          "isLabelEnabled": {
            "type": "boolean",
            "description": "Is the product label enabled. If this is true, label object cannot be empty.",
            "default": false,
            "example": true
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "Details for Product Label"
          },
          "slug": {
            "type": "string",
            "description": "The slug using which the product navigation will be handled",
            "example": "awesome-product"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "SEO data for the product that will be displayed in the preview"
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "Whether the taxes should be included in the purchase price",
            "default": false,
            "example": true
          }
        }
      },
      "CreateProductResponseDto": {
        "required": [
          "_id",
          "locationId",
          "name",
          "productType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "description": {
            "type": "string",
            "description": "product description",
            "example": "This is a really awesome product"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "description": "An array of variants for the product."
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Awesome Product"
          },
          "productType": {
            "type": "string",
            "description": "The type of the product (e.g., PHYSICAL).",
            "example": "PHYSICAL"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Indicates whether the product is available in-store.",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the product.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the product.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "statementDescriptor": {
            "type": "string",
            "description": "The statement descriptor for the product.",
            "example": "abcde"
          },
          "image": {
            "type": "string",
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of category Ids for the product",
            "example": [
              "65d71377c326ea78e1c47df5",
              "65d71377c326ea78e1c47d34"
            ]
          },
          "isTaxesEnabled": {
            "type": "boolean",
            "description": "The field indicates whether taxes are enabled for the product or not.",
            "default": false,
            "example": true
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
            "example": [
              "654492a4e6bef380114de15a"
            ]
          },
          "automaticTaxCategoryId": {
            "type": "string",
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "The Product label details"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the product by which the product will be navigated",
            "example": "washing-machine"
          }
        }
      },
      "UpdateProductDto": {
        "required": [
          "name",
          "locationId",
          "productType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Awesome Product"
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product.",
            "example": "Product description goes here."
          },
          "productType": {
            "enum": [
              "DIGITAL",
              "PHYSICAL",
              "SERVICE",
              "PHYSICAL/DIGITAL"
            ],
            "type": "string"
          },
          "image": {
            "type": "string",
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
          },
          "statementDescriptor": {
            "type": "string",
            "description": "The statement descriptor for the product.",
            "example": "abcde"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Indicates whether the product is available in-store.",
            "example": true
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMediaDto"
            },
            "description": "An array of medias for the product."
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "description": "An array of variants for the product."
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of category Ids for the product",
            "example": [
              "65d71377c326ea78e1c47df5",
              "65d71377c326ea78e1c47d34"
            ]
          },
          "isTaxesEnabled": {
            "type": "boolean",
            "description": "Are there any taxes attached to the product. If this is true, taxes array cannot be empty.",
            "default": false,
            "example": true
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of Taxes attached to the Product. If taxes are passed, isTaxesEnabled should be true.",
            "example": [
              "654492a4e6bef380114de15a"
            ]
          },
          "automaticTaxCategoryId": {
            "type": "string",
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5"
          },
          "isLabelEnabled": {
            "type": "boolean",
            "description": "Is the product label enabled. If this is true, label object cannot be empty.",
            "default": false,
            "example": true
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "Details for Product Label"
          },
          "slug": {
            "type": "string",
            "description": "The slug using which the product navigation will be handled",
            "example": "awesome-product"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "SEO data for the product that will be displayed in the preview"
          },
          "taxInclusive": {
            "type": "boolean",
            "description": "Whether the taxes should be included in the purchase price",
            "default": false,
            "example": true
          },
          "prices": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The prices of the product"
          }
        }
      },
      "UpdateProductResponseDto": {
        "required": [
          "_id",
          "locationId",
          "name",
          "productType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "description": {
            "type": "string",
            "description": "product description",
            "example": "This is a really awesome product"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "description": "An array of variants for the product."
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Awesome Product"
          },
          "productType": {
            "type": "string",
            "description": "The type of the product (e.g., PHYSICAL).",
            "example": "PHYSICAL"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Indicates whether the product is available in-store.",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the product.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the product.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "statementDescriptor": {
            "type": "string",
            "description": "The statement descriptor for the product.",
            "example": "abcde"
          },
          "image": {
            "type": "string",
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of category Ids for the product",
            "example": [
              "65d71377c326ea78e1c47df5",
              "65d71377c326ea78e1c47d34"
            ]
          },
          "isTaxesEnabled": {
            "type": "boolean",
            "description": "The field indicates whether taxes are enabled for the product or not.",
            "default": false,
            "example": true
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
            "example": [
              "654492a4e6bef380114de15a"
            ]
          },
          "automaticTaxCategoryId": {
            "type": "string",
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "The Product label details"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the product by which the product will be navigated",
            "example": "washing-machine"
          }
        }
      },
      "products_DefaultProductResponseDto": {
        "required": [
          "_id",
          "locationId",
          "name",
          "productType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5"
          },
          "description": {
            "type": "string",
            "description": "product description",
            "example": "This is a really awesome product"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "description": "An array of variants for the product."
          },
          "locationId": {
            "type": "string",
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6"
          },
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Awesome Product"
          },
          "productType": {
            "type": "string",
            "description": "The type of the product (e.g., PHYSICAL).",
            "example": "PHYSICAL"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Indicates whether the product is available in-store.",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The creation timestamp of the product.",
            "format": "date-time",
            "example": "2023-11-20T10:23:36.515Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last update timestamp of the product.",
            "format": "date-time",
            "example": "2024-01-23T09:57:04.846Z"
          },
          "statementDescriptor": {
            "type": "string",
            "description": "The statement descriptor for the product.",
            "example": "abcde"
          },
          "image": {
            "type": "string",
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of category Ids for the product",
            "example": [
              "65d71377c326ea78e1c47df5",
              "65d71377c326ea78e1c47d34"
            ]
          },
          "isTaxesEnabled": {
            "type": "boolean",
            "description": "The field indicates whether taxes are enabled for the product or not.",
            "default": false,
            "example": true
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
            "example": [
              "654492a4e6bef380114de15a"
            ]
          },
          "automaticTaxCategoryId": {
            "type": "string",
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "The Product label details"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the product by which the product will be navigated",
            "example": "washing-machine"
          }
        }
      },
      "ListProductsStats": {
        "required": [
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of products",
            "example": 20
          }
        }
      },
      "ListProductsResponseDto": {
        "required": [
          "products",
          "total"
        ],
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultProductResponseDto"
            },
            "description": "An array of products"
          },
          "total": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListProductsStats"
            },
            "description": "list products status"
          }
        }
      },
      "SnapshotsSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Snapshot Id.",
            "example": "1eM2UgkfaECOYyUdCo9Pa"
          },
          "name": {
            "type": "string",
            "description": "Name of the snapshot",
            "example": "Martial Arts Snapshot"
          },
          "type": {
            "type": "string",
            "description": "Type of snapshot - own or imported.",
            "example": "own"
          }
        }
      },
      "GetSnapshotsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SnapshotsSchema"
            }
          }
        }
      },
      "CreateSnapshotShareLinkRequestDTO": {
        "required": [
          "snapshot_id",
          "share_type"
        ],
        "type": "object",
        "properties": {
          "snapshot_id": {
            "type": "string",
            "description": "id for snapshot to be shared",
            "example": "1eM2UgkfaECOYyUdCo9Pa"
          },
          "share_type": {
            "enum": [
              "link",
              "permanent_link",
              "agency_link",
              "location_link"
            ],
            "type": "string",
            "description": "Type of share link to generate",
            "example": "permanent_link"
          },
          "relationship_number": {
            "type": "string",
            "description": "Comma separated Relationship number of Agencies to create agency restricted share link",
            "example": "0-128-926,1-208-926,2-008-926"
          },
          "share_location_id": {
            "type": "string",
            "description": "Comma separated Sub-Account ids to create sub-account restricted share link",
            "example": "l1C08ntBrFjLS0elLIYU, U1C08ntBrFjLS0elKIYP"
          }
        }
      },
      "CreateSnapshotShareLinkSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id for shared snapshot",
            "example": "1eM2UgkfaECOYyUdCo9Pa"
          },
          "shareLink": {
            "type": "string",
            "description": "Share Link for snapshot",
            "example": "https://affiliates.gohighlevel.com/?share=1eM2UgkfaECOYyUdCo9Pa"
          }
        }
      },
      "SnapshotStatusSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document id",
            "example": "1eM2UgkfaECOYyUdCo9Pa"
          },
          "locationId": {
            "type": "string",
            "description": "Sub-account id",
            "example": "BrKClvyvdxhJ9Mxz2pzQ"
          },
          "status": {
            "type": "string",
            "description": "Status of snapshot push",
            "example": "processing"
          },
          "dateAdded": {
            "type": "string",
            "description": "Timestamp of when snapshot processing starts for sub-account ",
            "format": "date-time",
            "example": "10/28/2022, 6:24:54 PM"
          }
        }
      },
      "GetSnapshotPushStatusSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SnapshotStatusSchema"
            }
          }
        }
      },
      "SnapshotStatusSchemaWithAssets": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document id",
            "example": "1eM2UgkfaECOYyUdCo9Pa"
          },
          "locationId": {
            "type": "string",
            "description": "Sub-account id",
            "example": "BrKClvyvdxhJ9Mxz2pzQ"
          },
          "status": {
            "type": "string",
            "description": "Status of snapshot push",
            "example": "processing"
          },
          "completed": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of completed assets",
            "example": "['forms', 'surveys', 'funnels', 'workflows']"
          },
          "pending": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of pending assets",
            "example": "['custom_fields','custom_values','tags']"
          }
        }
      },
      "GetLatestSnapshotPushStatusSuccessfulResponseDTO": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SnapshotStatusSchemaWithAssets"
          }
        }
      },
      "campaignsSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "mIVALPYuTD7YjUHnFEx4"
          },
          "name": {
            "type": "string",
            "example": "test"
          },
          "status": {
            "type": "string",
            "example": "published"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "CampaignsSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/campaignsSchema"
            }
          }
        }
      },
      "BusinessCreatedByOrUpdatedBy": {
        "type": "object"
      },
      "BusinessDto": {
        "required": [
          "id",
          "name",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Business Id",
            "example": "63771dcac1116f0e21de8e12"
          },
          "name": {
            "type": "string",
            "description": "Business Name",
            "example": "Microsoft"
          },
          "phone": {
            "type": "string",
            "description": "phone number"
          },
          "email": {
            "type": "string",
            "description": "email",
            "example": "abc@microsoft.com"
          },
          "website": {
            "type": "string",
            "description": "website",
            "example": "microsoft.com"
          },
          "address": {
            "type": "string",
            "description": "address"
          },
          "city": {
            "type": "string",
            "description": "city"
          },
          "description": {
            "type": "string",
            "description": "description"
          },
          "state": {
            "type": "string",
            "description": "state"
          },
          "postalCode": {
            "type": "string",
            "description": "postal code"
          },
          "country": {
            "type": "string",
            "description": "country",
            "example": "united states"
          },
          "updatedBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessCreatedByOrUpdatedBy"
              }
            ],
            "description": "updated By"
          },
          "locationId": {
            "type": "string",
            "description": "locaitonId"
          },
          "createdBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessCreatedByOrUpdatedBy"
              }
            ],
            "description": "Created By"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation Time",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updation time",
            "format": "date-time"
          }
        }
      },
      "GetBusinessByLocationResponseDto": {
        "required": [
          "businesses"
        ],
        "type": "object",
        "properties": {
          "businesses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessDto"
            },
            "description": "Business Response"
          }
        }
      },
      "CreateBusinessDto": {
        "required": [
          "name",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Microsoft"
          },
          "locationId": {
            "type": "string",
            "example": "5DP4iH6HLkQsiKESj6rh"
          },
          "phone": {
            "type": "string",
            "example": "+18832327657"
          },
          "email": {
            "type": "string",
            "example": "john@deo.com"
          },
          "website": {
            "type": "string",
            "example": "www.xyz.com"
          },
          "address": {
            "type": "string",
            "example": "street adress"
          },
          "city": {
            "type": "string",
            "example": "new york"
          },
          "postalCode": {
            "type": "string",
            "example": "12312312"
          },
          "state": {
            "type": "string",
            "example": "new york"
          },
          "country": {
            "type": "string",
            "example": "us"
          },
          "description": {
            "type": "string",
            "example": "business description"
          }
        }
      },
      "UpdateBusinessResponseDto": {
        "required": [
          "success",
          "buiseness"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success Value",
            "example": true
          },
          "buiseness": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDto"
              }
            ],
            "description": "Business Response"
          }
        }
      },
      "UpdateBusinessDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Microsoft"
          },
          "phone": {
            "type": "string",
            "example": "+18832327657"
          },
          "email": {
            "type": "string",
            "example": "john@deo.com"
          },
          "postalCode": {
            "type": "string",
            "example": "12312312"
          },
          "website": {
            "type": "string",
            "example": "www.xyz.com"
          },
          "address": {
            "type": "string",
            "example": "street adress"
          },
          "state": {
            "type": "string",
            "example": "new york"
          },
          "city": {
            "type": "string",
            "example": "new york"
          },
          "country": {
            "type": "string",
            "example": "us"
          },
          "description": {
            "type": "string",
            "example": "business description"
          }
        }
      },
      "DeleteBusinessResponseDto": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success value",
            "example": true
          }
        }
      },
      "GetBusinessByIdResponseDto": {
        "required": [
          "business"
        ],
        "type": "object",
        "properties": {
          "business": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDto"
              }
            ],
            "description": "Business Response"
          }
        }
      },
      "WorkflowSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "78559bb3-b920-461e-b010-7b2a2816d2a9"
          },
          "name": {
            "type": "string",
            "example": "First Workflow"
          },
          "status": {
            "type": "string",
            "example": "draft"
          },
          "version": {
            "type": "number",
            "example": 2
          },
          "createdAt": {
            "type": "string",
            "example": "2021-05-26T11:33:49.000Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2021-05-26T11:33:49.000Z"
          },
          "locationId": {
            "type": "string",
            "example": "eBG6WapS3v4ZqwA45MTxtYJ"
          }
        }
      },
      "GetWorkflowSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "workflows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowSchema"
            }
          }
        }
      },
      "ScheduleDto": {
        "required": [
          "name",
          "repeatAfter",
          "id",
          "parentId",
          "childCount",
          "campaignType",
          "bulkActionVersion",
          "_id",
          "status",
          "sendDays",
          "deleted",
          "migrated",
          "archived",
          "hasTracking",
          "isPlainText",
          "hasUtmTracking",
          "enableResendToUnopened",
          "locationId",
          "templateId",
          "templateType",
          "createdAt",
          "updatedAt",
          "__v",
          "documentId",
          "downloadUrl",
          "templateDataDownloadUrl",
          "child"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Untitled new campaign"
          },
          "repeatAfter": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "childCount": {
            "type": "number"
          },
          "campaignType": {
            "type": "string"
          },
          "bulkActionVersion": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "sendDays": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deleted": {
            "type": "boolean"
          },
          "migrated": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "hasTracking": {
            "type": "boolean"
          },
          "isPlainText": {
            "type": "boolean"
          },
          "hasUtmTracking": {
            "type": "boolean"
          },
          "enableResendToUnopened": {
            "type": "boolean"
          },
          "locationId": {
            "type": "string"
          },
          "templateId": {
            "type": "string"
          },
          "templateType": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "__v": {
            "type": "number"
          },
          "documentId": {
            "type": "string"
          },
          "downloadUrl": {
            "type": "string"
          },
          "templateDataDownloadUrl": {
            "type": "string"
          },
          "child": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ScheduleFetchSuccessfulDTO": {
        "required": [
          "schedules",
          "total",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleDto"
            },
            "description": "The list of campaigns"
          },
          "total": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The total number of campaigns"
          },
          "traceId": {
            "type": "string",
            "description": "Trace Id"
          }
        }
      },
      "InvalidLocationDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 403
          },
          "message": {
            "type": "string",
            "example": "The token does not have access to this location"
          }
        }
      },
      "NotFoundDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "Not Found"
          },
          "error": {
            "type": "string",
            "example": "The requested resource was not found"
          }
        }
      },
      "CreateBuilderDto": {
        "required": [
          "locationId",
          "type",
          "importProvider"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "title": {
            "type": "string",
            "example": "template title"
          },
          "type": {
            "enum": [
              "html",
              "folder",
              "import",
              "builder",
              "blank"
            ],
            "type": "string"
          },
          "updatedBy": {
            "type": "string",
            "example": "zYy3YOUuHxgomU1uYJty"
          },
          "builderVersion": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "default": "2"
          },
          "name": {
            "type": "string",
            "example": "Template1"
          },
          "parentId": {
            "type": "string",
            "example": "zYy3YOUuHxgomU1uYJty"
          },
          "templateDataUrl": {
            "type": "string",
            "example": ""
          },
          "importProvider": {
            "enum": [
              "mailchimp",
              "active_campaign",
              "kajabi"
            ],
            "type": "string"
          },
          "importURL": {
            "type": "string",
            "example": "https://tplshare.com/fhYJ3Mi"
          },
          "templateSource": {
            "type": "string",
            "example": "template_library"
          },
          "isPlainText": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "CreateBuilderSuccesfulResponseDto": {
        "required": [
          "redirect",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "redirect": {
            "type": "string",
            "description": "template id",
            "example": "66e811229245fc098765590"
          },
          "traceId": {
            "type": "string",
            "description": "trace id",
            "example": "0c52e980-41f6-4be7-8c4b-e2c5a13dc3c2"
          }
        }
      },
      "FetchBuilderSuccesfulResponseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "template name",
            "example": "New Template"
          },
          "updatedBy": {
            "type": "string",
            "description": "updated by",
            "example": "John Doe"
          },
          "isPlainText": {
            "type": "boolean",
            "description": "plain text based template",
            "example": "false"
          },
          "lastUpdated": {
            "type": "string",
            "description": "last updated",
            "example": "2024-11-12T12:34:36.070Z"
          },
          "dateAdded": {
            "type": "string",
            "description": "date added",
            "example": "2024-11-12T12:34:36.070Z"
          },
          "previewUrl": {
            "type": "string",
            "description": "preview url",
            "example": "https://example.com"
          },
          "id": {
            "type": "string",
            "description": "id",
            "example": "67334b231f2fad724062f52b5"
          },
          "version": {
            "type": "string",
            "description": "version",
            "example": "1"
          },
          "templateType": {
            "type": "string",
            "description": "type",
            "example": "builder"
          }
        }
      },
      "DeleteBuilderSuccesfulResponseDto": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "string",
            "description": "ok",
            "example": "true"
          },
          "traceId": {
            "type": "string",
            "description": "trace id",
            "example": "0c52e980-41f6-4be7-8c4b-32332ss"
          }
        }
      },
      "TemplateSettings": {
        "type": "object"
      },
      "IBuilderJsonMapper": {
        "required": [
          "elements",
          "attrs",
          "templateSettings"
        ],
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attrs": {
            "type": "object"
          },
          "templateSettings": {
            "$ref": "#/components/schemas/TemplateSettings"
          }
        }
      },
      "SaveBuilderDataDto": {
        "required": [
          "locationId",
          "templateId",
          "updatedBy",
          "dnd",
          "html",
          "editorType"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "templateId": {
            "type": "string",
            "example": "zYy3YOUuHxgomU1uYJty"
          },
          "updatedBy": {
            "type": "string",
            "example": "zYy3YOUuHxgomU1uYJty"
          },
          "dnd": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IBuilderJsonMapper"
              }
            ],
            "example": "{elements:[], attrs:{}, templateSettings:{}}"
          },
          "html": {
            "type": "string",
            "example": ""
          },
          "editorType": {
            "enum": [
              "html",
              "builder"
            ],
            "type": "string"
          },
          "previewText": {
            "type": "string",
            "example": "zYy3YOUuHxgomU1uYJty"
          },
          "isPlainText": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "BuilderUpdateSuccessfulDTO": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "string",
            "description": "ok",
            "example": "true"
          },
          "traceId": {
            "type": "string",
            "description": "trace id",
            "example": "0c52e980-41f6-4be7-8c4b-32332ss"
          },
          "previewUrl": {
            "type": "string",
            "description": "preview url",
            "example": "https://example.com"
          },
          "templateDownloadUrl": {
            "type": "string",
            "description": "template data download url",
            "example": "https://example.com"
          }
        }
      },
      "DetailedPhoneNumberDto": {
        "required": [
          "phoneNumber",
          "sid",
          "countryCode",
          "capabilities",
          "type",
          "isDefaultNumber",
          "linkedRingAllUsers",
          "isGroupConversationEnabled"
        ],
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "E.164 formatted phone number",
            "example": "+14155552671"
          },
          "friendlyName": {
            "type": "string",
            "description": "Human-readable name assigned to the number",
            "nullable": true,
            "example": "Sales Line 1"
          },
          "sid": {
            "type": "string",
            "description": "Phone number SID (unique identifier)",
            "example": "PN1234567890abcdef1234567890abcde"
          },
          "countryCode": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code",
            "example": "US"
          },
          "capabilities": {
            "type": "object",
            "properties": {
              "voice": {
                "type": "boolean",
                "description": "Whether the number supports voice calls",
                "example": true
              },
              "sms": {
                "type": "boolean",
                "description": "Whether the number supports SMS messaging",
                "example": true
              },
              "mms": {
                "type": "boolean",
                "description": "Whether the number supports MMS messaging",
                "example": true
              },
              "fax": {
                "type": "boolean",
                "description": "Whether the number supports fax transmission",
                "example": false
              }
            },
            "description": "Communication capabilities supported by this number"
          },
          "type": {
            "enum": [
              "local",
              "toll-free",
              "mobile",
              "national"
            ],
            "type": "string",
            "description": "Type of phone number (local, toll-free, mobile, etc.)",
            "example": "local"
          },
          "isDefaultNumber": {
            "type": "boolean",
            "description": "Whether this is the default outbound number for the location",
            "example": false
          },
          "linkedUser": {
            "type": "string",
            "description": "User ID of the user assigned to this number",
            "nullable": true,
            "example": "user_123456789"
          },
          "linkedRingAllUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of user IDs that should ring when this number is called",
            "example": [
              "user_123",
              "user_456"
            ]
          },
          "inboundCallService": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "voice_ai",
                  "ivr",
                  "forward"
                ],
                "type": "string",
                "description": "Type of inbound call service",
                "example": "voice_ai"
              },
              "value": {
                "type": "string",
                "description": "Service configuration value or ID",
                "example": "68e381b296a83800a27cd1"
              }
            },
            "description": "Configuration for inbound call handling service",
            "nullable": true
          },
          "forwardingNumber": {
            "type": "string",
            "description": "Phone number to forward calls to",
            "nullable": true,
            "example": "+14155552672"
          },
          "isGroupConversationEnabled": {
            "type": "boolean",
            "description": "Whether group conversations are enabled for this number (US/CA numbers with SMS/MMS only)",
            "example": true
          },
          "addressSid": {
            "type": "string",
            "description": "Address SID for compliance purposes",
            "nullable": true,
            "example": "AD1234567890abcdef1234567890abcde"
          },
          "bundleSid": {
            "type": "string",
            "description": "Bundle SID for regulatory compliance",
            "nullable": true,
            "example": "BU1234567890abcdef1234567890abcde"
          },
          "dateAdded": {
            "type": "string",
            "description": "When the number was originally purchased/added",
            "format": "date-time",
            "example": "2023-01-15T10:30:00Z"
          },
          "dateUpdated": {
            "type": "string",
            "description": "When the number configuration was last updated",
            "format": "date-time",
            "example": "2023-02-20T14:45:00Z"
          },
          "origin": {
            "enum": [
              "twilio",
              "hosted",
              "ported"
            ],
            "type": "string",
            "description": "Source or origin of the phone number",
            "example": "twilio"
          }
        }
      },
      "NumberPoolDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the number pool",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of the number pool",
            "example": "Sales Team Pool"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID this pool belongs to",
            "example": "loc123"
          },
          "numbers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phoneNumber": {
                  "type": "string",
                  "description": "E.164 formatted phone number",
                  "example": "+14155552671"
                },
                "friendlyName": {
                  "type": "string",
                  "description": "Human-readable name for the number",
                  "example": "Sales Line 1"
                }
              }
            },
            "description": "Phone numbers in this pool"
          },
          "forwardingNumber": {
            "type": "string",
            "description": "Number to forward calls to",
            "example": "+14155552671"
          },
          "whisper": {
            "type": "boolean",
            "description": "Whether whisper is enabled",
            "example": true
          },
          "whisperMessage": {
            "type": "string",
            "description": "Message played during whisper",
            "example": "Incoming call from sales line"
          },
          "callRecording": {
            "type": "boolean",
            "description": "Whether call recording is enabled",
            "example": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the number pool is active",
            "example": true
          },
          "inboundCallService": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of inbound call service",
                "example": "voice_ai"
              },
              "value": {
                "type": "string",
                "description": "Service configuration value/ID",
                "example": "68e381b296a83800a27cd1"
              }
            },
            "description": "Inbound call service configuration",
            "nullable": true
          }
        }
      },
      "CreateRedirectParams": {
        "required": [
          "locationId",
          "domain",
          "path",
          "target",
          "action"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "6p2RxpgtMKQwO3E6IUaT"
          },
          "domain": {
            "type": "string",
            "example": "example.com"
          },
          "path": {
            "type": "string",
            "example": "/Hello"
          },
          "target": {
            "type": "string",
            "example": "https://www.google.com"
          },
          "action": {
            "enum": [
              "funnel",
              "website",
              "url",
              "all"
            ],
            "type": "string",
            "example": "URL"
          }
        }
      },
      "RedirectResponseDTO": {
        "required": [
          "id",
          "locationId",
          "domain",
          "path",
          "pathLowercase",
          "type",
          "target",
          "action"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the redirect",
            "example": "6p2RxpgtMKQwO3E6IUaT"
          },
          "locationId": {
            "type": "string",
            "description": "Identifier of the location associated with the redirect",
            "example": "6p2RxpgtMKQwO3E6IUaT"
          },
          "domain": {
            "type": "string",
            "description": "Domain where the redirect occurs",
            "example": "www.example.com"
          },
          "path": {
            "type": "string",
            "description": "Original path that will be redirected",
            "example": "/old-path"
          },
          "pathLowercase": {
            "type": "string",
            "description": "Lowercase version of the original path",
            "example": "/old-path"
          },
          "type": {
            "type": "string",
            "description": "Type of redirect (e.g., Permanent, Temporary)",
            "example": "Permanent"
          },
          "target": {
            "type": "string",
            "description": "Target URL to which the original path will be redirected",
            "example": "https://www.example.com/new-path"
          },
          "action": {
            "type": "string",
            "description": "Action performed by the redirect",
            "example": "url"
          }
        }
      },
      "CreateRedirectResponseDTO": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedirectResponseDTO"
              }
            ],
            "description": "Data containing details of the created redirect"
          }
        }
      },
      "UpdateRedirectParams": {
        "required": [
          "target",
          "action",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "example": "https://www.google.com"
          },
          "action": {
            "enum": [
              "funnel",
              "website",
              "url",
              "all"
            ],
            "type": "string",
            "example": "URL"
          },
          "locationId": {
            "type": "string",
            "example": "6p2RxpgtMKQwO3E6IUaT"
          }
        }
      },
      "RedirectListResponseDTO": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Object containing the count of redirects and an array of redirect data",
            "example": {
              "count": 42,
              "data": [ ]
            }
          }
        }
      },
      "DeleteRedirectResponseDTO": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Status of the delete operation",
            "example": {
              "status": "ok"
            }
          }
        }
      },
      "UpdateRedirectResponseDTO": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedirectResponseDTO"
              }
            ],
            "description": "Data containing details of the updated redirect"
          }
        }
      },
      "FunnelPageResponseDTO": {
        "required": [
          "locationId",
          "name",
          "funnelId",
          "stepId",
          "deleted",
          "updatedAt",
          "_id"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "0yJbP3q7t7pLmeTWRAE2"
          },
          "locationId": {
            "type": "string",
            "example": "ojQjykmwNIU88vfsfzvH"
          },
          "funnelId": {
            "type": "string",
            "example": "iucJ6TdFZiddhq9f6znh"
          },
          "name": {
            "type": "string",
            "example": "Home"
          },
          "stepId": {
            "type": "string",
            "example": "343bf634-3aa6-4ade-b963-2d3cd0bf2ede"
          },
          "deleted": {
            "type": "string",
            "example": false
          },
          "updatedAt": {
            "type": "string",
            "example": "2024-04-18T12:25:23.029Z"
          }
        }
      },
      "FunnelPageCountResponseDTO": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "example": 20
          }
        }
      },
      "FunnelListResponseDTO": {
        "required": [
          "funnels",
          "count",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "funnels": {
            "type": "object",
            "example": {
              "_id": "SkIDfu0S4m3NYQyvWHC6",
              "dateAdded": "2024-04-29T15:00:05.681Z",
              "dateUpdated": "2024-04-29T15:00:28.465Z",
              "deleted": false,
              "domainId": "",
              "locationId": "ojQjykmwNIU88vfsfzvH",
              "name": "Chaitanya Copy",
              "orderFormVersion": 2,
              "originId": "hAmyh7jrJH5FfEEKAJ9z",
              "steps": [
                {
                  "id": "f5d178c0-8bbb-4cd4-927c-691c68a62c59",
                  "name": "Step 1",
                  "originId": "80b2f227-5bc8-4ca5-980d-817745ea4e8b",
                  "pages": [
                    "2IhBmBcQRx9JXV1JZsRt"
                  ],
                  "products": [ ],
                  "sequence": 1,
                  "type": "optin_funnel_page",
                  "url": "/newtestifypath"
                }
              ],
              "type": "funnel",
              "updatedAt": "2024-04-29T15:00:34.233Z",
              "faviconUrl": "",
              "globalSectionVersion": 1,
              "globalSectionsPath": "funnel/SkIDfu0S4m3NYQyvWHC6/global-sections-1",
              "globalSectionsUrl": "https://firebasestorage.googleapis.com/v0/b/highlevel-staging.appspot.com/o/funnel%2FSkIDfu0S4m3NYQyvWHC6%2Fglobal-sections-1?alt=media&token=9cc5c211-093b-4751-aeba-19282ac92955",
              "isStoreActive": false,
              "trackingCodeBody": "",
              "trackingCodeHead": "",
              "url": "/chaitanya"
            }
          },
          "count": {
            "type": "number",
            "example": 24
          },
          "traceId": {
            "type": "string",
            "example": "03774d31-a57e-4b4f-95c7-315ce61969f1"
          }
        }
      },
      "GetFilesResponseDTO": {
        "required": [
          "files"
        ],
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of File Objects",
            "example": {
              "altId": "locationId",
              "altType": "location",
              "name": "file name",
              "parentId": "parent folder id",
              "url": "file url",
              "path": "file path"
            }
          }
        }
      },
      "medias_UploadFileResponseDTO": {
        "required": [
          "fileId",
          "url"
        ],
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "ID of the uploaded file",
            "example": "file.pdf"
          },
          "url": {
            "type": "string",
            "description": "Google Cloud Storage URL of the uploaded file",
            "example": "https://storage.googleapis.com/bucket-name/path/to/file.pdf"
          }
        }
      },
      "FolderDTO": {
        "required": [
          "altId",
          "altType",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location identifier that owns this folder",
            "example": "sx6wyHhbFdRXh302LLNR"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Type of entity that owns the folder",
            "example": "location"
          },
          "name": {
            "type": "string",
            "description": "Name of the folder",
            "example": "New Folder"
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent folder (null for root folders)",
            "example": "64af50c42d567a3b4f5989e0"
          },
          "type": {
            "type": "string",
            "description": "Type of the object (always 'folder' for folders)",
            "example": "folder"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the folder has been deleted",
            "example": false
          },
          "pendingUpload": {
            "type": "boolean",
            "description": "Whether there are pending uploads to this folder",
            "example": false
          },
          "category": {
            "type": "string",
            "description": "Primary category of content stored in the folder",
            "example": "image"
          },
          "subCategory": {
            "type": "string",
            "description": "Sub-category of content stored in the folder",
            "example": "logo"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the folder is private and not publicly accessible",
            "example": false
          },
          "relocatedFolder": {
            "type": "boolean",
            "description": "Whether the folder has been moved from its original location",
            "example": false
          },
          "migrationCompleted": {
            "type": "boolean",
            "description": "Whether the data migration process has been completed for this folder",
            "example": true
          },
          "appFolder": {
            "type": "boolean",
            "description": "Whether this is a system-generated application folder",
            "example": false
          },
          "isEssential": {
            "type": "boolean",
            "description": "Whether the folder is essential and should not be deleted",
            "example": false
          },
          "status": {
            "type": "string",
            "description": "Current status of the folder"
          },
          "lastUpdatedBy": {
            "type": "string",
            "description": "ID of the user who last updated the folder",
            "example": "user-uuid-123"
          }
        }
      },
      "CreateFolderParams": {
        "required": [
          "altId",
          "altType",
          "name"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location Id",
            "example": "sx6wyHhbFdRXh302LLNR"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Type of entity (location only)",
            "example": "location"
          },
          "name": {
            "type": "string",
            "description": "Name of the folder to be created",
            "example": "New Folder"
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent folder (optional)",
            "example": "64af50c42d567a3b4f5989e0"
          }
        }
      },
      "UpdateObject": {
        "required": [
          "name",
          "altType",
          "altId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the file or folder",
            "example": "Updated File Name.pdf"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Type of entity that owns the file or folder",
            "example": "location"
          },
          "altId": {
            "type": "string",
            "description": "Location identifier that owns the file or folder",
            "example": "sx6wyHhbFdRXh302LLNR"
          }
        }
      },
      "UpdateMediaObjects": {
        "required": [
          "altId",
          "altType",
          "filesToBeUpdated"
        ],
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location identifier",
            "example": "sx6wyHhbFdRXh302LLNR"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Type of entity that owns the files",
            "example": "location"
          },
          "filesToBeUpdated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMediaObject"
            },
            "description": "Array of file objects to be updated",
            "example": [
              {
                "id": "686f9817f0d3165be9fbcef6",
                "name": "Updated File Name.pdf"
              }
            ]
          }
        }
      },
      "DeleteMediaObjectItem": {
        "required": [
          "_id"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the file or folder to be deleted",
            "example": "686f630df0d3166d68fbcec2"
          }
        }
      },
      "UpdateMediaObject": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the file or folder to be updated",
            "example": "686f9817f0d3165be9fbcef6"
          },
          "name": {
            "type": "string",
            "description": "New name for the file or folder",
            "example": "Updated File Name.pdf"
          }
        }
      },
      "DeleteMediaObjectsBodyParams": {
        "required": [
          "filesToBeDeleted",
          "altType",
          "altId",
          "status"
        ],
        "type": "object",
        "properties": {
          "filesToBeDeleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeleteMediaObjectItem"
            },
            "description": "Array of file objects to be deleted or trashed",
            "example": [
              {
                "_id": "686f630df0d3166d68fbcec2"
              }
            ]
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Type of entity that owns the files",
            "example": "location"
          },
          "altId": {
            "type": "string",
            "description": "Location identifier",
            "example": "sx6wyHhbFdRXh302LLNR"
          },
          "status": {
            "enum": [
              "deleted",
              "trashed"
            ],
            "type": "string",
            "description": "Status to set for the files (deleted or trashed)",
            "example": "deleted"
          }
        }
      },
      "MoveOrDeleteObjectParams": {
        "required": [
          "altType",
          "altId",
          "_id"
        ],
        "type": "object",
        "properties": {
          "altType": {
            "type": "string"
          },
          "altId": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "RaiseChargeBodyDTO": {
        "required": [
          "appId",
          "meterId",
          "eventId",
          "locationId",
          "companyId",
          "description",
          "units"
        ],
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "description": "App ID of the App"
          },
          "meterId": {
            "type": "string",
            "description": "Billing Meter ID (you can find this on your app's pricing page)"
          },
          "eventId": {
            "type": "string",
            "description": "Event ID / Transaction ID on your server's side. This will help you maintain the reference of the event/transaction on your end that you charged the customer for."
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "locationId": {
            "type": "string",
            "description": "ID of the Sub-Account to be charged"
          },
          "companyId": {
            "type": "string",
            "description": "ID of the Agency the Sub-account belongs to"
          },
          "description": {
            "type": "string",
            "description": "Description of the charge"
          },
          "price": {
            "type": "number",
            "description": "Price per unit to charge"
          },
          "units": {
            "type": "string",
            "description": "Number of units to charge"
          },
          "eventTime": {
            "type": "string",
            "description": "The timestamp when the event/transaction was performed. If blank, the billing timestamp will be set as the event time. ISO8601 Format.",
            "example": "2025-03-26T00:00:000Z"
          }
        }
      },
      "DeleteIntegrationBodyDto": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "The company id from which the application is to be uninstalled. If you pass agency token, then companyId is required. It will uninstall application from agency as well as all sub-accounts.",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "locationId": {
            "type": "string",
            "description": "The location id from which the application is to be uninstalled. If you pass location token, then locationId is required. It will uninstall application from that location only.",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "reason": {
            "type": "string",
            "description": "The reason for uninstalling the application. Reason is required if you are uninstalling the application as a developer.",
            "example": "Application is not working as expected"
          }
        }
      },
      "DeleteIntegrationResponse": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "The status of the uninstallation of the application",
            "example": true
          }
        }
      },
      "WhitelabelDetailsDTO": {
        "required": [
          "domain",
          "logoUrl"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "Domain of the whitelabel company",
            "example": "example.com"
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo URL of the whitelabel company",
            "example": "https://example.com/logo.png"
          }
        }
      },
      "InstallerDetailsDTO": {
        "required": [
          "companyId",
          "companyName",
          "companyEmail",
          "userId",
          "isWhitelabelCompany"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Company ID",
            "example": "company123"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (if applicable)",
            "example": "location123"
          },
          "companyName": {
            "type": "string",
            "description": "Company name",
            "example": "Example Company"
          },
          "companyEmail": {
            "type": "string",
            "description": "Company email",
            "example": "contact@example.com"
          },
          "companyOwnerFullName": {
            "type": "string",
            "description": "Company owner full name",
            "example": "John Doe"
          },
          "userId": {
            "type": "string",
            "description": "User ID who installed the app",
            "example": "user123"
          },
          "isWhitelabelCompany": {
            "type": "boolean",
            "description": "Whether the company is a whitelabel company",
            "example": false
          },
          "companyHighLevelPlan": {
            "type": "string",
            "description": "Company plan",
            "example": "agency_monthly_497"
          },
          "marketplaceAppPlanId": {
            "type": "string",
            "description": "Marketplace app plan ID for paid apps",
            "example": "plan123"
          },
          "whitelabelDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WhitelabelDetailsDTO"
              }
            ],
            "description": "Whitelabel details (only present if isWhitelabelCompany is true)"
          }
        }
      },
      "GetInstallerDetailsResponseDTO": {
        "required": [
          "installationDetails"
        ],
        "type": "object",
        "properties": {
          "installationDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstallerDetailsDTO"
              }
            ],
            "description": "Installation details"
          }
        }
      },
      "conversations_BadRequestDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Bad Request"
          }
        }
      },
      "conversations_UnauthorizedDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Invalid token: access token is invalid"
          },
          "error": {
            "type": "string",
            "example": "Unauthorized"
          }
        }
      },
      "ForbiddenDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 403
          },
          "message": {
            "type": "string",
            "example": "You do not have permission to access this resource"
          },
          "error": {
            "type": "string",
            "example": "Forbidden"
          }
        }
      },
      "StartAfterNumberSchema": {
        "type": "object",
        "properties": {
          "startAfterDate": {
            "type": "number",
            "description": "Search to begin after the specified date - should contain the sort value of the last document",
            "example": 1600854
          }
        }
      },
      "StartAfterArrayNumberSchema": {
        "type": "object",
        "properties": {
          "startAfterDate": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Search to begin after the specified date - should contain the sort value of the last document",
            "example": [
              1600854,
              1600851
            ]
          }
        }
      },
      "ConversationSchema": {
        "required": [
          "id",
          "contactId",
          "locationId",
          "lastMessageBody",
          "lastMessageType",
          "type",
          "unreadCount",
          "fullName",
          "contactName",
          "email",
          "phone"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Conversation Id",
            "example": "ABCHkzuJQ8ZMd4Te84GK"
          },
          "contactId": {
            "type": "string",
            "description": "Contact Id",
            "example": "ABCHkzuJQ8ZMd4Te84GK"
          },
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ABCHkzuJQ8ZMd4Te84GK"
          },
          "lastMessageBody": {
            "type": "string",
            "description": "Content of the most recent message in the conversation",
            "example": "This is a sample message body"
          },
          "lastMessageType": {
            "enum": [
              "TYPE_CALL",
              "TYPE_SMS",
              "TYPE_EMAIL",
              "TYPE_SMS_REVIEW_REQUEST",
              "TYPE_WEBCHAT",
              "TYPE_SMS_NO_SHOW_REQUEST",
              "TYPE_CAMPAIGN_SMS",
              "TYPE_CAMPAIGN_CALL",
              "TYPE_CAMPAIGN_EMAIL",
              "TYPE_CAMPAIGN_VOICEMAIL",
              "TYPE_FACEBOOK",
              "TYPE_CAMPAIGN_FACEBOOK",
              "TYPE_CAMPAIGN_MANUAL_CALL",
              "TYPE_CAMPAIGN_MANUAL_SMS",
              "TYPE_GMB",
              "TYPE_CAMPAIGN_GMB",
              "TYPE_REVIEW",
              "TYPE_INSTAGRAM",
              "TYPE_WHATSAPP",
              "TYPE_CUSTOM_SMS",
              "TYPE_CUSTOM_EMAIL",
              "TYPE_CUSTOM_PROVIDER_SMS",
              "TYPE_CUSTOM_PROVIDER_EMAIL",
              "TYPE_IVR_CALL",
              "TYPE_ACTIVITY_CONTACT",
              "TYPE_ACTIVITY_INVOICE",
              "TYPE_ACTIVITY_PAYMENT",
              "TYPE_ACTIVITY_OPPORTUNITY",
              "TYPE_LIVE_CHAT",
              "TYPE_LIVE_CHAT_INFO_MESSAGE",
              "TYPE_ACTIVITY_APPOINTMENT",
              "TYPE_FACEBOOK_COMMENT",
              "TYPE_INSTAGRAM_COMMENT",
              "TYPE_CUSTOM_CALL",
              "TYPE_INTERNAL_COMMENT",
              "TYPE_ACTIVITY_EMPLOYEE_ACTION_LOG"
            ],
            "type": "string",
            "description": "Channel/type of the most recent message (SMS, Email, Call, etc)",
            "example": "TYPE_SMS"
          },
          "type": {
            "enum": [
              "TYPE_PHONE",
              "TYPE_EMAIL",
              "TYPE_FB_MESSENGER",
              "TYPE_REVIEW",
              "TYPE_GROUP_SMS"
            ],
            "type": "string",
            "description": "Primary channel/type of the conversation (Phone, Email, etc)",
            "example": "TYPE_PHONE"
          },
          "unreadCount": {
            "type": "number",
            "description": "Number of unread messages in this conversation",
            "example": 1
          },
          "fullName": {
            "type": "string",
            "description": "Complete name of the contact (first and last name)",
            "example": "John Doe"
          },
          "contactName": {
            "type": "string",
            "description": "Alternative display name for the contact - used when full name is not available",
            "example": "John Doe Company"
          },
          "email": {
            "type": "string",
            "description": "Primary email address of the contact",
            "example": "johndoe@mailingdomain.com"
          },
          "phone": {
            "type": "string",
            "description": "Primary phone number of the contact",
            "example": "+15550001234"
          }
        }
      },
      "SendConversationResponseDto": {
        "required": [
          "conversations",
          "total"
        ],
        "type": "object",
        "properties": {
          "conversations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationSchema"
            },
            "description": "The list of all conversations found for the given query"
          },
          "total": {
            "type": "number",
            "description": "Total Number of results found for the given query",
            "example": 100
          }
        }
      },
      "CreateConversationDto": {
        "required": [
          "locationId",
          "contactId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID as string",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID as string",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          }
        }
      },
      "ConversationCreateResponseDto": {
        "required": [
          "id",
          "dateUpdated",
          "dateAdded",
          "deleted",
          "contactId",
          "locationId",
          "lastMessageDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the conversation",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "dateUpdated": {
            "type": "string",
            "description": "Date when the conversation was last updated",
            "example": "2023-10-01T12:00:00Z"
          },
          "dateAdded": {
            "type": "string",
            "description": "Date when the conversation was created",
            "example": "2023-10-01T12:00:00Z"
          },
          "deleted": {
            "type": "boolean",
            "description": "Flag indicating if this conversation has been deleted",
            "example": false
          },
          "contactId": {
            "type": "string",
            "description": "Unique identifier of the contact associated with this conversation",
            "example": "ve9EPM428kjkvShlRW1KT"
          },
          "locationId": {
            "type": "string",
            "description": "Unique identifier of the business location where this conversation takes place",
            "example": "ve9EPM428kjkvShlRW1KT"
          },
          "lastMessageDate": {
            "type": "string",
            "description": "Date of the last message in the conversation",
            "example": "2023-10-01T12:00:00Z"
          },
          "assignedTo": {
            "type": "string",
            "description": "Unique identifier of the team member assigned to this conversation",
            "example": "ve9EPM428kjkvShlRW1KT"
          }
        }
      },
      "CreateConversationSuccessResponse": {
        "required": [
          "success",
          "conversation"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the API request was successful.",
            "example": true
          },
          "conversation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConversationCreateResponseDto"
              }
            ],
            "description": "Conversation data of the provided conversation ID."
          }
        }
      },
      "GetConversationByIdResponse": {
        "required": [
          "contactId",
          "locationId",
          "deleted",
          "inbox",
          "type",
          "unreadCount",
          "id"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Unique identifier of the contact associated with this conversation",
            "example": "ve9EPM428kjkvShlRW1KT"
          },
          "locationId": {
            "type": "string",
            "description": "Unique identifier of the business location where this conversation takes place",
            "example": "ve9EPM428kjkvShlRW1KT"
          },
          "deleted": {
            "type": "boolean",
            "description": "Flag indicating if this conversation has been moved to trash/deleted",
            "example": false
          },
          "inbox": {
            "type": "boolean",
            "description": "Flag indicating if this conversation is currently in the main inbox view",
            "example": true
          },
          "type": {
            "type": "number",
            "description": "Communication channel type for this conversation: 1 (Phone), 2 (Email), 3 (Facebook Messenger), 4 (Review), 5 (Group SMS), 6 (Internal Chat - coming soon)"
          },
          "unreadCount": {
            "type": "number",
            "description": "Number of messages in this conversation that have not been read by the user",
            "example": 1
          },
          "assignedTo": {
            "type": "string",
            "description": "Unique identifier of the team member currently responsible for handling this conversation",
            "example": "ve9EPM428kjkvShlRW1KT"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for this specific conversation thread",
            "example": "ve9EPM428kjkvShlRW1KT"
          },
          "starred": {
            "type": "boolean",
            "description": "Flag indicating if this conversation has been marked as important/starred by the user",
            "example": true
          }
        }
      },
      "UpdateConversationDto": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID as string",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "unreadCount": {
            "type": "number",
            "description": "Count of unread messages in the conversation",
            "example": 1
          },
          "starred": {
            "type": "boolean",
            "description": "Starred status of the conversation.",
            "example": true
          },
          "feedback": {
            "type": "object"
          }
        }
      },
      "ConversationDto": {
        "required": [
          "locationId",
          "contactId",
          "deleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Contact ID as string",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID as string",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID as string",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "assignedTo": {
            "type": "string",
            "description": "Assigned User ID as string",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "userId": {
            "type": "string",
            "description": "User ID as string",
            "example": "tDtDnQdgm2LXpyiqYvZ6"
          },
          "lastMessageBody": {
            "type": "string",
            "description": "Last message body as string",
            "example": "Hello, this is the message body"
          },
          "lastMessageDate": {
            "type": "string",
            "description": "Last message date as UTC",
            "example": "1628008053263"
          },
          "lastMessageType": {
            "enum": [
              "TYPE_CALL",
              "TYPE_SMS",
              "TYPE_EMAIL",
              "TYPE_SMS_REVIEW_REQUEST",
              "TYPE_WEBCHAT",
              "TYPE_SMS_NO_SHOW_REQUEST",
              "TYPE_CAMPAIGN_SMS",
              "TYPE_CAMPAIGN_CALL",
              "TYPE_CAMPAIGN_EMAIL",
              "TYPE_CAMPAIGN_VOICEMAIL",
              "TYPE_FACEBOOK",
              "TYPE_CAMPAIGN_FACEBOOK",
              "TYPE_CAMPAIGN_MANUAL_CALL",
              "TYPE_CAMPAIGN_MANUAL_SMS",
              "TYPE_GMB",
              "TYPE_CAMPAIGN_GMB",
              "TYPE_REVIEW",
              "TYPE_INSTAGRAM",
              "TYPE_WHATSAPP",
              "TYPE_CUSTOM_SMS",
              "TYPE_CUSTOM_EMAIL",
              "TYPE_CUSTOM_PROVIDER_SMS",
              "TYPE_CUSTOM_PROVIDER_EMAIL",
              "TYPE_IVR_CALL",
              "TYPE_ACTIVITY_CONTACT",
              "TYPE_ACTIVITY_INVOICE",
              "TYPE_ACTIVITY_PAYMENT",
              "TYPE_ACTIVITY_OPPORTUNITY",
              "TYPE_LIVE_CHAT",
              "TYPE_LIVE_CHAT_INFO_MESSAGE",
              "TYPE_ACTIVITY_APPOINTMENT",
              "TYPE_FACEBOOK_COMMENT",
              "TYPE_INSTAGRAM_COMMENT",
              "TYPE_CUSTOM_CALL",
              "TYPE_INTERNAL_COMMENT",
              "TYPE_ACTIVITY_EMPLOYEE_ACTION_LOG"
            ],
            "type": "string",
            "description": "Type of the last message sent/received in the conversation.",
            "example": "TYPE_CALL"
          },
          "unreadCount": {
            "type": "number",
            "description": "Count of unread messages in the conversation",
            "example": 1
          },
          "inbox": {
            "type": "boolean",
            "description": "Inbox status of the conversation.",
            "example": true
          },
          "starred": {
            "type": "boolean",
            "description": "Starred status of the conversation.",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "description": "Deleted status of the conversation.",
            "example": false
          }
        }
      },
      "GetConversationSuccessfulResponse": {
        "required": [
          "success",
          "conversation"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Boolean value as the API response.",
            "example": true
          },
          "conversation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConversationDto"
              }
            ],
            "description": "Conversation data of the provided conversation ID."
          }
        }
      },
      "DeleteConversationSuccessfulResponse": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Boolean value as the API response.",
            "example": true
          }
        }
      },
      "GetEmailMessageResponseDto": {
        "required": [
          "id",
          "threadId",
          "locationId",
          "contactId",
          "conversationId",
          "dateAdded",
          "body",
          "direction",
          "contentType",
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "altId": {
            "type": "string",
            "description": "External Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "threadId": {
            "type": "string",
            "description": "Message Id or thread Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "contactId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "conversationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "dateAdded": {
            "type": "string",
            "example": "2024-03-27T18:13:49.000Z"
          },
          "subject": {
            "type": "string",
            "example": "Order confirm"
          },
          "body": {
            "type": "string",
            "example": "Hi there"
          },
          "direction": {
            "enum": [
              "inbound",
              "outbound"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "pending",
              "scheduled",
              "sent",
              "delivered",
              "read",
              "undelivered",
              "connected",
              "failed",
              "opened"
            ],
            "type": "string"
          },
          "contentType": {
            "type": "string",
            "example": "text/plain"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of attachment URLs."
          },
          "provider": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "description": "Name and Email Id of the sender"
          },
          "to": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of email Ids of the receivers"
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of email Ids of the people in the cc field"
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of email Ids of the people in the bcc field"
          },
          "replyToMessageId": {
            "type": "string",
            "description": "In case of reply, email message Id of the reply to email"
          },
          "source": {
            "enum": [
              "workflow",
              "bulk_actions",
              "campaign",
              "api",
              "app"
            ],
            "type": "string",
            "description": "Email source"
          },
          "conversationProviderId": {
            "type": "string",
            "description": "Conversation provider ID",
            "example": "cI08i1Bls3iTB9bKgF01"
          }
        }
      },
      "CancelScheduledResponseDto": {
        "required": [
          "status",
          "message"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "HTTP Status code of the request",
            "example": 404
          },
          "message": {
            "type": "string",
            "description": "Error message of the request",
            "example": "Failed cancel the scheduled message"
          }
        }
      },
      "MessageMeta": {
        "type": "object",
        "properties": {
          "callDuration": {
            "type": "string",
            "description": "Call duration in seconds",
            "example": 120
          },
          "callStatus": {
            "enum": [
              "pending",
              "completed",
              "answered",
              "busy",
              "no-answer",
              "failed",
              "canceled",
              "voicemail"
            ],
            "type": "string",
            "description": "Call status - can be pending, completed, answered, busy, no-answer, failed, canceled, or voicemail",
            "example": "completed"
          },
          "email": {
            "type": "object",
            "description": "meta will contain email, for message type 3 (email). messageIds is list of all email message ids under the message thread",
            "example": {
              "email": {
                "messageIds": [
                  "ve9EPM428kjkvShlRW1KT",
                  "ve9EPs1028kjkvShlRW1KT"
                ]
              }
            }
          }
        }
      },
      "GetMessageResponseDto": {
        "required": [
          "id",
          "type",
          "messageType",
          "locationId",
          "contactId",
          "conversationId",
          "dateAdded",
          "direction",
          "contentType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "altId": {
            "type": "string",
            "description": "Alternative identifier for the message",
            "example": "msg_123456789"
          },
          "type": {
            "type": "number",
            "example": 1
          },
          "messageType": {
            "enum": [
              "TYPE_CALL",
              "TYPE_SMS",
              "TYPE_EMAIL",
              "TYPE_SMS_REVIEW_REQUEST",
              "TYPE_WEBCHAT",
              "TYPE_SMS_NO_SHOW_REQUEST",
              "TYPE_CAMPAIGN_SMS",
              "TYPE_CAMPAIGN_CALL",
              "TYPE_CAMPAIGN_EMAIL",
              "TYPE_CAMPAIGN_VOICEMAIL",
              "TYPE_FACEBOOK",
              "TYPE_CAMPAIGN_FACEBOOK",
              "TYPE_CAMPAIGN_MANUAL_CALL",
              "TYPE_CAMPAIGN_MANUAL_SMS",
              "TYPE_GMB",
              "TYPE_CAMPAIGN_GMB",
              "TYPE_REVIEW",
              "TYPE_INSTAGRAM",
              "TYPE_WHATSAPP",
              "TYPE_CUSTOM_SMS",
              "TYPE_CUSTOM_EMAIL",
              "TYPE_CUSTOM_PROVIDER_SMS",
              "TYPE_CUSTOM_PROVIDER_EMAIL",
              "TYPE_IVR_CALL",
              "TYPE_ACTIVITY_CONTACT",
              "TYPE_ACTIVITY_INVOICE",
              "TYPE_ACTIVITY_PAYMENT",
              "TYPE_ACTIVITY_OPPORTUNITY",
              "TYPE_LIVE_CHAT",
              "TYPE_LIVE_CHAT_INFO_MESSAGE",
              "TYPE_ACTIVITY_APPOINTMENT",
              "TYPE_FACEBOOK_COMMENT",
              "TYPE_INSTAGRAM_COMMENT",
              "TYPE_CUSTOM_CALL",
              "TYPE_INTERNAL_COMMENT",
              "TYPE_ACTIVITY_EMPLOYEE_ACTION_LOG"
            ],
            "type": "string",
            "description": "Type of the message as a string",
            "example": "SMS"
          },
          "locationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "contactId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "conversationId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "dateAdded": {
            "type": "string",
            "example": "2024-03-27T18:13:49.000Z"
          },
          "body": {
            "type": "string",
            "example": "Hi there"
          },
          "direction": {
            "enum": [
              "inbound",
              "outbound"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "connected",
              "delivered",
              "failed",
              "opened",
              "pending",
              "read",
              "scheduled",
              "sent",
              "undelivered",
              "clicked",
              "opt_out"
            ],
            "type": "string"
          },
          "contentType": {
            "type": "string",
            "example": "text/plain"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of attachment URLs. Attachments will be empty for Call and Voicemails, type 1 and 10. Please use get call recording API to fetch call recording and voicemails."
          },
          "meta": {
            "$ref": "#/components/schemas/MessageMeta"
          },
          "source": {
            "enum": [
              "workflow",
              "bulk_actions",
              "campaign",
              "api",
              "app"
            ],
            "type": "string",
            "description": "Message source"
          },
          "userId": {
            "type": "string",
            "description": "User Id",
            "example": "ve9EPM428kjkvShlRW1KT"
          },
          "conversationProviderId": {
            "type": "string",
            "description": "Conversation Provider Id",
            "example": "ve9EPM428kjkvShlRW1KT"
          },
          "chatWidgetId": {
            "type": "string",
            "description": "Chat Widget Id",
            "example": "67b0cc8cf14b19d85ace7s35"
          }
        }
      },
      "GetMessagesByConversationResponseDto": {
        "required": [
          "messages"
        ],
        "type": "object",
        "properties": {
          "messages": {
            "required": [
              "lastMessageId",
              "nextPage",
              "messages"
            ],
            "type": "object",
            "properties": {
              "lastMessageId": {
                "type": "string",
                "description": "Id of the last message in the messages array",
                "example": "p1mRSHeLDhAms5q0LMr4"
              },
              "nextPage": {
                "type": "boolean",
                "description": "Next page value true indicates only 20 message is in the response. Rest of the messages are in the next page. Please use the lastMessageId value in the query to get the next page messages",
                "example": true
              },
              "messages": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GetMessageResponseDto"
                },
                "description": "Array of messages"
              }
            }
          }
        }
      },
      "SendMessageBodyDto": {
        "required": [
          "type",
          "contactId"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "SMS",
              "Email",
              "WhatsApp",
              "IG",
              "FB",
              "Custom",
              "Live_Chat"
            ],
            "type": "string",
            "description": "Type of message being sent",
            "example": "Email"
          },
          "contactId": {
            "type": "string",
            "description": "ID of the contact receiving the message",
            "example": "abc123def456"
          },
          "appointmentId": {
            "type": "string",
            "description": "ID of the associated appointment",
            "example": "appt123"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of attachment URLs",
            "example": [
              "https://storage.com/file1.pdf",
              "https://storage.com/file2.jpg"
            ]
          },
          "emailFrom": {
            "type": "string",
            "description": "Email address to send from",
            "example": "sender@company.com"
          },
          "emailCc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of CC email addresses",
            "example": [
              "cc1@company.com",
              "cc2@company.com"
            ]
          },
          "emailBcc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of BCC email addresses",
            "example": [
              "bcc1@company.com",
              "bcc2@company.com"
            ]
          },
          "html": {
            "type": "string",
            "description": "HTML content of the message",
            "example": "<p>Hello World</p>"
          },
          "message": {
            "type": "string",
            "description": "Text content of the message",
            "example": "Hello, how can I help you today?"
          },
          "subject": {
            "type": "string",
            "description": "Subject line for email messages",
            "example": "Important Update"
          },
          "replyMessageId": {
            "type": "string",
            "description": "ID of message being replied to",
            "example": "msg123"
          },
          "templateId": {
            "type": "string",
            "description": "ID of message template",
            "example": "template123"
          },
          "threadId": {
            "type": "string",
            "description": "ID of message thread. For email messages, this is the message ID that contains multiple email messages in the thread",
            "example": "thread123"
          },
          "scheduledTimestamp": {
            "type": "number",
            "description": "UTC Timestamp (in seconds) at which the message should be scheduled",
            "example": 1669287863
          },
          "conversationProviderId": {
            "type": "string",
            "description": "ID of conversation provider",
            "example": "provider123"
          },
          "emailTo": {
            "type": "string",
            "description": "Email address to send to, if different from contact's primary email. This should be a valid email address associated with the contact.",
            "example": "recipient@company.com"
          },
          "emailReplyMode": {
            "enum": [
              "reply",
              "reply_all"
            ],
            "type": "string",
            "description": "Mode for email replies",
            "example": "reply_all"
          },
          "fromNumber": {
            "type": "string",
            "description": "Phone number used as the sender number for outbound messages",
            "example": "+1499499299"
          },
          "toNumber": {
            "type": "string",
            "description": "Recipient phone number for outbound messages",
            "example": "+1439499299"
          }
        }
      },
      "SendMessageResponseDto": {
        "required": [
          "conversationId",
          "messageId"
        ],
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "Conversation ID.",
            "example": "ABC12h2F6uBrIkfXYazb"
          },
          "emailMessageId": {
            "type": "string",
            "description": "This contains the email message id (only for Email type). Use this ID to send inbound replies to GHL to create a threaded email.",
            "example": "rnGyqh2F6uBrIkfhFo9A"
          },
          "messageId": {
            "type": "string",
            "description": "This is the main Message ID",
            "example": "t22c6DQcTDf3MjRhwf77"
          },
          "messageIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "When sending via the GMB channel, we will be returning list of `messageIds` instead of single `messageId`."
          },
          "msg": {
            "type": "string",
            "description": "Additional response message when sending a workflow message",
            "example": "Message queued successfully."
          }
        }
      },
      "CallDataDTO": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "Phone number of the receiver",
            "example": "+15037081210"
          },
          "from": {
            "type": "string",
            "description": "Phone number of the dialer",
            "example": "+15037081210"
          },
          "status": {
            "enum": [
              "pending",
              "completed",
              "answered",
              "busy",
              "no-answer",
              "failed",
              "canceled",
              "voicemail"
            ],
            "type": "string",
            "description": "Call status",
            "example": "completed"
          }
        }
      },
      "ProcessMessageBodyDto": {
        "required": [
          "type",
          "conversationId",
          "conversationProviderId"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "SMS",
              "Email",
              "WhatsApp",
              "GMB",
              "IG",
              "FB",
              "Custom",
              "WebChat",
              "Live_Chat",
              "Call"
            ],
            "type": "string",
            "description": "Message Type",
            "example": "SMS"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of attachments"
          },
          "message": {
            "type": "string",
            "description": "Message Body"
          },
          "conversationId": {
            "type": "string",
            "description": "Conversation Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "conversationProviderId": {
            "type": "string",
            "description": "Conversation Provider Id",
            "example": "61d6d1f9cdac7612faf80753"
          },
          "html": {
            "type": "string",
            "description": "HTML Body of Email"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the Email"
          },
          "emailFrom": {
            "type": "string",
            "description": "Email address to send from. This field is associated with the contact record and cannot be dynamically changed.",
            "example": "sender@company.com"
          },
          "emailTo": {
            "type": "string",
            "description": "Recipient email address. This field is associated with the contact record and cannot be dynamically changed."
          },
          "emailCc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of email address to CC",
            "example": [
              "john1@doe.com",
              "john2@doe.com"
            ]
          },
          "emailBcc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of email address to BCC",
            "example": [
              "john1@doe.com",
              "john2@doe.com"
            ]
          },
          "emailMessageId": {
            "type": "string",
            "description": "Send the email message id for which this email should be threaded. This is for replying to a specific email"
          },
          "altId": {
            "type": "string",
            "description": "external mail provider's message id",
            "example": "61d6d1f9cdac7612faf80753"
          },
          "direction": {
            "type": "object",
            "description": "Message direction, if required can be set manually, default is outbound",
            "default": "outbound",
            "example": [
              "outbound",
              "inbound"
            ]
          },
          "date": {
            "type": "string",
            "description": "Date of the inbound message",
            "format": "date-time"
          },
          "call": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CallDataDTO"
              }
            ],
            "description": "Phone call dialer and receiver information"
          }
        }
      },
      "ProcessMessageResponseDto": {
        "required": [
          "success",
          "conversationId",
          "messageId",
          "message"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "conversationId": {
            "type": "string",
            "description": "Conversation ID.",
            "example": "ABC12h2F6uBrIkfXYazb"
          },
          "messageId": {
            "type": "string",
            "description": "This is the main Message ID",
            "example": "t22c6DQcTDf3MjRhwf77"
          },
          "message": {
            "type": "string"
          },
          "contactId": {
            "type": "string"
          },
          "dateAdded": {
            "type": "string",
            "format": "date-time"
          },
          "emailMessageId": {
            "type": "string"
          }
        }
      },
      "ProcessOutboundMessageBodyDto": {
        "required": [
          "type",
          "conversationId",
          "conversationProviderId"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Call"
            ],
            "type": "string",
            "description": "Message Type",
            "example": "Call"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of attachments"
          },
          "conversationId": {
            "type": "string",
            "description": "Conversation Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "conversationProviderId": {
            "type": "string",
            "description": "Conversation Provider Id",
            "example": "61d6d1f9cdac7612faf80753"
          },
          "altId": {
            "type": "string",
            "description": "external mail provider's message id",
            "example": "61d6d1f9cdac7612faf80753"
          },
          "date": {
            "type": "string",
            "description": "Date of the outbound message",
            "format": "date-time"
          },
          "call": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CallDataDTO"
              }
            ],
            "description": "Phone call dialer and receiver information"
          }
        }
      },
      "UploadFilesDto": {
        "required": [
          "conversationId",
          "locationId",
          "attachmentUrls"
        ],
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "Conversation Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "locationId": {
            "type": "string"
          },
          "attachmentUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UploadFilesResponseDto": {
        "required": [
          "uploadedFiles"
        ],
        "type": "object",
        "properties": {
          "uploadedFiles": {
            "type": "object"
          }
        }
      },
      "UploadFilesErrorResponseDto": {
        "required": [
          "status",
          "message"
        ],
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              400,
              413,
              415
            ],
            "type": "number",
            "description": "HTTP Status code of the request",
            "example": 413
          },
          "message": {
            "type": "string",
            "description": "Error message of the request",
            "example": "Failed to upload the files"
          }
        }
      },
      "ErrorDto": {
        "required": [
          "code",
          "type",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error Code",
            "example": "1"
          },
          "type": {
            "type": "string",
            "description": "Error Type",
            "example": "saas"
          },
          "message": {
            "type": "string",
            "description": "Error Message",
            "example": "There was an error from the provider"
          }
        }
      },
      "UpdateMessageStatusDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "delivered",
              "failed",
              "pending",
              "read"
            ],
            "type": "string",
            "description": "Message status",
            "example": "read"
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorDto"
              }
            ],
            "description": "Error object from the conversation provider"
          },
          "emailMessageId": {
            "type": "string",
            "description": "Email message Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Email delivery status for additional email recipients."
          }
        }
      },
      "GetMessageTranscriptionResponseDto": {
        "required": [
          "mediaChannel",
          "sentenceIndex",
          "startTime",
          "endTime",
          "transcript",
          "confidence"
        ],
        "type": "object",
        "properties": {
          "mediaChannel": {
            "type": "number",
            "description": "Media channel describes the user interaction channel",
            "example": "1"
          },
          "sentenceIndex": {
            "type": "number",
            "description": "Index of the sentence in the transcription",
            "example": "1"
          },
          "startTime": {
            "type": "number",
            "description": "Start time of the sentence in milliseconds",
            "example": "34"
          },
          "endTime": {
            "type": "number",
            "description": "End time of the sentence in milliseconds",
            "example": "45"
          },
          "transcript": {
            "type": "string",
            "description": "Transcript of the sentence",
            "example": "This call may be recorded for quality assurance purposes."
          },
          "confidence": {
            "type": "number",
            "description": "Confidence of the transcription",
            "example": "0.5"
          }
        }
      },
      "UserTypingBody": {
        "required": [
          "locationId",
          "isTyping",
          "visitorId",
          "conversationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "isTyping": {
            "type": "string",
            "description": "Typing status",
            "example": true
          },
          "visitorId": {
            "type": "string",
            "description": "visitorId is the Unique ID assigned to each Live chat visitor. visitorId will be added soon in <a href=\"https://highlevel.stoplight.io/docs/integrations/00c5ff21f0030-get-contact\" target=\"_blank\">GET Contact API</a>",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "conversationId": {
            "type": "string",
            "description": "Conversation Id",
            "example": "ve9EPM428h8vShlRW1KT"
          }
        }
      },
      "CreateLiveChatMessageFeedbackResponse": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "visibility": {
        "enum": [
          "published",
          "draft"
        ],
        "type": "string"
      },
      "contentType": {
        "enum": [
          "video",
          "assignment",
          "quiz"
        ],
        "type": "string"
      },
      "type": {
        "enum": [
          "pdf",
          "image",
          "docx",
          "pptx",
          "xlsx",
          "html",
          "dotx",
          "epub",
          "webp",
          "gdoc",
          "mp3",
          "doc",
          "txt",
          "zip",
          "ppt",
          "key",
          "htm",
          "xls",
          "odp",
          "odt",
          "rtf",
          "m4a",
          "ods",
          "mp4",
          "ai",
          "avi",
          "mov",
          "wmv",
          "mkv",
          "wav",
          "flac",
          "ogg",
          "png",
          "jpeg",
          "jpg",
          "gif",
          "bmp",
          "tiff",
          "svg",
          "odg",
          "sxw",
          "sxc",
          "sxi",
          "rar",
          "7z",
          "json",
          "xml",
          "csv",
          "md",
          "obj",
          "stl",
          "woff",
          "ttf"
        ],
        "type": "string"
      },
      "PostMaterialInterface": {
        "required": [
          "title",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/type"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PostInterface": {
        "required": [
          "title",
          "visibility",
          "contentType",
          "description"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/visibility"
          },
          "thumbnailUrl": {
            "type": "string"
          },
          "contentType": {
            "$ref": "#/components/schemas/contentType"
          },
          "description": {
            "type": "string"
          },
          "bucketVideoUrl": {
            "type": "string"
          },
          "postMaterials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostMaterialInterface"
            }
          }
        }
      },
      "SubCategoryInterface": {
        "required": [
          "title",
          "visibility"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/visibility"
          },
          "thumbnailUrl": {
            "type": "string"
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostInterface"
            }
          }
        }
      },
      "CategoryInterface": {
        "required": [
          "title",
          "visibility"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/visibility"
          },
          "thumbnailUrl": {
            "type": "string"
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostInterface"
            }
          },
          "subCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubCategoryInterface"
            }
          }
        }
      },
      "InstructorDetails": {
        "required": [
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ProductInterface": {
        "required": [
          "title",
          "description",
          "categories"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryInterface"
            }
          },
          "instructorDetails": {
            "$ref": "#/components/schemas/InstructorDetails"
          }
        }
      },
      "PublicExporterPayload": {
        "required": [
          "locationId",
          "products"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductInterface"
            }
          }
        }
      },
      "PermissionsDto": {
        "type": "object",
        "properties": {
          "campaignsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "campaignsReadOnly": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "contactsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "workflowsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "workflowsReadOnly": {
            "type": "boolean",
            "default": false,
            "example": true
          },
          "triggersEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "funnelsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "websitesEnabled": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "opportunitiesEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "dashboardStatsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "bulkRequestsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "appointmentsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "reviewsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "onlineListingsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "phoneCallEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "conversationsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "assignedDataOnly": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "adwordsReportingEnabled": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "membershipEnabled": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "facebookAdsReportingEnabled": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "attributionsReportingEnabled": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "settingsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "tagsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "leadValueEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "marketingEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "agentReportingEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "botService": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "socialPlanner": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "bloggingEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "invoiceEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "affiliateManagerEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "contentAiEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "refundsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "recordPaymentEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "cancelSubscriptionEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "paymentsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "communitiesEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "exportPaymentsEnabled": {
            "type": "boolean",
            "default": true,
            "example": true
          }
        }
      },
      "RoleSchema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "account"
          },
          "role": {
            "type": "string",
            "example": "admin"
          },
          "locationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ve9EPM428h8vShlRW1KT"
            ]
          },
          "restrictSubAccount": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "UserSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0IHuJvc2ofPAAA8GzTRi"
          },
          "name": {
            "type": "string",
            "example": "John Deo"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Deo"
          },
          "email": {
            "type": "string",
            "example": "john@deo.com"
          },
          "phone": {
            "type": "string",
            "example": "+1 808-868-8888"
          },
          "extension": {
            "type": "string",
            "example": ""
          },
          "permissions": {
            "$ref": "#/components/schemas/PermissionsDto"
          },
          "scopes": {
            "enum": [
              "campaigns.readonly",
              "campaigns.write",
              "calendars.readonly",
              "calendars/events.write",
              "calendars/groups.write",
              "calendars.write",
              "contacts.write",
              "contacts/bulkActions.write",
              "workflows.readonly",
              "workflows.write",
              "triggers.write",
              "funnels.write",
              "forms.write",
              "surveys.write",
              "quizzes.write",
              "websites.write",
              "medias.write",
              "medias.readonly",
              "opportunities.write",
              "opportunities/leadValue.readonly",
              "opportunities/bulkActions.write",
              "reporting/phone.readonly",
              "reporting/adwords.readonly",
              "reporting/facebookAds.readonly",
              "reporting/attributions.readonly",
              "prospecting/auditReport.write",
              "reporting/reports.readonly",
              "reporting/agent.readonly",
              "reporting/reports.write",
              "payments.write",
              "payments/refunds.write",
              "payments/records.write",
              "payments/exports.write",
              "payments/subscriptionsCancel.write",
              "invoices.write",
              "invoices.readonly",
              "invoices/schedule.readonly",
              "invoices/schedule.write",
              "invoices/template.readonly",
              "invoices/template.write",
              "reputation/review.write",
              "reputation/listing.write",
              "reputation/reviewsAIAgents.write",
              "conversations.write",
              "conversations.readonly",
              "conversations/message.readonly",
              "conversations/message.write",
              "contentAI.write",
              "dashboard/stats.readonly",
              "locations/tags.write",
              "locations/tags.readonly",
              "marketing.write",
              "eliza.write",
              "settings.write",
              "socialplanner/post.write",
              "socialplanner/account.readonly",
              "socialplanner/account.write",
              "socialplanner/category.readonly",
              "socialplanner/category.write",
              "socialplanner/csv.readonly",
              "socialplanner/csv.write",
              "socialplanner/group.write",
              "socialplanner/hashtag.readonly",
              "socialplanner/hashtag.write",
              "socialplanner/oauth.readonly",
              "socialplanner/oauth.write",
              "socialplanner/post.readonly",
              "socialplanner/recurring.readonly",
              "socialplanner/recurring.write",
              "socialplanner/review.readonly",
              "socialplanner/review.write",
              "socialplanner/rss.readonly",
              "socialplanner/rss.write",
              "socialplanner/search.readonly",
              "socialplanner/setting.readonly",
              "socialplanner/setting.write",
              "socialplanner/stat.readonly",
              "socialplanner/tag.readonly",
              "socialplanner/tag.write",
              "socialplanner/filters.readonly",
              "socialplanner/medias.readonly",
              "socialplanner/medias.write",
              "socialplanner/watermarks.readonly",
              "socialplanner/watermarks.write",
              "socialplanner/metatag.readonly",
              "socialplanner/facebook.readonly",
              "socialplanner/linkedin.readonly",
              "socialplanner/twitter.readonly",
              "socialplanner/notification.readonly",
              "socialplanner/notification.write",
              "socialplanner/snapshot.readonly",
              "socialplanner/snapshot.write",
              "marketing/affiliate.write",
              "blogs.write",
              "membership.write",
              "communities.write",
              "gokollab.write",
              "certificates.write",
              "certificates.readonly",
              "adPublishing.write",
              "adPublishing.readonly",
              "prospecting.write",
              "prospecting.readonly",
              "prospecting/reports.readonly",
              "private-integration-location.readonly",
              "private-integration-location.write",
              "private-integration-company.readonly",
              "private-integration-company.write",
              "native-integrations.readonly",
              "native-integrations.write",
              "wordpress.write",
              "wordpress.read",
              "custom-menu-link.write",
              "qrcodes.write",
              "users/team-management.write",
              "users/team-management.readonly",
              "loginas.write",
              "snapshots/api.readonly",
              "snapshots/api.create",
              "snapshots/api.edit",
              "snapshots/api.push",
              "snapshots/api.refresh",
              "snapshots/api.share",
              "snapshots/api.delete",
              "internaltools.location-transfer.write",
              "internaltools.location-transfer.readonly",
              "affiliateportal.write",
              "affiliateportal.readonly",
              "companies.write",
              "internaltools.billing.write",
              "internaltools.billing.readonly",
              "internaltools.billing-common.readonly",
              "internaltools.billing-common.write",
              "voice-ai-agents.write",
              "voice-ai-agent-goals.readonly",
              "voice-ai-agent-goals.write",
              "voice-ai-dashboard.readonly",
              "agency/launchpad.write",
              "agency/launchpad.readonly",
              "launchpad.write",
              "launchpad.readonly",
              "text-ai-agents.write",
              "text-ai-agent-goals.readonly",
              "text-ai-agent-goals.write",
              "text-ai-agent-training.write"
            ],
            "type": "string"
          },
          "roles": {
            "$ref": "#/components/schemas/RoleSchema"
          },
          "deleted": {
            "type": "boolean",
            "example": false
          },
          "lcPhone": {
            "type": "object",
            "description": "LC Phone Inbound Phone Numbers",
            "example": {
              "locationId": "+1234556677"
            }
          }
        }
      },
      "SearchUserSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSchema"
            }
          },
          "count": {
            "type": "number",
            "example": 1231
          }
        }
      },
      "FilterByEmailDto": {
        "required": [
          "companyId",
          "emails"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Company ID to filter users",
            "example": "5DP41231LkQsiKESj6rh"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of email addresses to filter users",
            "example": [
              "user1@example.com",
              "user2@example.com"
            ]
          },
          "deleted": {
            "type": "boolean",
            "description": "Filter deleted users",
            "default": false,
            "example": false
          },
          "skip": {
            "type": "string",
            "description": "No of results to be skipped before returning the result",
            "default": "0",
            "example": "1"
          },
          "limit": {
            "type": "string",
            "description": "No of results to be limited before returning the result",
            "default": "25",
            "example": "10"
          },
          "projection": {
            "type": "string",
            "description": "Projection fields to return. Use \"all\" for all fields, or specify comma-separated field names. Default returns only id and email",
            "example": "all"
          }
        }
      },
      "LocationSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSchema"
            }
          }
        }
      },
      "UserSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0IHuJvc2ofPAAA8GzTRi"
          },
          "name": {
            "type": "string",
            "example": "John Deo"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Deo"
          },
          "email": {
            "type": "string",
            "example": "john@deo.com"
          },
          "phone": {
            "type": "string",
            "example": "+1 808-868-8888"
          },
          "extension": {
            "type": "string",
            "example": ""
          },
          "permissions": {
            "$ref": "#/components/schemas/PermissionsDto"
          },
          "scopes": {
            "enum": [
              "campaigns.readonly",
              "campaigns.write",
              "calendars.readonly",
              "calendars/events.write",
              "calendars/groups.write",
              "calendars.write",
              "contacts.write",
              "contacts/bulkActions.write",
              "workflows.readonly",
              "workflows.write",
              "triggers.write",
              "funnels.write",
              "forms.write",
              "surveys.write",
              "quizzes.write",
              "websites.write",
              "medias.write",
              "medias.readonly",
              "opportunities.write",
              "opportunities/leadValue.readonly",
              "opportunities/bulkActions.write",
              "reporting/phone.readonly",
              "reporting/adwords.readonly",
              "reporting/facebookAds.readonly",
              "reporting/attributions.readonly",
              "prospecting/auditReport.write",
              "reporting/reports.readonly",
              "reporting/agent.readonly",
              "reporting/reports.write",
              "payments.write",
              "payments/refunds.write",
              "payments/records.write",
              "payments/exports.write",
              "payments/subscriptionsCancel.write",
              "invoices.write",
              "invoices.readonly",
              "invoices/schedule.readonly",
              "invoices/schedule.write",
              "invoices/template.readonly",
              "invoices/template.write",
              "reputation/review.write",
              "reputation/listing.write",
              "reputation/reviewsAIAgents.write",
              "conversations.write",
              "conversations.readonly",
              "conversations/message.readonly",
              "conversations/message.write",
              "contentAI.write",
              "dashboard/stats.readonly",
              "locations/tags.write",
              "locations/tags.readonly",
              "marketing.write",
              "eliza.write",
              "settings.write",
              "socialplanner/post.write",
              "socialplanner/account.readonly",
              "socialplanner/account.write",
              "socialplanner/category.readonly",
              "socialplanner/category.write",
              "socialplanner/csv.readonly",
              "socialplanner/csv.write",
              "socialplanner/group.write",
              "socialplanner/hashtag.readonly",
              "socialplanner/hashtag.write",
              "socialplanner/oauth.readonly",
              "socialplanner/oauth.write",
              "socialplanner/post.readonly",
              "socialplanner/recurring.readonly",
              "socialplanner/recurring.write",
              "socialplanner/review.readonly",
              "socialplanner/review.write",
              "socialplanner/rss.readonly",
              "socialplanner/rss.write",
              "socialplanner/search.readonly",
              "socialplanner/setting.readonly",
              "socialplanner/setting.write",
              "socialplanner/stat.readonly",
              "socialplanner/tag.readonly",
              "socialplanner/tag.write",
              "socialplanner/filters.readonly",
              "socialplanner/medias.readonly",
              "socialplanner/medias.write",
              "socialplanner/watermarks.readonly",
              "socialplanner/watermarks.write",
              "socialplanner/metatag.readonly",
              "socialplanner/facebook.readonly",
              "socialplanner/linkedin.readonly",
              "socialplanner/twitter.readonly",
              "socialplanner/notification.readonly",
              "socialplanner/notification.write",
              "socialplanner/snapshot.readonly",
              "socialplanner/snapshot.write",
              "marketing/affiliate.write",
              "blogs.write",
              "membership.write",
              "communities.write",
              "gokollab.write",
              "certificates.write",
              "certificates.readonly",
              "adPublishing.write",
              "adPublishing.readonly",
              "prospecting.write",
              "prospecting.readonly",
              "prospecting/reports.readonly",
              "private-integration-location.readonly",
              "private-integration-location.write",
              "private-integration-company.readonly",
              "private-integration-company.write",
              "native-integrations.readonly",
              "native-integrations.write",
              "wordpress.write",
              "wordpress.read",
              "custom-menu-link.write",
              "qrcodes.write",
              "users/team-management.write",
              "users/team-management.readonly",
              "loginas.write",
              "snapshots/api.readonly",
              "snapshots/api.create",
              "snapshots/api.edit",
              "snapshots/api.push",
              "snapshots/api.refresh",
              "snapshots/api.share",
              "snapshots/api.delete",
              "internaltools.location-transfer.write",
              "internaltools.location-transfer.readonly",
              "affiliateportal.write",
              "affiliateportal.readonly",
              "companies.write",
              "internaltools.billing.write",
              "internaltools.billing.readonly",
              "internaltools.billing-common.readonly",
              "internaltools.billing-common.write",
              "voice-ai-agents.write",
              "voice-ai-agent-goals.readonly",
              "voice-ai-agent-goals.write",
              "voice-ai-dashboard.readonly",
              "agency/launchpad.write",
              "agency/launchpad.readonly",
              "launchpad.write",
              "launchpad.readonly",
              "text-ai-agents.write",
              "text-ai-agent-goals.readonly",
              "text-ai-agent-goals.write",
              "text-ai-agent-training.write"
            ],
            "type": "string"
          },
          "roles": {
            "$ref": "#/components/schemas/RoleSchema"
          },
          "lcPhone": {
            "type": "object",
            "description": "LC Phone Inbound Phone Numbers",
            "example": {
              "locationId": "+1234556677"
            }
          }
        }
      },
      "CreateUserDto": {
        "required": [
          "companyId",
          "firstName",
          "lastName",
          "email",
          "password",
          "type",
          "role",
          "locationIds"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "example": "ve9EPM428h8vShlRW1KT"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Deo"
          },
          "email": {
            "type": "string",
            "example": "john@deo.com"
          },
          "password": {
            "type": "string",
            "example": "*******"
          },
          "phone": {
            "type": "string",
            "example": "+18832327657"
          },
          "type": {
            "type": "string",
            "example": "account"
          },
          "role": {
            "type": "string",
            "example": "admin"
          },
          "locationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "C2QujeCh8ZnC7al2InWR"
            ]
          },
          "permissions": {
            "$ref": "#/components/schemas/PermissionsDto"
          },
          "scopes": {
            "type": "array",
            "items": {
              "enum": [
                "campaigns.readonly",
                "campaigns.write",
                "calendars.readonly",
                "calendars/events.write",
                "calendars/groups.write",
                "calendars.write",
                "contacts.write",
                "contacts/bulkActions.write",
                "workflows.readonly",
                "workflows.write",
                "triggers.write",
                "funnels.write",
                "forms.write",
                "surveys.write",
                "quizzes.write",
                "websites.write",
                "medias.write",
                "medias.readonly",
                "opportunities.write",
                "opportunities/leadValue.readonly",
                "opportunities/bulkActions.write",
                "reporting/phone.readonly",
                "reporting/adwords.readonly",
                "reporting/facebookAds.readonly",
                "reporting/attributions.readonly",
                "prospecting/auditReport.write",
                "reporting/reports.readonly",
                "reporting/agent.readonly",
                "reporting/reports.write",
                "payments.write",
                "payments/refunds.write",
                "payments/records.write",
                "payments/exports.write",
                "payments/subscriptionsCancel.write",
                "invoices.write",
                "invoices.readonly",
                "invoices/schedule.readonly",
                "invoices/schedule.write",
                "invoices/template.readonly",
                "invoices/template.write",
                "reputation/review.write",
                "reputation/listing.write",
                "reputation/reviewsAIAgents.write",
                "conversations.write",
                "conversations.readonly",
                "conversations/message.readonly",
                "conversations/message.write",
                "contentAI.write",
                "dashboard/stats.readonly",
                "locations/tags.write",
                "locations/tags.readonly",
                "marketing.write",
                "eliza.write",
                "settings.write",
                "socialplanner/post.write",
                "socialplanner/account.readonly",
                "socialplanner/account.write",
                "socialplanner/category.readonly",
                "socialplanner/category.write",
                "socialplanner/csv.readonly",
                "socialplanner/csv.write",
                "socialplanner/group.write",
                "socialplanner/hashtag.readonly",
                "socialplanner/hashtag.write",
                "socialplanner/oauth.readonly",
                "socialplanner/oauth.write",
                "socialplanner/post.readonly",
                "socialplanner/recurring.readonly",
                "socialplanner/recurring.write",
                "socialplanner/review.readonly",
                "socialplanner/review.write",
                "socialplanner/rss.readonly",
                "socialplanner/rss.write",
                "socialplanner/search.readonly",
                "socialplanner/setting.readonly",
                "socialplanner/setting.write",
                "socialplanner/stat.readonly",
                "socialplanner/tag.readonly",
                "socialplanner/tag.write",
                "socialplanner/filters.readonly",
                "socialplanner/medias.readonly",
                "socialplanner/medias.write",
                "socialplanner/watermarks.readonly",
                "socialplanner/watermarks.write",
                "socialplanner/metatag.readonly",
                "socialplanner/facebook.readonly",
                "socialplanner/linkedin.readonly",
                "socialplanner/twitter.readonly",
                "socialplanner/notification.readonly",
                "socialplanner/notification.write",
                "socialplanner/snapshot.readonly",
                "socialplanner/snapshot.write",
                "marketing/affiliate.write",
                "blogs.write",
                "membership.write",
                "communities.write",
                "gokollab.write",
                "certificates.write",
                "certificates.readonly",
                "adPublishing.write",
                "adPublishing.readonly",
                "prospecting.write",
                "prospecting.readonly",
                "prospecting/reports.readonly",
                "private-integration-location.readonly",
                "private-integration-location.write",
                "private-integration-company.readonly",
                "private-integration-company.write",
                "native-integrations.readonly",
                "native-integrations.write",
                "wordpress.write",
                "wordpress.read",
                "custom-menu-link.write",
                "qrcodes.write",
                "users/team-management.write",
                "users/team-management.readonly",
                "loginas.write",
                "snapshots/api.readonly",
                "snapshots/api.create",
                "snapshots/api.edit",
                "snapshots/api.push",
                "snapshots/api.refresh",
                "snapshots/api.share",
                "snapshots/api.delete",
                "internaltools.location-transfer.write",
                "internaltools.location-transfer.readonly",
                "affiliateportal.write",
                "affiliateportal.readonly",
                "companies.write",
                "internaltools.billing.write",
                "internaltools.billing.readonly",
                "internaltools.billing-common.readonly",
                "internaltools.billing-common.write",
                "voice-ai-agents.write",
                "voice-ai-agent-goals.readonly",
                "voice-ai-agent-goals.write",
                "voice-ai-dashboard.readonly",
                "agency/launchpad.write",
                "agency/launchpad.readonly",
                "launchpad.write",
                "launchpad.readonly",
                "text-ai-agents.write",
                "text-ai-agent-goals.readonly",
                "text-ai-agent-goals.write",
                "text-ai-agent-training.write"
              ],
              "type": "string"
            },
            "description": "Scopes allowed for users. Only scopes that have been passed will be enabled. Note:- If passed empty all the scopes will be get disabled",
            "example": [
              "contacts.write",
              "campaigns.readonly"
            ]
          },
          "scopesAssignedToOnly": {
            "type": "array",
            "items": {
              "enum": [
                "campaigns.readonly",
                "campaigns.write",
                "calendars.readonly",
                "calendars/events.write",
                "calendars/groups.write",
                "calendars.write",
                "contacts.write",
                "contacts/bulkActions.write",
                "workflows.readonly",
                "workflows.write",
                "triggers.write",
                "funnels.write",
                "forms.write",
                "surveys.write",
                "quizzes.write",
                "websites.write",
                "medias.write",
                "medias.readonly",
                "opportunities.write",
                "opportunities/leadValue.readonly",
                "opportunities/bulkActions.write",
                "reporting/phone.readonly",
                "reporting/adwords.readonly",
                "reporting/facebookAds.readonly",
                "reporting/attributions.readonly",
                "prospecting/auditReport.write",
                "reporting/reports.readonly",
                "reporting/agent.readonly",
                "reporting/reports.write",
                "payments.write",
                "payments/refunds.write",
                "payments/records.write",
                "payments/exports.write",
                "payments/subscriptionsCancel.write",
                "invoices.write",
                "invoices.readonly",
                "invoices/schedule.readonly",
                "invoices/schedule.write",
                "invoices/template.readonly",
                "invoices/template.write",
                "reputation/review.write",
                "reputation/listing.write",
                "reputation/reviewsAIAgents.write",
                "conversations.write",
                "conversations.readonly",
                "conversations/message.readonly",
                "conversations/message.write",
                "contentAI.write",
                "dashboard/stats.readonly",
                "locations/tags.write",
                "locations/tags.readonly",
                "marketing.write",
                "eliza.write",
                "settings.write",
                "socialplanner/post.write",
                "socialplanner/account.readonly",
                "socialplanner/account.write",
                "socialplanner/category.readonly",
                "socialplanner/category.write",
                "socialplanner/csv.readonly",
                "socialplanner/csv.write",
                "socialplanner/group.write",
                "socialplanner/hashtag.readonly",
                "socialplanner/hashtag.write",
                "socialplanner/oauth.readonly",
                "socialplanner/oauth.write",
                "socialplanner/post.readonly",
                "socialplanner/recurring.readonly",
                "socialplanner/recurring.write",
                "socialplanner/review.readonly",
                "socialplanner/review.write",
                "socialplanner/rss.readonly",
                "socialplanner/rss.write",
                "socialplanner/search.readonly",
                "socialplanner/setting.readonly",
                "socialplanner/setting.write",
                "socialplanner/stat.readonly",
                "socialplanner/tag.readonly",
                "socialplanner/tag.write",
                "socialplanner/filters.readonly",
                "socialplanner/medias.readonly",
                "socialplanner/medias.write",
                "socialplanner/watermarks.readonly",
                "socialplanner/watermarks.write",
                "socialplanner/metatag.readonly",
                "socialplanner/facebook.readonly",
                "socialplanner/linkedin.readonly",
                "socialplanner/twitter.readonly",
                "socialplanner/notification.readonly",
                "socialplanner/notification.write",
                "socialplanner/snapshot.readonly",
                "socialplanner/snapshot.write",
                "marketing/affiliate.write",
                "blogs.write",
                "membership.write",
                "communities.write",
                "gokollab.write",
                "certificates.write",
                "certificates.readonly",
                "adPublishing.write",
                "adPublishing.readonly",
                "prospecting.write",
                "prospecting.readonly",
                "prospecting/reports.readonly",
                "private-integration-location.readonly",
                "private-integration-location.write",
                "private-integration-company.readonly",
                "private-integration-company.write",
                "native-integrations.readonly",
                "native-integrations.write",
                "wordpress.write",
                "wordpress.read",
                "custom-menu-link.write",
                "qrcodes.write",
                "users/team-management.write",
                "users/team-management.readonly",
                "loginas.write",
                "snapshots/api.readonly",
                "snapshots/api.create",
                "snapshots/api.edit",
                "snapshots/api.push",
                "snapshots/api.refresh",
                "snapshots/api.share",
                "snapshots/api.delete",
                "internaltools.location-transfer.write",
                "internaltools.location-transfer.readonly",
                "affiliateportal.write",
                "affiliateportal.readonly",
                "companies.write",
                "internaltools.billing.write",
                "internaltools.billing.readonly",
                "internaltools.billing-common.readonly",
                "internaltools.billing-common.write",
                "voice-ai-agents.write",
                "voice-ai-agent-goals.readonly",
                "voice-ai-agent-goals.write",
                "voice-ai-dashboard.readonly",
                "agency/launchpad.write",
                "agency/launchpad.readonly",
                "launchpad.write",
                "launchpad.readonly",
                "text-ai-agents.write",
                "text-ai-agent-goals.readonly",
                "text-ai-agent-goals.write",
                "text-ai-agent-training.write"
              ],
              "type": "string"
            },
            "description": "Assigned Scopes allowed for users. Only scopes that have been passed will be enabled. If passed empty all the assigned scopes will be get disabled",
            "example": [
              "contacts.write",
              "campaigns.readonly"
            ]
          },
          "profilePhoto": {
            "type": "string",
            "example": "https://img.png"
          }
        }
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Deo"
          },
          "email": {
            "type": "string",
            "description": "Email update is no longer supported due to security reasons.",
            "example": "john@deo.com",
            "deprecated": true
          },
          "emailChangeOTP": {
            "type": "string",
            "description": "OTP to change the email ID of the user",
            "example": "191344"
          },
          "password": {
            "type": "string",
            "example": "*******"
          },
          "phone": {
            "type": "string",
            "example": "+18832327657"
          },
          "type": {
            "type": "string",
            "example": "account"
          },
          "role": {
            "type": "string",
            "example": "admin"
          },
          "companyId": {
            "type": "string",
            "description": "Company/Agency Id. Required for Agency Level access",
            "example": "UAXssdawIWAWD"
          },
          "locationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "C2QujeCh8ZnC7al2InWR"
            ]
          },
          "permissions": {
            "$ref": "#/components/schemas/PermissionsDto"
          },
          "scopes": {
            "type": "array",
            "items": {
              "enum": [
                "campaigns.readonly",
                "campaigns.write",
                "calendars.readonly",
                "calendars/events.write",
                "calendars/groups.write",
                "calendars.write",
                "contacts.write",
                "contacts/bulkActions.write",
                "workflows.readonly",
                "workflows.write",
                "triggers.write",
                "funnels.write",
                "forms.write",
                "surveys.write",
                "quizzes.write",
                "websites.write",
                "medias.write",
                "medias.readonly",
                "opportunities.write",
                "opportunities/leadValue.readonly",
                "opportunities/bulkActions.write",
                "reporting/phone.readonly",
                "reporting/adwords.readonly",
                "reporting/facebookAds.readonly",
                "reporting/attributions.readonly",
                "prospecting/auditReport.write",
                "reporting/reports.readonly",
                "reporting/agent.readonly",
                "reporting/reports.write",
                "payments.write",
                "payments/refunds.write",
                "payments/records.write",
                "payments/exports.write",
                "payments/subscriptionsCancel.write",
                "invoices.write",
                "invoices.readonly",
                "invoices/schedule.readonly",
                "invoices/schedule.write",
                "invoices/template.readonly",
                "invoices/template.write",
                "reputation/review.write",
                "reputation/listing.write",
                "reputation/reviewsAIAgents.write",
                "conversations.write",
                "conversations.readonly",
                "conversations/message.readonly",
                "conversations/message.write",
                "contentAI.write",
                "dashboard/stats.readonly",
                "locations/tags.write",
                "locations/tags.readonly",
                "marketing.write",
                "eliza.write",
                "settings.write",
                "socialplanner/post.write",
                "socialplanner/account.readonly",
                "socialplanner/account.write",
                "socialplanner/category.readonly",
                "socialplanner/category.write",
                "socialplanner/csv.readonly",
                "socialplanner/csv.write",
                "socialplanner/group.write",
                "socialplanner/hashtag.readonly",
                "socialplanner/hashtag.write",
                "socialplanner/oauth.readonly",
                "socialplanner/oauth.write",
                "socialplanner/post.readonly",
                "socialplanner/recurring.readonly",
                "socialplanner/recurring.write",
                "socialplanner/review.readonly",
                "socialplanner/review.write",
                "socialplanner/rss.readonly",
                "socialplanner/rss.write",
                "socialplanner/search.readonly",
                "socialplanner/setting.readonly",
                "socialplanner/setting.write",
                "socialplanner/stat.readonly",
                "socialplanner/tag.readonly",
                "socialplanner/tag.write",
                "socialplanner/filters.readonly",
                "socialplanner/medias.readonly",
                "socialplanner/medias.write",
                "socialplanner/watermarks.readonly",
                "socialplanner/watermarks.write",
                "socialplanner/metatag.readonly",
                "socialplanner/facebook.readonly",
                "socialplanner/linkedin.readonly",
                "socialplanner/twitter.readonly",
                "socialplanner/notification.readonly",
                "socialplanner/notification.write",
                "socialplanner/snapshot.readonly",
                "socialplanner/snapshot.write",
                "marketing/affiliate.write",
                "blogs.write",
                "membership.write",
                "communities.write",
                "gokollab.write",
                "certificates.write",
                "certificates.readonly",
                "adPublishing.write",
                "adPublishing.readonly",
                "prospecting.write",
                "prospecting.readonly",
                "prospecting/reports.readonly",
                "private-integration-location.readonly",
                "private-integration-location.write",
                "private-integration-company.readonly",
                "private-integration-company.write",
                "native-integrations.readonly",
                "native-integrations.write",
                "wordpress.write",
                "wordpress.read",
                "custom-menu-link.write",
                "qrcodes.write",
                "users/team-management.write",
                "users/team-management.readonly",
                "loginas.write",
                "snapshots/api.readonly",
                "snapshots/api.create",
                "snapshots/api.edit",
                "snapshots/api.push",
                "snapshots/api.refresh",
                "snapshots/api.share",
                "snapshots/api.delete",
                "internaltools.location-transfer.write",
                "internaltools.location-transfer.readonly",
                "affiliateportal.write",
                "affiliateportal.readonly",
                "companies.write",
                "internaltools.billing.write",
                "internaltools.billing.readonly",
                "internaltools.billing-common.readonly",
                "internaltools.billing-common.write",
                "voice-ai-agents.write",
                "voice-ai-agent-goals.readonly",
                "voice-ai-agent-goals.write",
                "voice-ai-dashboard.readonly",
                "agency/launchpad.write",
                "agency/launchpad.readonly",
                "launchpad.write",
                "launchpad.readonly",
                "text-ai-agents.write",
                "text-ai-agent-goals.readonly",
                "text-ai-agent-goals.write",
                "text-ai-agent-training.write"
              ],
              "type": "string"
            },
            "description": "Scopes allowed for users. Only scopes that have been passed will be enabled. If passed empty all the scopes will be get disabled",
            "example": [
              "contacts.write",
              "campaigns.readonly"
            ]
          },
          "scopesAssignedToOnly": {
            "type": "array",
            "items": {
              "enum": [
                "campaigns.readonly",
                "campaigns.write",
                "calendars.readonly",
                "calendars/events.write",
                "calendars/groups.write",
                "calendars.write",
                "contacts.write",
                "contacts/bulkActions.write",
                "workflows.readonly",
                "workflows.write",
                "triggers.write",
                "funnels.write",
                "forms.write",
                "surveys.write",
                "quizzes.write",
                "websites.write",
                "medias.write",
                "medias.readonly",
                "opportunities.write",
                "opportunities/leadValue.readonly",
                "opportunities/bulkActions.write",
                "reporting/phone.readonly",
                "reporting/adwords.readonly",
                "reporting/facebookAds.readonly",
                "reporting/attributions.readonly",
                "prospecting/auditReport.write",
                "reporting/reports.readonly",
                "reporting/agent.readonly",
                "reporting/reports.write",
                "payments.write",
                "payments/refunds.write",
                "payments/records.write",
                "payments/exports.write",
                "payments/subscriptionsCancel.write",
                "invoices.write",
                "invoices.readonly",
                "invoices/schedule.readonly",
                "invoices/schedule.write",
                "invoices/template.readonly",
                "invoices/template.write",
                "reputation/review.write",
                "reputation/listing.write",
                "reputation/reviewsAIAgents.write",
                "conversations.write",
                "conversations.readonly",
                "conversations/message.readonly",
                "conversations/message.write",
                "contentAI.write",
                "dashboard/stats.readonly",
                "locations/tags.write",
                "locations/tags.readonly",
                "marketing.write",
                "eliza.write",
                "settings.write",
                "socialplanner/post.write",
                "socialplanner/account.readonly",
                "socialplanner/account.write",
                "socialplanner/category.readonly",
                "socialplanner/category.write",
                "socialplanner/csv.readonly",
                "socialplanner/csv.write",
                "socialplanner/group.write",
                "socialplanner/hashtag.readonly",
                "socialplanner/hashtag.write",
                "socialplanner/oauth.readonly",
                "socialplanner/oauth.write",
                "socialplanner/post.readonly",
                "socialplanner/recurring.readonly",
                "socialplanner/recurring.write",
                "socialplanner/review.readonly",
                "socialplanner/review.write",
                "socialplanner/rss.readonly",
                "socialplanner/rss.write",
                "socialplanner/search.readonly",
                "socialplanner/setting.readonly",
                "socialplanner/setting.write",
                "socialplanner/stat.readonly",
                "socialplanner/tag.readonly",
                "socialplanner/tag.write",
                "socialplanner/filters.readonly",
                "socialplanner/medias.readonly",
                "socialplanner/medias.write",
                "socialplanner/watermarks.readonly",
                "socialplanner/watermarks.write",
                "socialplanner/metatag.readonly",
                "socialplanner/facebook.readonly",
                "socialplanner/linkedin.readonly",
                "socialplanner/twitter.readonly",
                "socialplanner/notification.readonly",
                "socialplanner/notification.write",
                "socialplanner/snapshot.readonly",
                "socialplanner/snapshot.write",
                "marketing/affiliate.write",
                "blogs.write",
                "membership.write",
                "communities.write",
                "gokollab.write",
                "certificates.write",
                "certificates.readonly",
                "adPublishing.write",
                "adPublishing.readonly",
                "prospecting.write",
                "prospecting.readonly",
                "prospecting/reports.readonly",
                "private-integration-location.readonly",
                "private-integration-location.write",
                "private-integration-company.readonly",
                "private-integration-company.write",
                "native-integrations.readonly",
                "native-integrations.write",
                "wordpress.write",
                "wordpress.read",
                "custom-menu-link.write",
                "qrcodes.write",
                "users/team-management.write",
                "users/team-management.readonly",
                "loginas.write",
                "snapshots/api.readonly",
                "snapshots/api.create",
                "snapshots/api.edit",
                "snapshots/api.push",
                "snapshots/api.refresh",
                "snapshots/api.share",
                "snapshots/api.delete",
                "internaltools.location-transfer.write",
                "internaltools.location-transfer.readonly",
                "affiliateportal.write",
                "affiliateportal.readonly",
                "companies.write",
                "internaltools.billing.write",
                "internaltools.billing.readonly",
                "internaltools.billing-common.readonly",
                "internaltools.billing-common.write",
                "voice-ai-agents.write",
                "voice-ai-agent-goals.readonly",
                "voice-ai-agent-goals.write",
                "voice-ai-dashboard.readonly",
                "agency/launchpad.write",
                "agency/launchpad.readonly",
                "launchpad.write",
                "launchpad.readonly",
                "text-ai-agents.write",
                "text-ai-agent-goals.readonly",
                "text-ai-agent-goals.write",
                "text-ai-agent-training.write"
              ],
              "type": "string"
            },
            "description": "Assigned Scopes allowed for users. Only scopes that have been passed will be enabled. If passed empty all the assigned scopes will be get disabled",
            "example": [
              "contacts.write",
              "campaigns.readonly"
            ]
          },
          "profilePhoto": {
            "type": "string",
            "example": "https://img.png"
          }
        }
      },
      "DeleteUserSuccessfulResponseDto": {
        "type": "object",
        "properties": {
          "succeded": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Queued deleting user with e-mail john@deo.com and name John Deo. Will take effect in a few minutes."
          }
        }
      },
      "common_schemas_BadRequestDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Bad Request"
          }
        }
      },
      "common_schemas_UnauthorizedDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Invalid token: access token is invalid"
          },
          "error": {
            "type": "string",
            "example": "Unauthorized"
          }
        }
      },
      "UnprocessableDTO": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 422
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Unprocessable Entity"
            ]
          },
          "error": {
            "type": "string",
            "example": "Unprocessable Entity"
          }
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "companies_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "companies_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "companies_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "oauth_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "oauth_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "oauth_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "oauth_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "social_media_posting_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "social_media_posting_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "social_media_posting_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "calendars_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "calendars_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "calendars_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "calendars_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "links_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "links_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "links_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "links_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "saas_api_bearer": {
        "type": "http",
        "description": "Use the Access Token generated by exchanging API Key for token id",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "saas_api_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Location",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "saas_api_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Company",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "email_isv_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "email_isv_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "email_isv_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "contacts_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "contacts_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "contacts_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "contacts_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "Agency-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "payments_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "payments_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "payments_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "payments_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "payments_Agency-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "blogs_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "blogs_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "blogs_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "voice_ai_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "voice_ai_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "voice_ai_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "voice_ai_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "voice_ai_Agency-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "locations_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "locations_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "locations_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "locations_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "proposals_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "proposals_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "proposals_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "proposals_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "custom_menus_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "custom_menus_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "custom_menus_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "custom_menus_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "associations_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "associations_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "associations_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "associations_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "forms_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "forms_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "forms_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "invoices_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "invoices_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "invoices_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "invoices_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "surveys_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "surveys_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "surveys_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "custom_fields_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "custom_fields_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "custom_fields_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "custom_fields_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "objects_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "objects_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "objects_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "objects_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "opportunities_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "opportunities_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "opportunities_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "opportunities_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "products_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "products_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "products_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "products_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "products_Agency-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "snapshots_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Location (OR) Personal Integration Token from Location.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "snapshots_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Location (OR) Personal Integration Token from Location.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "snapshots_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Personal Integration Token from Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "campaigns_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "campaigns_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "campaigns_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "campaigns_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "businesses_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "businesses_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "businesses_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "businesses_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "workflows_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "workflows_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "workflows_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "workflows_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "agencies_bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "emails_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "emails_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "emails_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "emails_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "phone_system_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "phone_system_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "phone_system_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "phone_system_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "funnels_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "funnels_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "funnels_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "medias_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "medias_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "medias_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "medias_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "marketplace_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "marketplace_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "marketplace_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "marketplace_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "marketplace_Agency-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "conversations_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "conversations_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "conversations_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "conversations_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "courses_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "courses_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "courses_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "users_bearer": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "users_Location-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "users_Location-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Sub-Account.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "users_Agency-Access": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "users_Agency-Access-Only": {
        "type": "http",
        "description": "Use the Access Token generated with user type as Agency.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}