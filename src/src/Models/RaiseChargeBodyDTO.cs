// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RaiseChargeBodyDTO : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>App ID of the App</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId { get; set; }
#nullable restore
#else
        public string AppId { get; set; }
#endif
        /// <summary>ID of the Agency the Sub-account belongs to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyId { get; set; }
#nullable restore
#else
        public string CompanyId { get; set; }
#endif
        /// <summary>Description of the charge</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Event ID / Transaction ID on your server&apos;s side. This will help you maintain the reference of the event/transaction on your end that you charged the customer for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventId { get; set; }
#nullable restore
#else
        public string EventId { get; set; }
#endif
        /// <summary>The timestamp when the event/transaction was performed. If blank, the billing timestamp will be set as the event time. ISO8601 Format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventTime { get; set; }
#nullable restore
#else
        public string EventTime { get; set; }
#endif
        /// <summary>ID of the Sub-Account to be charged</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationId { get; set; }
#nullable restore
#else
        public string LocationId { get; set; }
#endif
        /// <summary>Billing Meter ID (you can find this on your app&apos;s pricing page)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MeterId { get; set; }
#nullable restore
#else
        public string MeterId { get; set; }
#endif
        /// <summary>Price per unit to charge</summary>
        public double? Price { get; set; }
        /// <summary>Number of units to charge</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Units { get; set; }
#nullable restore
#else
        public string Units { get; set; }
#endif
        /// <summary>User ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.RaiseChargeBodyDTO"/> and sets the default values.
        /// </summary>
        public RaiseChargeBodyDTO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.RaiseChargeBodyDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.RaiseChargeBodyDTO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.RaiseChargeBodyDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "appId", n => { AppId = n.GetStringValue(); } },
                { "companyId", n => { CompanyId = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "eventId", n => { EventId = n.GetStringValue(); } },
                { "eventTime", n => { EventTime = n.GetStringValue(); } },
                { "locationId", n => { LocationId = n.GetStringValue(); } },
                { "meterId", n => { MeterId = n.GetStringValue(); } },
                { "price", n => { Price = n.GetDoubleValue(); } },
                { "units", n => { Units = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("appId", AppId);
            writer.WriteStringValue("companyId", CompanyId);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("eventId", EventId);
            writer.WriteStringValue("eventTime", EventTime);
            writer.WriteStringValue("locationId", LocationId);
            writer.WriteStringValue("meterId", MeterId);
            writer.WriteDoubleValue("price", Price);
            writer.WriteStringValue("units", Units);
            writer.WriteStringValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
