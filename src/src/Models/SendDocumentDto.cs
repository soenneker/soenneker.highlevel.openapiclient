// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SendDocumentDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>CC Recipient</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.CCRecipientItem>? CcRecipients { get; set; }
#nullable restore
#else
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.CCRecipientItem> CcRecipients { get; set; }
#endif
        /// <summary>Document Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentId { get; set; }
#nullable restore
#else
        public string DocumentId { get; set; }
#endif
        /// <summary>Document Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentName { get; set; }
#nullable restore
#else
        public string DocumentName { get; set; }
#endif
        /// <summary>Location Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationId { get; set; }
#nullable restore
#else
        public string LocationId { get; set; }
#endif
        /// <summary>Medium to be used for sending the document</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto_medium? Medium { get; set; }
        /// <summary>The notificationSettings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto_notificationSettings? NotificationSettings { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto_notificationSettings NotificationSettings { get; set; }
#endif
        /// <summary>Sent ByUser Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SentBy { get; set; }
#nullable restore
#else
        public string SentBy { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto"/> and sets the default values.
        /// </summary>
        public SendDocumentDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ccRecipients", n => { CcRecipients = n.GetCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.CCRecipientItem>(global::Soenneker.HighLevel.OpenApiClient.Models.CCRecipientItem.CreateFromDiscriminatorValue)?.AsList(); } },
                { "documentId", n => { DocumentId = n.GetStringValue(); } },
                { "documentName", n => { DocumentName = n.GetStringValue(); } },
                { "locationId", n => { LocationId = n.GetStringValue(); } },
                { "medium", n => { Medium = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto_medium>(); } },
                { "notificationSettings", n => { NotificationSettings = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto_notificationSettings>(global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto_notificationSettings.CreateFromDiscriminatorValue); } },
                { "sentBy", n => { SentBy = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.CCRecipientItem>("ccRecipients", CcRecipients);
            writer.WriteStringValue("documentId", DocumentId);
            writer.WriteStringValue("documentName", DocumentName);
            writer.WriteStringValue("locationId", LocationId);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto_medium>("medium", Medium);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendDocumentDto_notificationSettings>("notificationSettings", NotificationSettings);
            writer.WriteStringValue("sentBy", SentBy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
