// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InstallerDetailsDTO : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Company email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyEmail { get; set; }
#nullable restore
#else
        public string CompanyEmail { get; set; }
#endif
        /// <summary>Company plan</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyHighLevelPlan { get; set; }
#nullable restore
#else
        public string CompanyHighLevelPlan { get; set; }
#endif
        /// <summary>Company ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyId { get; set; }
#nullable restore
#else
        public string CompanyId { get; set; }
#endif
        /// <summary>Company name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>Company owner full name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyOwnerFullName { get; set; }
#nullable restore
#else
        public string CompanyOwnerFullName { get; set; }
#endif
        /// <summary>Whether the company is a whitelabel company</summary>
        public bool? IsWhitelabelCompany { get; set; }
        /// <summary>Location ID (if applicable)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationId { get; set; }
#nullable restore
#else
        public string LocationId { get; set; }
#endif
        /// <summary>Marketplace app plan ID for paid apps</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MarketplaceAppPlanId { get; set; }
#nullable restore
#else
        public string MarketplaceAppPlanId { get; set; }
#endif
        /// <summary>User ID who installed the app</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>Whitelabel details (only present if isWhitelabelCompany is true)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.InstallerDetailsDTO_whitelabelDetails? WhitelabelDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.InstallerDetailsDTO_whitelabelDetails WhitelabelDetails { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.InstallerDetailsDTO"/> and sets the default values.
        /// </summary>
        public InstallerDetailsDTO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.InstallerDetailsDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.InstallerDetailsDTO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.InstallerDetailsDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "companyEmail", n => { CompanyEmail = n.GetStringValue(); } },
                { "companyHighLevelPlan", n => { CompanyHighLevelPlan = n.GetStringValue(); } },
                { "companyId", n => { CompanyId = n.GetStringValue(); } },
                { "companyName", n => { CompanyName = n.GetStringValue(); } },
                { "companyOwnerFullName", n => { CompanyOwnerFullName = n.GetStringValue(); } },
                { "isWhitelabelCompany", n => { IsWhitelabelCompany = n.GetBoolValue(); } },
                { "locationId", n => { LocationId = n.GetStringValue(); } },
                { "marketplaceAppPlanId", n => { MarketplaceAppPlanId = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "whitelabelDetails", n => { WhitelabelDetails = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.InstallerDetailsDTO_whitelabelDetails>(global::Soenneker.HighLevel.OpenApiClient.Models.InstallerDetailsDTO_whitelabelDetails.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("companyEmail", CompanyEmail);
            writer.WriteStringValue("companyHighLevelPlan", CompanyHighLevelPlan);
            writer.WriteStringValue("companyId", CompanyId);
            writer.WriteStringValue("companyName", CompanyName);
            writer.WriteStringValue("companyOwnerFullName", CompanyOwnerFullName);
            writer.WriteBoolValue("isWhitelabelCompany", IsWhitelabelCompany);
            writer.WriteStringValue("locationId", LocationId);
            writer.WriteStringValue("marketplaceAppPlanId", MarketplaceAppPlanId);
            writer.WriteStringValue("userId", UserId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.InstallerDetailsDTO_whitelabelDetails>("whitelabelDetails", WhitelabelDetails);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
