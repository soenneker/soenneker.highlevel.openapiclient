// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UpdateCustomMenuDTO : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether to allow camera access (only for iframe mode)</summary>
        public bool? AllowCamera { get; set; }
        /// <summary>Whether to allow microphone access (only for iframe mode)</summary>
        public bool? AllowMicrophone { get; set; }
        /// <summary>Icon information for the custom menu</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_icon? Icon { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_icon Icon { get; set; }
#endif
        /// <summary>List of sub-account IDs where the menu should be shown. This list is applicable only when showOnLocation is true and showToAllLocations is false</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Locations { get; set; }
#nullable restore
#else
        public List<string> Locations { get; set; }
#endif
        /// <summary>Mode for opening the menu link</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_openMode? OpenMode { get; set; }
        /// <summary>Whether the menu must be displayed on the agency&apos;s level</summary>
        public bool? ShowOnCompany { get; set; }
        /// <summary>Whether the menu must be displayed for sub-accounts level</summary>
        public bool? ShowOnLocation { get; set; }
        /// <summary>Whether the menu must be displayed to all sub-accounts</summary>
        public bool? ShowToAllLocations { get; set; }
        /// <summary>Title of the custom menu</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>URL of the custom menu</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>Which user-roles should the menu be accessible to?</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_userRole? UserRole { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO"/> and sets the default values.
        /// </summary>
        public UpdateCustomMenuDTO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowCamera", n => { AllowCamera = n.GetBoolValue(); } },
                { "allowMicrophone", n => { AllowMicrophone = n.GetBoolValue(); } },
                { "icon", n => { Icon = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_icon>(global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_icon.CreateFromDiscriminatorValue); } },
                { "locations", n => { Locations = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "openMode", n => { OpenMode = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_openMode>(); } },
                { "showOnCompany", n => { ShowOnCompany = n.GetBoolValue(); } },
                { "showOnLocation", n => { ShowOnLocation = n.GetBoolValue(); } },
                { "showToAllLocations", n => { ShowToAllLocations = n.GetBoolValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "userRole", n => { UserRole = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_userRole>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowCamera", AllowCamera);
            writer.WriteBoolValue("allowMicrophone", AllowMicrophone);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_icon>("icon", Icon);
            writer.WriteCollectionOfPrimitiveValues<string>("locations", Locations);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_openMode>("openMode", OpenMode);
            writer.WriteBoolValue("showOnCompany", ShowOnCompany);
            writer.WriteBoolValue("showOnLocation", ShowOnLocation);
            writer.WriteBoolValue("showToAllLocations", ShowToAllLocations);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("url", Url);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCustomMenuDTO_userRole>("userRole", UserRole);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
