// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GetAccessCodeSuccessfulResponseDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The access_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessToken { get; set; }
#nullable restore
#else
        public string AccessToken { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Approved locations to generate location access token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ApprovedLocations { get; set; }
#nullable restore
#else
        public List<string> ApprovedLocations { get; set; }
#endif
        /// <summary>Company ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyId { get; set; }
#nullable restore
#else
        public string CompanyId { get; set; }
#endif
        /// <summary>The expires_in property</summary>
        public double? ExpiresIn { get; set; }
        /// <summary>The isBulkInstallation property</summary>
        public bool? IsBulkInstallation { get; set; }
        /// <summary>Location ID - Present only for Sub-Account Access Token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationId { get; set; }
#nullable restore
#else
        public string LocationId { get; set; }
#endif
        /// <summary>Plan Id of the subscribed plan in paid apps.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlanId { get; set; }
#nullable restore
#else
        public string PlanId { get; set; }
#endif
        /// <summary>The refresh_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RefreshToken { get; set; }
#nullable restore
#else
        public string RefreshToken { get; set; }
#endif
        /// <summary>The scope property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Scope { get; set; }
#nullable restore
#else
        public string Scope { get; set; }
#endif
        /// <summary>The token_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TokenType { get; set; }
#nullable restore
#else
        public string TokenType { get; set; }
#endif
        /// <summary>USER ID - Represent user id of person who performed installation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>The userType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserType { get; set; }
#nullable restore
#else
        public string UserType { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.GetAccessCodeSuccessfulResponseDto"/> and sets the default values.
        /// </summary>
        public GetAccessCodeSuccessfulResponseDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.GetAccessCodeSuccessfulResponseDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.GetAccessCodeSuccessfulResponseDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.GetAccessCodeSuccessfulResponseDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "access_token", n => { AccessToken = n.GetStringValue(); } },
                { "approvedLocations", n => { ApprovedLocations = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "companyId", n => { CompanyId = n.GetStringValue(); } },
                { "expires_in", n => { ExpiresIn = n.GetDoubleValue(); } },
                { "isBulkInstallation", n => { IsBulkInstallation = n.GetBoolValue(); } },
                { "locationId", n => { LocationId = n.GetStringValue(); } },
                { "planId", n => { PlanId = n.GetStringValue(); } },
                { "refresh_token", n => { RefreshToken = n.GetStringValue(); } },
                { "scope", n => { Scope = n.GetStringValue(); } },
                { "token_type", n => { TokenType = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userType", n => { UserType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("access_token", AccessToken);
            writer.WriteCollectionOfPrimitiveValues<string>("approvedLocations", ApprovedLocations);
            writer.WriteStringValue("companyId", CompanyId);
            writer.WriteDoubleValue("expires_in", ExpiresIn);
            writer.WriteBoolValue("isBulkInstallation", IsBulkInstallation);
            writer.WriteStringValue("locationId", LocationId);
            writer.WriteStringValue("planId", PlanId);
            writer.WriteStringValue("refresh_token", RefreshToken);
            writer.WriteStringValue("scope", Scope);
            writer.WriteStringValue("token_type", TokenType);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userType", UserType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
