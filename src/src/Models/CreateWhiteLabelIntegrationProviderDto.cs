// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CreateWhiteLabelIntegrationProviderDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>location Id / company Id based on altType</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltId { get; set; }
#nullable restore
#else
        public string AltId { get; set; }
#endif
        /// <summary>Alt Type</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto_altType? AltType { get; set; }
        /// <summary>A brief description providing additional information about the integration provider.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The URL to an image representing the integration provider. The imageUrl should start with &quot;https://&quot; and ensure that this URL is publicly accessible.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; set; }
#nullable restore
#else
        public string ImageUrl { get; set; }
#endif
        /// <summary>The type of payment provider associated with the integration provider.</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto_provider? Provider { get; set; }
        /// <summary>The title or name of the integration provider.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>A unique name given to the integration provider, uniqueName must start and end with a character. Only lowercase characters and hyphens (-) are supported</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueName { get; set; }
#nullable restore
#else
        public string UniqueName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto"/> and sets the default values.
        /// </summary>
        public CreateWhiteLabelIntegrationProviderDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altId", n => { AltId = n.GetStringValue(); } },
                { "altType", n => { AltType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto_altType>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                { "provider", n => { Provider = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto_provider>(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "uniqueName", n => { UniqueName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("altId", AltId);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto_altType>("altType", AltType);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("imageUrl", ImageUrl);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CreateWhiteLabelIntegrationProviderDto_provider>("provider", Provider);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("uniqueName", UniqueName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
