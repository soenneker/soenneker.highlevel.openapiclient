// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class FilterByEmailDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Company ID to filter users</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyId { get; set; }
#nullable restore
#else
        public string CompanyId { get; set; }
#endif
        /// <summary>Filter deleted users</summary>
        public bool? Deleted { get; set; }
        /// <summary>Array of email addresses to filter users</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Emails { get; set; }
#nullable restore
#else
        public List<string> Emails { get; set; }
#endif
        /// <summary>No of results to be limited before returning the result</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Limit { get; set; }
#nullable restore
#else
        public string Limit { get; set; }
#endif
        /// <summary>Projection fields to return. Use &quot;all&quot; for all fields, or specify comma-separated field names. Default returns only id and email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Projection { get; set; }
#nullable restore
#else
        public string Projection { get; set; }
#endif
        /// <summary>No of results to be skipped before returning the result</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Skip { get; set; }
#nullable restore
#else
        public string Skip { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.FilterByEmailDto"/> and sets the default values.
        /// </summary>
        public FilterByEmailDto()
        {
            AdditionalData = new Dictionary<string, object>();
            Limit = "25";
            Skip = "0";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.FilterByEmailDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.FilterByEmailDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.FilterByEmailDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "companyId", n => { CompanyId = n.GetStringValue(); } },
                { "deleted", n => { Deleted = n.GetBoolValue(); } },
                { "emails", n => { Emails = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "limit", n => { Limit = n.GetStringValue(); } },
                { "projection", n => { Projection = n.GetStringValue(); } },
                { "skip", n => { Skip = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("companyId", CompanyId);
            writer.WriteBoolValue("deleted", Deleted);
            writer.WriteCollectionOfPrimitiveValues<string>("emails", Emails);
            writer.WriteStringValue("limit", Limit);
            writer.WriteStringValue("projection", Projection);
            writer.WriteStringValue("skip", Skip);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
