// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GetTxnResponseSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>AltId is the unique identifier eg: location id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltId { get; set; }
#nullable restore
#else
        public string AltId { get; set; }
#endif
        /// <summary>AltType is the type of identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltType { get; set; }
#nullable restore
#else
        public string AltType { get; set; }
#endif
        /// <summary>Transaction value.</summary>
        public double? Amount { get; set; }
        /// <summary>Transaction amount refunded.</summary>
        public double? AmountRefunded { get; set; }
        /// <summary>Charge id for transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChargeId { get; set; }
#nullable restore
#else
        public string ChargeId { get; set; }
#endif
        /// <summary>Charge snapshot of transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_chargeSnapshot? ChargeSnapshot { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_chargeSnapshot ChargeSnapshot { get; set; }
#endif
        /// <summary>Contact id corresponding to the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactId { get; set; }
#nullable restore
#else
        public string ContactId { get; set; }
#endif
        /// <summary>Contact details of the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_contactSnapshot? ContactSnapshot { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_contactSnapshot ContactSnapshot { get; set; }
#endif
        /// <summary>The creation timestamp of the transaction.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Currency in which transaction was made.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Entity id for the transaction. e.g: order id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityId { get; set; }
#nullable restore
#else
        public string EntityId { get; set; }
#endif
        /// <summary>Entity source details for the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_entitySource? EntitySource { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_entitySource EntitySource { get; set; }
#endif
        /// <summary>Entity type of transaction (eg: order).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityType { get; set; }
#nullable restore
#else
        public string EntityType { get; set; }
#endif
        /// <summary>The unique identifier for the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Invoice id for the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceId { get; set; }
#nullable restore
#else
        public string InvoiceId { get; set; }
#endif
        /// <summary>Ip address from where transaction was initiated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>Is parent transaction.</summary>
        public bool? IsParent { get; set; }
        /// <summary>Transaction is in live / test mode.</summary>
        public bool? LiveMode { get; set; }
        /// <summary>Is test transaction.</summary>
        public bool? MarkAsTest { get; set; }
        /// <summary>ID of the contact that was merged from.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MergedFromContactId { get; set; }
#nullable restore
#else
        public string MergedFromContactId { get; set; }
#endif
        /// <summary>Meta details of the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_meta? Meta { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_meta Meta { get; set; }
#endif
        /// <summary>Payment provider details of the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_paymentProvider? PaymentProvider { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_paymentProvider PaymentProvider { get; set; }
#endif
        /// <summary>Qbo details of the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_qboResponse? QboResponse { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_qboResponse QboResponse { get; set; }
#endif
        /// <summary>Is transaction qbo synced.</summary>
        public bool? QboSynced { get; set; }
        /// <summary>Receipt id for transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceiptId { get; set; }
#nullable restore
#else
        public string ReceiptId { get; set; }
#endif
        /// <summary>Transaction status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_status? Status { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_status Status { get; set; }
#endif
        /// <summary>Subscription id for transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionId { get; set; }
#nullable restore
#else
        public string SubscriptionId { get; set; }
#endif
        /// <summary>Trace id of the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TraceId { get; set; }
#nullable restore
#else
        public string TraceId { get; set; }
#endif
        /// <summary>The last update timestamp of the transaction.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema"/> and sets the default values.
        /// </summary>
        public GetTxnResponseSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altId", n => { AltId = n.GetStringValue(); } },
                { "altType", n => { AltType = n.GetStringValue(); } },
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "amountRefunded", n => { AmountRefunded = n.GetDoubleValue(); } },
                { "chargeId", n => { ChargeId = n.GetStringValue(); } },
                { "chargeSnapshot", n => { ChargeSnapshot = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_chargeSnapshot>(global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_chargeSnapshot.CreateFromDiscriminatorValue); } },
                { "contactId", n => { ContactId = n.GetStringValue(); } },
                { "contactSnapshot", n => { ContactSnapshot = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_contactSnapshot>(global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_contactSnapshot.CreateFromDiscriminatorValue); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "entityId", n => { EntityId = n.GetStringValue(); } },
                { "entitySource", n => { EntitySource = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_entitySource>(global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_entitySource.CreateFromDiscriminatorValue); } },
                { "entityType", n => { EntityType = n.GetStringValue(); } },
                { "_id", n => { Id = n.GetStringValue(); } },
                { "invoiceId", n => { InvoiceId = n.GetStringValue(); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "isParent", n => { IsParent = n.GetBoolValue(); } },
                { "liveMode", n => { LiveMode = n.GetBoolValue(); } },
                { "markAsTest", n => { MarkAsTest = n.GetBoolValue(); } },
                { "mergedFromContactId", n => { MergedFromContactId = n.GetStringValue(); } },
                { "meta", n => { Meta = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_meta>(global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_meta.CreateFromDiscriminatorValue); } },
                { "paymentProvider", n => { PaymentProvider = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_paymentProvider>(global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_paymentProvider.CreateFromDiscriminatorValue); } },
                { "qboResponse", n => { QboResponse = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_qboResponse>(global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_qboResponse.CreateFromDiscriminatorValue); } },
                { "qboSynced", n => { QboSynced = n.GetBoolValue(); } },
                { "receiptId", n => { ReceiptId = n.GetStringValue(); } },
                { "status", n => { Status = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_status>(global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_status.CreateFromDiscriminatorValue); } },
                { "subscriptionId", n => { SubscriptionId = n.GetStringValue(); } },
                { "traceId", n => { TraceId = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("altId", AltId);
            writer.WriteStringValue("altType", AltType);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteDoubleValue("amountRefunded", AmountRefunded);
            writer.WriteStringValue("chargeId", ChargeId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_chargeSnapshot>("chargeSnapshot", ChargeSnapshot);
            writer.WriteStringValue("contactId", ContactId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_contactSnapshot>("contactSnapshot", ContactSnapshot);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("entityId", EntityId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_entitySource>("entitySource", EntitySource);
            writer.WriteStringValue("entityType", EntityType);
            writer.WriteStringValue("_id", Id);
            writer.WriteStringValue("invoiceId", InvoiceId);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteBoolValue("isParent", IsParent);
            writer.WriteBoolValue("liveMode", LiveMode);
            writer.WriteBoolValue("markAsTest", MarkAsTest);
            writer.WriteStringValue("mergedFromContactId", MergedFromContactId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_meta>("meta", Meta);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_paymentProvider>("paymentProvider", PaymentProvider);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_qboResponse>("qboResponse", QboResponse);
            writer.WriteBoolValue("qboSynced", QboSynced);
            writer.WriteStringValue("receiptId", ReceiptId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetTxnResponseSchema_status>("status", Status);
            writer.WriteStringValue("subscriptionId", SubscriptionId);
            writer.WriteStringValue("traceId", TraceId);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
