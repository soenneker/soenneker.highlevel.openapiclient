// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CallTransferActionParameters : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether to play whisper message to the receiving party</summary>
        public bool? HearWhisperMessage { get; set; }
        /// <summary>Type of transfer destination (currently only &quot;number&quot; is supported)</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CallTransferActionParameters_transferToType? TransferToType { get; set; }
        /// <summary>Phone number to transfer to. Must start with +, include country code, contain only numbers, and be 11-16 characters long (e.g., +12345678901).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransferToValue { get; set; }
#nullable restore
#else
        public string TransferToValue { get; set; }
#endif
        /// <summary>Message to tell the caller before transferring</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TriggerMessage { get; set; }
#nullable restore
#else
        public string TriggerMessage { get; set; }
#endif
        /// <summary>When to trigger this action during the call</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TriggerPrompt { get; set; }
#nullable restore
#else
        public string TriggerPrompt { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.CallTransferActionParameters"/> and sets the default values.
        /// </summary>
        public CallTransferActionParameters()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.CallTransferActionParameters"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.CallTransferActionParameters CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.CallTransferActionParameters();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "hearWhisperMessage", n => { HearWhisperMessage = n.GetBoolValue(); } },
                { "transferToType", n => { TransferToType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CallTransferActionParameters_transferToType>(); } },
                { "transferToValue", n => { TransferToValue = n.GetStringValue(); } },
                { "triggerMessage", n => { TriggerMessage = n.GetStringValue(); } },
                { "triggerPrompt", n => { TriggerPrompt = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("hearWhisperMessage", HearWhisperMessage);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CallTransferActionParameters_transferToType>("transferToType", TransferToType);
            writer.WriteStringValue("transferToValue", TransferToValue);
            writer.WriteStringValue("triggerMessage", TriggerMessage);
            writer.WriteStringValue("triggerPrompt", TriggerPrompt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
