// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CalendarDTO : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The alertEmail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertEmail { get; set; }
#nullable restore
#else
        public string AlertEmail { get; set; }
#endif
        /// <summary>Minimum scheduling notice for events</summary>
        public double? AllowBookingAfter { get; set; }
        /// <summary>Unit for minimum scheduling notice</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_allowBookingAfterUnit? AllowBookingAfterUnit { get; set; }
        /// <summary>Minimum number of days/weeks/months for which to allow booking events</summary>
        public double? AllowBookingFor { get; set; }
        /// <summary>Unit for controlling the duration for which booking would be allowed for</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_allowBookingForUnit? AllowBookingForUnit { get; set; }
        /// <summary>The allowCancellation property</summary>
        public bool? AllowCancellation { get; set; }
        /// <summary>The allowReschedule property</summary>
        public bool? AllowReschedule { get; set; }
        /// <summary>Number of appointments that can be booked for a given day</summary>
        public double? AppoinmentPerDay { get; set; }
        /// <summary>Maximum bookings per slot (per user). Maximum seats per slot in case of Class Booking Calendar.</summary>
        public double? AppoinmentPerSlot { get; set; }
        /// <summary>The autoConfirm property</summary>
        public bool? AutoConfirm { get; set; }
        /// <summary>This is only to set the custom availability. For standard availability, use the openHours property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.Availability>? Availabilities { get; set; }
#nullable restore
#else
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.Availability> Availabilities { get; set; }
#endif
        /// <summary>Determines which availability type to consider:- **1**: Only custom availabilities will be used.- **0**: Only open hours will be used.- **null**: Both custom availabilities and open hours will be considered.</summary>
        public double? AvailabilityType { get; set; }
        /// <summary>The calendarCoverImage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CalendarCoverImage { get; set; }
#nullable restore
#else
        public string CalendarCoverImage { get; set; }
#endif
        /// <summary>The calendarType property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_calendarType? CalendarType { get; set; }
        /// <summary>The consentLabel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConsentLabel { get; set; }
#nullable restore
#else
        public string ConsentLabel { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this</summary>
        public bool? EnableRecurring { get; set; }
        /// <summary>The eventColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventColor { get; set; }
#nullable restore
#else
        public string EventColor { get; set; }
#endif
        /// <summary>The eventTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventTitle { get; set; }
#nullable restore
#else
        public string EventTitle { get; set; }
#endif
        /// <summary>The eventType property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_eventType? EventType { get; set; }
        /// <summary>The formId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormId { get; set; }
#nullable restore
#else
        public string FormId { get; set; }
#endif
        /// <summary>The formSubmitRedirectURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormSubmitRedirectURL { get; set; }
#nullable restore
#else
        public string FormSubmitRedirectURL { get; set; }
#endif
        /// <summary>The formSubmitThanksMessage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormSubmitThanksMessage { get; set; }
#nullable restore
#else
        public string FormSubmitThanksMessage { get; set; }
#endif
        /// <summary>The formSubmitType property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_formSubmitType? FormSubmitType { get; set; }
        /// <summary>The googleInvitationEmails property</summary>
        public bool? GoogleInvitationEmails { get; set; }
        /// <summary>Group Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupId { get; set; }
#nullable restore
#else
        public string GroupId { get; set; }
#endif
        /// <summary>The guestType property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_guestType? GuestType { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Should the created calendar be active or draft</summary>
        public bool? IsActive { get; set; }
        /// <summary>The isLivePaymentMode property</summary>
        public bool? IsLivePaymentMode { get; set; }
        /// <summary>Meeting location configuration for event calendar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.LocationConfigurationResponse>? LocationConfigurations { get; set; }
#nullable restore
#else
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.LocationConfigurationResponse> LocationConfigurations { get; set; }
#endif
        /// <summary>The locationId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationId { get; set; }
#nullable restore
#else
        public string LocationId { get; set; }
#endif
        /// <summary>Look Busy Configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_lookBusyConfig? LookBusyConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_lookBusyConfig LookBusyConfig { get; set; }
#endif
        /// <summary>ðŸš¨ Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MeetingLocation { get; private set; }
#nullable restore
#else
        public string MeetingLocation { get; private set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The notes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>ðŸš¨ Deprecated! Please use &apos;Calendar Notifications APIs&apos; instead.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarNotification>? Notifications { get; set; }
#nullable restore
#else
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarNotification> Notifications { get; set; }
#endif
        /// <summary>This is only to set the standard availability. For custom availability, use the availabilities property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.OpenHour>? OpenHours { get; set; }
#nullable restore
#else
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.OpenHour> OpenHours { get; set; }
#endif
        /// <summary>The pixelId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PixelId { get; set; }
#nullable restore
#else
        public string PixelId { get; set; }
#endif
        /// <summary>Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready</summary>
        public double? PreBuffer { get; set; }
        /// <summary>Unit for pre-buffer.</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_preBufferUnit? PreBufferUnit { get; set; }
        /// <summary>The recurring property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.Recurring? Recurring { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.Recurring Recurring { get; set; }
#endif
        /// <summary>The shouldAssignContactToTeamMember property</summary>
        public bool? ShouldAssignContactToTeamMember { get; set; }
        /// <summary>The shouldSendAlertEmailsToAssignedMember property</summary>
        public bool? ShouldSendAlertEmailsToAssignedMember { get; set; }
        /// <summary>The shouldSkipAssigningContactForExisting property</summary>
        public bool? ShouldSkipAssigningContactForExisting { get; set; }
        /// <summary>Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up</summary>
        public double? SlotBuffer { get; set; }
        /// <summary>Unit for slot buffer.</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_slotBufferUnit? SlotBufferUnit { get; set; }
        /// <summary>This controls the duration of the meeting</summary>
        public double? SlotDuration { get; set; }
        /// <summary>Unit for slot duration.</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_slotDurationUnit? SlotDurationUnit { get; set; }
        /// <summary>Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.</summary>
        public double? SlotInterval { get; set; }
        /// <summary>Unit for slot interval.</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_slotIntervalUnit? SlotIntervalUnit { get; set; }
        /// <summary>The slug property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>The stickyContact property</summary>
        public bool? StickyContact { get; set; }
        /// <summary>Team members are for calendars of type: Round Robin, Collective, Class, Service. Personal calendar must have exactly one team member.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.TeamMemberResponse>? TeamMembers { get; set; }
#nullable restore
#else
        public List<global::Soenneker.HighLevel.OpenApiClient.Models.TeamMemberResponse> TeamMembers { get; set; }
#endif
        /// <summary>The widgetSlug property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WidgetSlug { get; set; }
#nullable restore
#else
        public string WidgetSlug { get; set; }
#endif
        /// <summary>Calendar widget type. Choose &quot;default&quot; for &quot;neo&quot; and &quot;classic&quot; for &quot;classic&quot; layout.</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_widgetType? WidgetType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO"/> and sets the default values.
        /// </summary>
        public CalendarDTO()
        {
            AdditionalData = new Dictionary<string, object>();
            EventColor = "#039be5";
            EventTitle = "{{contact.name}}";
            EventType = global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_eventType.RoundRobin_OptimizeForAvailability;
            FormSubmitType = global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_formSubmitType.ThankYouMessage;
            WidgetType = global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_widgetType.Classic;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alertEmail", n => { AlertEmail = n.GetStringValue(); } },
                { "allowBookingAfter", n => { AllowBookingAfter = n.GetDoubleValue(); } },
                { "allowBookingAfterUnit", n => { AllowBookingAfterUnit = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_allowBookingAfterUnit>(); } },
                { "allowBookingFor", n => { AllowBookingFor = n.GetDoubleValue(); } },
                { "allowBookingForUnit", n => { AllowBookingForUnit = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_allowBookingForUnit>(); } },
                { "allowCancellation", n => { AllowCancellation = n.GetBoolValue(); } },
                { "allowReschedule", n => { AllowReschedule = n.GetBoolValue(); } },
                { "appoinmentPerDay", n => { AppoinmentPerDay = n.GetDoubleValue(); } },
                { "appoinmentPerSlot", n => { AppoinmentPerSlot = n.GetDoubleValue(); } },
                { "autoConfirm", n => { AutoConfirm = n.GetBoolValue(); } },
                { "availabilities", n => { Availabilities = n.GetCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.Availability>(global::Soenneker.HighLevel.OpenApiClient.Models.Availability.CreateFromDiscriminatorValue)?.AsList(); } },
                { "availabilityType", n => { AvailabilityType = n.GetDoubleValue(); } },
                { "calendarCoverImage", n => { CalendarCoverImage = n.GetStringValue(); } },
                { "calendarType", n => { CalendarType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_calendarType>(); } },
                { "consentLabel", n => { ConsentLabel = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "enableRecurring", n => { EnableRecurring = n.GetBoolValue(); } },
                { "eventColor", n => { EventColor = n.GetStringValue(); } },
                { "eventTitle", n => { EventTitle = n.GetStringValue(); } },
                { "eventType", n => { EventType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_eventType>(); } },
                { "formId", n => { FormId = n.GetStringValue(); } },
                { "formSubmitRedirectURL", n => { FormSubmitRedirectURL = n.GetStringValue(); } },
                { "formSubmitThanksMessage", n => { FormSubmitThanksMessage = n.GetStringValue(); } },
                { "formSubmitType", n => { FormSubmitType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_formSubmitType>(); } },
                { "googleInvitationEmails", n => { GoogleInvitationEmails = n.GetBoolValue(); } },
                { "groupId", n => { GroupId = n.GetStringValue(); } },
                { "guestType", n => { GuestType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_guestType>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isActive", n => { IsActive = n.GetBoolValue(); } },
                { "isLivePaymentMode", n => { IsLivePaymentMode = n.GetBoolValue(); } },
                { "locationConfigurations", n => { LocationConfigurations = n.GetCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.LocationConfigurationResponse>(global::Soenneker.HighLevel.OpenApiClient.Models.LocationConfigurationResponse.CreateFromDiscriminatorValue)?.AsList(); } },
                { "locationId", n => { LocationId = n.GetStringValue(); } },
                { "lookBusyConfig", n => { LookBusyConfig = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_lookBusyConfig>(global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_lookBusyConfig.CreateFromDiscriminatorValue); } },
                { "meetingLocation", n => { MeetingLocation = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "notifications", n => { Notifications = n.GetCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarNotification>(global::Soenneker.HighLevel.OpenApiClient.Models.CalendarNotification.CreateFromDiscriminatorValue)?.AsList(); } },
                { "openHours", n => { OpenHours = n.GetCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.OpenHour>(global::Soenneker.HighLevel.OpenApiClient.Models.OpenHour.CreateFromDiscriminatorValue)?.AsList(); } },
                { "pixelId", n => { PixelId = n.GetStringValue(); } },
                { "preBuffer", n => { PreBuffer = n.GetDoubleValue(); } },
                { "preBufferUnit", n => { PreBufferUnit = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_preBufferUnit>(); } },
                { "recurring", n => { Recurring = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.Recurring>(global::Soenneker.HighLevel.OpenApiClient.Models.Recurring.CreateFromDiscriminatorValue); } },
                { "shouldAssignContactToTeamMember", n => { ShouldAssignContactToTeamMember = n.GetBoolValue(); } },
                { "shouldSendAlertEmailsToAssignedMember", n => { ShouldSendAlertEmailsToAssignedMember = n.GetBoolValue(); } },
                { "shouldSkipAssigningContactForExisting", n => { ShouldSkipAssigningContactForExisting = n.GetBoolValue(); } },
                { "slotBuffer", n => { SlotBuffer = n.GetDoubleValue(); } },
                { "slotBufferUnit", n => { SlotBufferUnit = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_slotBufferUnit>(); } },
                { "slotDuration", n => { SlotDuration = n.GetDoubleValue(); } },
                { "slotDurationUnit", n => { SlotDurationUnit = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_slotDurationUnit>(); } },
                { "slotInterval", n => { SlotInterval = n.GetDoubleValue(); } },
                { "slotIntervalUnit", n => { SlotIntervalUnit = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_slotIntervalUnit>(); } },
                { "slug", n => { Slug = n.GetStringValue(); } },
                { "stickyContact", n => { StickyContact = n.GetBoolValue(); } },
                { "teamMembers", n => { TeamMembers = n.GetCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.TeamMemberResponse>(global::Soenneker.HighLevel.OpenApiClient.Models.TeamMemberResponse.CreateFromDiscriminatorValue)?.AsList(); } },
                { "widgetSlug", n => { WidgetSlug = n.GetStringValue(); } },
                { "widgetType", n => { WidgetType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_widgetType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("alertEmail", AlertEmail);
            writer.WriteDoubleValue("allowBookingAfter", AllowBookingAfter);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_allowBookingAfterUnit>("allowBookingAfterUnit", AllowBookingAfterUnit);
            writer.WriteDoubleValue("allowBookingFor", AllowBookingFor);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_allowBookingForUnit>("allowBookingForUnit", AllowBookingForUnit);
            writer.WriteBoolValue("allowCancellation", AllowCancellation);
            writer.WriteBoolValue("allowReschedule", AllowReschedule);
            writer.WriteDoubleValue("appoinmentPerDay", AppoinmentPerDay);
            writer.WriteDoubleValue("appoinmentPerSlot", AppoinmentPerSlot);
            writer.WriteBoolValue("autoConfirm", AutoConfirm);
            writer.WriteCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.Availability>("availabilities", Availabilities);
            writer.WriteDoubleValue("availabilityType", AvailabilityType);
            writer.WriteStringValue("calendarCoverImage", CalendarCoverImage);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_calendarType>("calendarType", CalendarType);
            writer.WriteStringValue("consentLabel", ConsentLabel);
            writer.WriteStringValue("description", Description);
            writer.WriteBoolValue("enableRecurring", EnableRecurring);
            writer.WriteStringValue("eventColor", EventColor);
            writer.WriteStringValue("eventTitle", EventTitle);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_eventType>("eventType", EventType);
            writer.WriteStringValue("formId", FormId);
            writer.WriteStringValue("formSubmitRedirectURL", FormSubmitRedirectURL);
            writer.WriteStringValue("formSubmitThanksMessage", FormSubmitThanksMessage);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_formSubmitType>("formSubmitType", FormSubmitType);
            writer.WriteBoolValue("googleInvitationEmails", GoogleInvitationEmails);
            writer.WriteStringValue("groupId", GroupId);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_guestType>("guestType", GuestType);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isActive", IsActive);
            writer.WriteBoolValue("isLivePaymentMode", IsLivePaymentMode);
            writer.WriteCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.LocationConfigurationResponse>("locationConfigurations", LocationConfigurations);
            writer.WriteStringValue("locationId", LocationId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_lookBusyConfig>("lookBusyConfig", LookBusyConfig);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("notes", Notes);
            writer.WriteCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarNotification>("notifications", Notifications);
            writer.WriteCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.OpenHour>("openHours", OpenHours);
            writer.WriteStringValue("pixelId", PixelId);
            writer.WriteDoubleValue("preBuffer", PreBuffer);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_preBufferUnit>("preBufferUnit", PreBufferUnit);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.Recurring>("recurring", Recurring);
            writer.WriteBoolValue("shouldAssignContactToTeamMember", ShouldAssignContactToTeamMember);
            writer.WriteBoolValue("shouldSendAlertEmailsToAssignedMember", ShouldSendAlertEmailsToAssignedMember);
            writer.WriteBoolValue("shouldSkipAssigningContactForExisting", ShouldSkipAssigningContactForExisting);
            writer.WriteDoubleValue("slotBuffer", SlotBuffer);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_slotBufferUnit>("slotBufferUnit", SlotBufferUnit);
            writer.WriteDoubleValue("slotDuration", SlotDuration);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_slotDurationUnit>("slotDurationUnit", SlotDurationUnit);
            writer.WriteDoubleValue("slotInterval", SlotInterval);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_slotIntervalUnit>("slotIntervalUnit", SlotIntervalUnit);
            writer.WriteStringValue("slug", Slug);
            writer.WriteBoolValue("stickyContact", StickyContact);
            writer.WriteCollectionOfObjectValues<global::Soenneker.HighLevel.OpenApiClient.Models.TeamMemberResponse>("teamMembers", TeamMembers);
            writer.WriteStringValue("widgetSlug", WidgetSlug);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.CalendarDTO_widgetType>("widgetType", WidgetType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
