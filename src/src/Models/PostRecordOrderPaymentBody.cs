// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PostRecordOrderPaymentBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>location Id / company Id based on altType</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltId { get; set; }
#nullable restore
#else
        public string AltId { get; set; }
#endif
        /// <summary>Alt Type</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_altType? AltType { get; set; }
        /// <summary>Amount to be paid against the invoice.</summary>
        public double? Amount { get; set; }
        /// <summary>Details of Card if used for payment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_card? Card { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_card Card { get; set; }
#endif
        /// <summary>Details of the Cheque if used for payment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_cheque? Cheque { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_cheque Cheque { get; set; }
#endif
        /// <summary>Indicates if the order is intended to be a partial payment.</summary>
        public bool? IsPartialPayment { get; set; }
        /// <summary>Meta data to be recorded with the transaction</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_meta? Meta { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_meta Meta { get; set; }
#endif
        /// <summary>manual payment method</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_mode? Mode { get; set; }
        /// <summary>Any note to be recorded with the transaction</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody"/> and sets the default values.
        /// </summary>
        public PostRecordOrderPaymentBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altId", n => { AltId = n.GetStringValue(); } },
                { "altType", n => { AltType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_altType>(); } },
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "card", n => { Card = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_card>(global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_card.CreateFromDiscriminatorValue); } },
                { "cheque", n => { Cheque = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_cheque>(global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_cheque.CreateFromDiscriminatorValue); } },
                { "isPartialPayment", n => { IsPartialPayment = n.GetBoolValue(); } },
                { "meta", n => { Meta = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_meta>(global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_meta.CreateFromDiscriminatorValue); } },
                { "mode", n => { Mode = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_mode>(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("altId", AltId);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_altType>("altType", AltType);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_card>("card", Card);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_cheque>("cheque", Cheque);
            writer.WriteBoolValue("isPartialPayment", IsPartialPayment);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_meta>("meta", Meta);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.PostRecordOrderPaymentBody_mode>("mode", Mode);
            writer.WriteStringValue("notes", Notes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
