// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ConversationSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Contact Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactId { get; set; }
#nullable restore
#else
        public string ContactId { get; set; }
#endif
        /// <summary>Alternative display name for the contact - used when full name is not available</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactName { get; set; }
#nullable restore
#else
        public string ContactName { get; set; }
#endif
        /// <summary>Primary email address of the contact</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>Complete name of the contact (first and last name)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; set; }
#nullable restore
#else
        public string FullName { get; set; }
#endif
        /// <summary>Conversation Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Content of the most recent message in the conversation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastMessageBody { get; set; }
#nullable restore
#else
        public string LastMessageBody { get; set; }
#endif
        /// <summary>Channel/type of the most recent message (SMS, Email, Call, etc)</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema_lastMessageType? LastMessageType { get; set; }
        /// <summary>Location Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationId { get; set; }
#nullable restore
#else
        public string LocationId { get; set; }
#endif
        /// <summary>Primary phone number of the contact</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>Primary channel/type of the conversation (Phone, Email, etc)</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema_type? Type { get; set; }
        /// <summary>Number of unread messages in this conversation</summary>
        public double? UnreadCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema"/> and sets the default values.
        /// </summary>
        public ConversationSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "contactId", n => { ContactId = n.GetStringValue(); } },
                { "contactName", n => { ContactName = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "fullName", n => { FullName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "lastMessageBody", n => { LastMessageBody = n.GetStringValue(); } },
                { "lastMessageType", n => { LastMessageType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema_lastMessageType>(); } },
                { "locationId", n => { LocationId = n.GetStringValue(); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema_type>(); } },
                { "unreadCount", n => { UnreadCount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("contactId", ContactId);
            writer.WriteStringValue("contactName", ContactName);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("fullName", FullName);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("lastMessageBody", LastMessageBody);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema_lastMessageType>("lastMessageType", LastMessageType);
            writer.WriteStringValue("locationId", LocationId);
            writer.WriteStringValue("phone", Phone);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.ConversationSchema_type>("type", Type);
            writer.WriteDoubleValue("unreadCount", UnreadCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
