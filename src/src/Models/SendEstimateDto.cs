// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SendEstimateDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The action property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_action? Action { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Location Id or Agency Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltId { get; set; }
#nullable restore
#else
        public string AltId { get; set; }
#endif
        /// <summary>The altType property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_altType? AltType { get; set; }
        /// <summary>estimate name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EstimateName { get; set; }
#nullable restore
#else
        public string EstimateName { get; set; }
#endif
        /// <summary>livemode for estimate</summary>
        public bool? LiveMode { get; set; }
        /// <summary>sender details for invoice, valid only if invoice is not sent manually</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_sentFrom? SentFrom { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_sentFrom SentFrom { get; set; }
#endif
        /// <summary>Please ensure that the UserId corresponds to an authorized personnel, either by an employee ID or agency ID, to access this location. This account will serve as the primary channel for all future communications and updates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto"/> and sets the default values.
        /// </summary>
        public SendEstimateDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "action", n => { Action = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_action>(); } },
                { "altId", n => { AltId = n.GetStringValue(); } },
                { "altType", n => { AltType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_altType>(); } },
                { "estimateName", n => { EstimateName = n.GetStringValue(); } },
                { "liveMode", n => { LiveMode = n.GetBoolValue(); } },
                { "sentFrom", n => { SentFrom = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_sentFrom>(global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_sentFrom.CreateFromDiscriminatorValue); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_action>("action", Action);
            writer.WriteStringValue("altId", AltId);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_altType>("altType", AltType);
            writer.WriteStringValue("estimateName", EstimateName);
            writer.WriteBoolValue("liveMode", LiveMode);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendEstimateDto_sentFrom>("sentFrom", SentFrom);
            writer.WriteStringValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
