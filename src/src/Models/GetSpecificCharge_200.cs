// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GetSpecificCharge_200 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Total amount charged</summary>
        public double? AmountCharged { get; set; }
        /// <summary>App ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId { get; set; }
#nullable restore
#else
        public string AppId { get; set; }
#endif
        /// <summary>Charge ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChargeId { get; set; }
#nullable restore
#else
        public string ChargeId { get; set; }
#endif
        /// <summary>Timestamp when the charge was created in our system</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Currency of the transaction. We currently support USD only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>If the entityType is Location, entityld would be locationld.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityId { get; set; }
#nullable restore
#else
        public string EntityId { get; set; }
#endif
        /// <summary>Indicates who was charged? Currently, we support charges for &apos;location&apos; only</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityType { get; set; }
#nullable restore
#else
        public string EntityType { get; set; }
#endif
        /// <summary>meta object contains details that were sent while creating the charge via the API - eventID, description, eventTime, userld</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetSpecificCharge_200_meta? Meta { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.GetSpecificCharge_200_meta Meta { get; set; }
#endif
        /// <summary>Billing Meter ID (you can find this on your app&apos;s pricing page)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MeterId { get; set; }
#nullable restore
#else
        public string MeterId { get; set; }
#endif
        /// <summary>Price per unit for the charge</summary>
        public double? PricePerUnit { get; set; }
        /// <summary>Value is &apos;true&apos; if the charge has subsequently been refunded.</summary>
        public bool? Refunded { get; set; }
        /// <summary>This can be one of two values - &apos;charge&apos; or &apos;refund&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionType { get; set; }
#nullable restore
#else
        public string TransactionType { get; set; }
#endif
        /// <summary>Number of units that the sub-account was charged for</summary>
        public double? Units { get; set; }
        /// <summary>Timestamp when the charge was last updated in our system</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.GetSpecificCharge_200"/> and sets the default values.
        /// </summary>
        public GetSpecificCharge_200()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.GetSpecificCharge_200"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.GetSpecificCharge_200 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.GetSpecificCharge_200();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amountCharged", n => { AmountCharged = n.GetDoubleValue(); } },
                { "appId", n => { AppId = n.GetStringValue(); } },
                { "chargeId", n => { ChargeId = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "entityId", n => { EntityId = n.GetStringValue(); } },
                { "entityType", n => { EntityType = n.GetStringValue(); } },
                { "meta", n => { Meta = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetSpecificCharge_200_meta>(global::Soenneker.HighLevel.OpenApiClient.Models.GetSpecificCharge_200_meta.CreateFromDiscriminatorValue); } },
                { "meterId", n => { MeterId = n.GetStringValue(); } },
                { "pricePerUnit", n => { PricePerUnit = n.GetDoubleValue(); } },
                { "refunded", n => { Refunded = n.GetBoolValue(); } },
                { "transactionType", n => { TransactionType = n.GetStringValue(); } },
                { "units", n => { Units = n.GetDoubleValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amountCharged", AmountCharged);
            writer.WriteStringValue("appId", AppId);
            writer.WriteStringValue("chargeId", ChargeId);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("entityId", EntityId);
            writer.WriteStringValue("entityType", EntityType);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.GetSpecificCharge_200_meta>("meta", Meta);
            writer.WriteStringValue("meterId", MeterId);
            writer.WriteDoubleValue("pricePerUnit", PricePerUnit);
            writer.WriteBoolValue("refunded", Refunded);
            writer.WriteStringValue("transactionType", TransactionType);
            writer.WriteDoubleValue("units", Units);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
