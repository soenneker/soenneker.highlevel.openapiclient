// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OrderResponseSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>AltId is the unique identifier eg: location id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltId { get; set; }
#nullable restore
#else
        public string AltId { get; set; }
#endif
        /// <summary>AltType is the type of identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltType { get; set; }
#nullable restore
#else
        public string AltType { get; set; }
#endif
        /// <summary>Order value.</summary>
        public double? Amount { get; set; }
        /// <summary>Contact email corresponding to the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactEmail { get; set; }
#nullable restore
#else
        public string ContactEmail { get; set; }
#endif
        /// <summary>Contact id corresponding to the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactId { get; set; }
#nullable restore
#else
        public string ContactId { get; set; }
#endif
        /// <summary>Contact name corresponding to the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactName { get; set; }
#nullable restore
#else
        public string ContactName { get; set; }
#endif
        /// <summary>Coupon code for the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CouponCode { get; set; }
#nullable restore
#else
        public string CouponCode { get; set; }
#endif
        /// <summary>The creation timestamp of the order.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Currency in which order was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Discount value on order.</summary>
        public double? Discount { get; set; }
        /// <summary>Fulfillment status of the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FulfillmentStatus { get; set; }
#nullable restore
#else
        public string FulfillmentStatus { get; set; }
#endif
        /// <summary>The unique identifier for the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Order is in live / test mode.</summary>
        public bool? LiveMode { get; set; }
        /// <summary>Total one time products in an order.</summary>
        public double? OnetimeProducts { get; set; }
        /// <summary>Total recurring time products in an order.</summary>
        public double? RecurringProducts { get; set; }
        /// <summary>Source id for the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceId { get; set; }
#nullable restore
#else
        public string SourceId { get; set; }
#endif
        /// <summary>Meta content for the source of order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.OrderResponseSchema_sourceMeta? SourceMeta { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.OrderResponseSchema_sourceMeta SourceMeta { get; set; }
#endif
        /// <summary>Source name for the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceName { get; set; }
#nullable restore
#else
        public string SourceName { get; set; }
#endif
        /// <summary>Source sub-type for the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceSubType { get; set; }
#nullable restore
#else
        public string SourceSubType { get; set; }
#endif
        /// <summary>Source type of order (eg: funnel).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceType { get; set; }
#nullable restore
#else
        public string SourceType { get; set; }
#endif
        /// <summary>The status of the order (e.g., completed).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Order sub-total value.</summary>
        public double? Subtotal { get; set; }
        /// <summary>Total products in an order.</summary>
        public double? TotalProducts { get; set; }
        /// <summary>The last update timestamp of the order.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.OrderResponseSchema"/> and sets the default values.
        /// </summary>
        public OrderResponseSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.OrderResponseSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.OrderResponseSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.OrderResponseSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altId", n => { AltId = n.GetStringValue(); } },
                { "altType", n => { AltType = n.GetStringValue(); } },
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "contactEmail", n => { ContactEmail = n.GetStringValue(); } },
                { "contactId", n => { ContactId = n.GetStringValue(); } },
                { "contactName", n => { ContactName = n.GetStringValue(); } },
                { "couponCode", n => { CouponCode = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "discount", n => { Discount = n.GetDoubleValue(); } },
                { "fulfillmentStatus", n => { FulfillmentStatus = n.GetStringValue(); } },
                { "_id", n => { Id = n.GetStringValue(); } },
                { "liveMode", n => { LiveMode = n.GetBoolValue(); } },
                { "onetimeProducts", n => { OnetimeProducts = n.GetDoubleValue(); } },
                { "recurringProducts", n => { RecurringProducts = n.GetDoubleValue(); } },
                { "sourceId", n => { SourceId = n.GetStringValue(); } },
                { "sourceMeta", n => { SourceMeta = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.OrderResponseSchema_sourceMeta>(global::Soenneker.HighLevel.OpenApiClient.Models.OrderResponseSchema_sourceMeta.CreateFromDiscriminatorValue); } },
                { "sourceName", n => { SourceName = n.GetStringValue(); } },
                { "sourceSubType", n => { SourceSubType = n.GetStringValue(); } },
                { "sourceType", n => { SourceType = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "subtotal", n => { Subtotal = n.GetDoubleValue(); } },
                { "totalProducts", n => { TotalProducts = n.GetDoubleValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("altId", AltId);
            writer.WriteStringValue("altType", AltType);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteStringValue("contactEmail", ContactEmail);
            writer.WriteStringValue("contactId", ContactId);
            writer.WriteStringValue("contactName", ContactName);
            writer.WriteStringValue("couponCode", CouponCode);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("currency", Currency);
            writer.WriteDoubleValue("discount", Discount);
            writer.WriteStringValue("fulfillmentStatus", FulfillmentStatus);
            writer.WriteStringValue("_id", Id);
            writer.WriteBoolValue("liveMode", LiveMode);
            writer.WriteDoubleValue("onetimeProducts", OnetimeProducts);
            writer.WriteDoubleValue("recurringProducts", RecurringProducts);
            writer.WriteStringValue("sourceId", SourceId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.OrderResponseSchema_sourceMeta>("sourceMeta", SourceMeta);
            writer.WriteStringValue("sourceName", SourceName);
            writer.WriteStringValue("sourceSubType", SourceSubType);
            writer.WriteStringValue("sourceType", SourceType);
            writer.WriteStringValue("status", Status);
            writer.WriteDoubleValue("subtotal", Subtotal);
            writer.WriteDoubleValue("totalProducts", TotalProducts);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
