// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UpdateCouponParams : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Location Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltId { get; set; }
#nullable restore
#else
        public string AltId { get; set; }
#endif
        /// <summary>Alt Type</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_altType? AltType { get; set; }
        /// <summary>Is Coupon applicable on upcoming subscription transactions</summary>
        public bool? ApplyToFuturePayments { get; set; }
        /// <summary>If coupon is applicable on upcoming subscription transactions, how many months should it be applicable for a subscription</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_applyToFuturePaymentsConfig? ApplyToFuturePaymentsConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_applyToFuturePaymentsConfig ApplyToFuturePaymentsConfig { get; set; }
#endif
        /// <summary>Coupon Code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Discount Type</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_discountType? DiscountType { get; set; }
        /// <summary>Discount Value</summary>
        public double? DiscountValue { get; set; }
        /// <summary>End date in YYYY-MM-DDTHH:mm:ssZ format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>Coupon Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Limits whether a coupon can be redeemed only once per customer.</summary>
        public bool? LimitPerCustomer { get; set; }
        /// <summary>Coupon Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Product Ids</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ProductIds { get; set; }
#nullable restore
#else
        public List<string> ProductIds { get; set; }
#endif
        /// <summary>Start date in YYYY-MM-DDTHH:mm:ssZ format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>Max number of times coupon can be used</summary>
        public double? UsageLimit { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams"/> and sets the default values.
        /// </summary>
        public UpdateCouponParams()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altId", n => { AltId = n.GetStringValue(); } },
                { "altType", n => { AltType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_altType>(); } },
                { "applyToFuturePayments", n => { ApplyToFuturePayments = n.GetBoolValue(); } },
                { "applyToFuturePaymentsConfig", n => { ApplyToFuturePaymentsConfig = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_applyToFuturePaymentsConfig>(global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_applyToFuturePaymentsConfig.CreateFromDiscriminatorValue); } },
                { "code", n => { Code = n.GetStringValue(); } },
                { "discountType", n => { DiscountType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_discountType>(); } },
                { "discountValue", n => { DiscountValue = n.GetDoubleValue(); } },
                { "endDate", n => { EndDate = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "limitPerCustomer", n => { LimitPerCustomer = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "productIds", n => { ProductIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "startDate", n => { StartDate = n.GetStringValue(); } },
                { "usageLimit", n => { UsageLimit = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("altId", AltId);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_altType>("altType", AltType);
            writer.WriteBoolValue("applyToFuturePayments", ApplyToFuturePayments);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_applyToFuturePaymentsConfig>("applyToFuturePaymentsConfig", ApplyToFuturePaymentsConfig);
            writer.WriteStringValue("code", Code);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.UpdateCouponParams_discountType>("discountType", DiscountType);
            writer.WriteDoubleValue("discountValue", DiscountValue);
            writer.WriteStringValue("endDate", EndDate);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("limitPerCustomer", LimitPerCustomer);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("productIds", ProductIds);
            writer.WriteStringValue("startDate", StartDate);
            writer.WriteDoubleValue("usageLimit", UsageLimit);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
