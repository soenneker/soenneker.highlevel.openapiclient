// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SubscriptionResponseSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>AltId is the unique identifier eg: location id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltId { get; set; }
#nullable restore
#else
        public string AltId { get; set; }
#endif
        /// <summary>AltType is the type of identifier.</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_altType? AltType { get; set; }
        /// <summary>Subscription value.</summary>
        public double? Amount { get; set; }
        /// <summary>Contact email corresponding to the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactEmail { get; set; }
#nullable restore
#else
        public string ContactEmail { get; set; }
#endif
        /// <summary>Contact id corresponding to the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactId { get; set; }
#nullable restore
#else
        public string ContactId { get; set; }
#endif
        /// <summary>Contact name corresponding to the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactName { get; set; }
#nullable restore
#else
        public string ContactName { get; set; }
#endif
        /// <summary>The creation timestamp of the subscription.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Currency in which subscription occurred.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Entity id for the subscription. e.g: order id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityId { get; set; }
#nullable restore
#else
        public string EntityId { get; set; }
#endif
        /// <summary>Entity source id for the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntitySourceId { get; set; }
#nullable restore
#else
        public string EntitySourceId { get; set; }
#endif
        /// <summary>Meta content for the entity source of subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_entitySourceMeta? EntitySourceMeta { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_entitySourceMeta EntitySourceMeta { get; set; }
#endif
        /// <summary>Entity source name for the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntitySourceName { get; set; }
#nullable restore
#else
        public string EntitySourceName { get; set; }
#endif
        /// <summary>Entity source type of subscription (eg: funnel).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntitySourceType { get; set; }
#nullable restore
#else
        public string EntitySourceType { get; set; }
#endif
        /// <summary>Entity type of subscription (eg: order).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityType { get; set; }
#nullable restore
#else
        public string EntityType { get; set; }
#endif
        /// <summary>The unique identifier for the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Ip address from where subscription was initiated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>Subscription is in live / test mode.</summary>
        public bool? LiveMode { get; set; }
        /// <summary>Payment provider connected account id for subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentProviderConnectedAccount { get; set; }
#nullable restore
#else
        public string PaymentProviderConnectedAccount { get; set; }
#endif
        /// <summary>Payment provider for subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentProviderType { get; set; }
#nullable restore
#else
        public string PaymentProviderType { get; set; }
#endif
        /// <summary>The status of the subscription (e.g., succeeded).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_status? Status { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_status Status { get; set; }
#endif
        /// <summary>Subscription id for subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionId { get; set; }
#nullable restore
#else
        public string SubscriptionId { get; set; }
#endif
        /// <summary>Snapshot of subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_subscriptionSnapshot? SubscriptionSnapshot { get; set; }
#nullable restore
#else
        public global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_subscriptionSnapshot SubscriptionSnapshot { get; set; }
#endif
        /// <summary>The update timestamp of the subscription.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema"/> and sets the default values.
        /// </summary>
        public SubscriptionResponseSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altId", n => { AltId = n.GetStringValue(); } },
                { "altType", n => { AltType = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_altType>(); } },
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "contactEmail", n => { ContactEmail = n.GetStringValue(); } },
                { "contactId", n => { ContactId = n.GetStringValue(); } },
                { "contactName", n => { ContactName = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "entityId", n => { EntityId = n.GetStringValue(); } },
                { "entitySourceId", n => { EntitySourceId = n.GetStringValue(); } },
                { "entitySourceMeta", n => { EntitySourceMeta = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_entitySourceMeta>(global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_entitySourceMeta.CreateFromDiscriminatorValue); } },
                { "entitySourceName", n => { EntitySourceName = n.GetStringValue(); } },
                { "entitySourceType", n => { EntitySourceType = n.GetStringValue(); } },
                { "entityType", n => { EntityType = n.GetStringValue(); } },
                { "_id", n => { Id = n.GetStringValue(); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "liveMode", n => { LiveMode = n.GetBoolValue(); } },
                { "paymentProviderConnectedAccount", n => { PaymentProviderConnectedAccount = n.GetStringValue(); } },
                { "paymentProviderType", n => { PaymentProviderType = n.GetStringValue(); } },
                { "status", n => { Status = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_status>(global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_status.CreateFromDiscriminatorValue); } },
                { "subscriptionId", n => { SubscriptionId = n.GetStringValue(); } },
                { "subscriptionSnapshot", n => { SubscriptionSnapshot = n.GetObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_subscriptionSnapshot>(global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_subscriptionSnapshot.CreateFromDiscriminatorValue); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("altId", AltId);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_altType>("altType", AltType);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteStringValue("contactEmail", ContactEmail);
            writer.WriteStringValue("contactId", ContactId);
            writer.WriteStringValue("contactName", ContactName);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("entityId", EntityId);
            writer.WriteStringValue("entitySourceId", EntitySourceId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_entitySourceMeta>("entitySourceMeta", EntitySourceMeta);
            writer.WriteStringValue("entitySourceName", EntitySourceName);
            writer.WriteStringValue("entitySourceType", EntitySourceType);
            writer.WriteStringValue("entityType", EntityType);
            writer.WriteStringValue("_id", Id);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteBoolValue("liveMode", LiveMode);
            writer.WriteStringValue("paymentProviderConnectedAccount", PaymentProviderConnectedAccount);
            writer.WriteStringValue("paymentProviderType", PaymentProviderType);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_status>("status", Status);
            writer.WriteStringValue("subscriptionId", SubscriptionId);
            writer.WriteObjectValue<global::Soenneker.HighLevel.OpenApiClient.Models.SubscriptionResponseSchema_subscriptionSnapshot>("subscriptionSnapshot", SubscriptionSnapshot);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
