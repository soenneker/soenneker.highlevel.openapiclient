// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SendMessageBodyDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ID of the associated appointment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppointmentId { get; set; }
#nullable restore
#else
        public string AppointmentId { get; set; }
#endif
        /// <summary>Array of attachment URLs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Attachments { get; set; }
#nullable restore
#else
        public List<string> Attachments { get; set; }
#endif
        /// <summary>ID of the contact receiving the message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactId { get; set; }
#nullable restore
#else
        public string ContactId { get; set; }
#endif
        /// <summary>ID of conversation provider</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConversationProviderId { get; set; }
#nullable restore
#else
        public string ConversationProviderId { get; set; }
#endif
        /// <summary>Array of BCC email addresses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EmailBcc { get; set; }
#nullable restore
#else
        public List<string> EmailBcc { get; set; }
#endif
        /// <summary>Array of CC email addresses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EmailCc { get; set; }
#nullable restore
#else
        public List<string> EmailCc { get; set; }
#endif
        /// <summary>Email address to send from</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailFrom { get; set; }
#nullable restore
#else
        public string EmailFrom { get; set; }
#endif
        /// <summary>Mode for email replies</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto_emailReplyMode? EmailReplyMode { get; set; }
        /// <summary>Email address to send to, if different from contact&apos;s primary email. This should be a valid email address associated with the contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailTo { get; set; }
#nullable restore
#else
        public string EmailTo { get; set; }
#endif
        /// <summary>Phone number used as the sender number for outbound messages</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FromNumber { get; set; }
#nullable restore
#else
        public string FromNumber { get; set; }
#endif
        /// <summary>HTML content of the message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Html { get; set; }
#nullable restore
#else
        public string Html { get; set; }
#endif
        /// <summary>Text content of the message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>ID of message being replied to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReplyMessageId { get; set; }
#nullable restore
#else
        public string ReplyMessageId { get; set; }
#endif
        /// <summary>UTC Timestamp (in seconds) at which the message should be scheduled</summary>
        public double? ScheduledTimestamp { get; set; }
        /// <summary>Subject line for email messages</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>ID of message template</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TemplateId { get; set; }
#nullable restore
#else
        public string TemplateId { get; set; }
#endif
        /// <summary>ID of message thread. For email messages, this is the message ID that contains multiple email messages in the thread</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThreadId { get; set; }
#nullable restore
#else
        public string ThreadId { get; set; }
#endif
        /// <summary>Recipient phone number for outbound messages</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ToNumber { get; set; }
#nullable restore
#else
        public string ToNumber { get; set; }
#endif
        /// <summary>Type of message being sent</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto"/> and sets the default values.
        /// </summary>
        public SendMessageBodyDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "appointmentId", n => { AppointmentId = n.GetStringValue(); } },
                { "attachments", n => { Attachments = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "contactId", n => { ContactId = n.GetStringValue(); } },
                { "conversationProviderId", n => { ConversationProviderId = n.GetStringValue(); } },
                { "emailBcc", n => { EmailBcc = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "emailCc", n => { EmailCc = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "emailFrom", n => { EmailFrom = n.GetStringValue(); } },
                { "emailReplyMode", n => { EmailReplyMode = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto_emailReplyMode>(); } },
                { "emailTo", n => { EmailTo = n.GetStringValue(); } },
                { "fromNumber", n => { FromNumber = n.GetStringValue(); } },
                { "html", n => { Html = n.GetStringValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "replyMessageId", n => { ReplyMessageId = n.GetStringValue(); } },
                { "scheduledTimestamp", n => { ScheduledTimestamp = n.GetDoubleValue(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
                { "templateId", n => { TemplateId = n.GetStringValue(); } },
                { "threadId", n => { ThreadId = n.GetStringValue(); } },
                { "toNumber", n => { ToNumber = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("appointmentId", AppointmentId);
            writer.WriteCollectionOfPrimitiveValues<string>("attachments", Attachments);
            writer.WriteStringValue("contactId", ContactId);
            writer.WriteStringValue("conversationProviderId", ConversationProviderId);
            writer.WriteCollectionOfPrimitiveValues<string>("emailBcc", EmailBcc);
            writer.WriteCollectionOfPrimitiveValues<string>("emailCc", EmailCc);
            writer.WriteStringValue("emailFrom", EmailFrom);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto_emailReplyMode>("emailReplyMode", EmailReplyMode);
            writer.WriteStringValue("emailTo", EmailTo);
            writer.WriteStringValue("fromNumber", FromNumber);
            writer.WriteStringValue("html", Html);
            writer.WriteStringValue("message", Message);
            writer.WriteStringValue("replyMessageId", ReplyMessageId);
            writer.WriteDoubleValue("scheduledTimestamp", ScheduledTimestamp);
            writer.WriteStringValue("subject", Subject);
            writer.WriteStringValue("templateId", TemplateId);
            writer.WriteStringValue("threadId", ThreadId);
            writer.WriteStringValue("toNumber", ToNumber);
            writer.WriteEnumValue<global::Soenneker.HighLevel.OpenApiClient.Models.SendMessageBodyDto_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
