// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.HasFunds;
using Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.Item;
using Soenneker.HighLevel.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges
{
    /// <summary>
    /// Builds and executes requests for operations under \marketplace\billing\charges
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ChargesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The hasFunds property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.HasFunds.HasFundsRequestBuilder HasFunds
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.HasFunds.HasFundsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.HighLevel.OpenApiClient.marketplace.billing.charges.item collection</summary>
        /// <param name="position">ID of the charge to delete</param>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.Item.WithChargeItemRequestBuilder"/></returns>
        public global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.Item.WithChargeItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("chargeId", position);
                return new global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.Item.WithChargeItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.ChargesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ChargesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/marketplace/billing/charges{?endDate*,eventId*,limit*,meterId*,skip*,startDate*,userId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.ChargesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ChargesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/marketplace/billing/charges{?endDate*,eventId*,limit*,meterId*,skip*,startDate*,userId*}", rawUrl)
        {
        }
        /// <summary>
        /// Get all wallet charges
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.GetCharges_200"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.GetCharges_200?> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.ChargesRequestBuilder.ChargesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.GetCharges_200> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.ChargesRequestBuilder.ChargesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "422", global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.HighLevel.OpenApiClient.Models.GetCharges_200>(requestInfo, global::Soenneker.HighLevel.OpenApiClient.Models.GetCharges_200.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a new wallet charge
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.Charge_201"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.Charge_400">When receiving a 400 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.Charge_201?> PostAsync(global::Soenneker.HighLevel.OpenApiClient.Models.RaiseChargeBodyDTO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.Charge_201> PostAsync(global::Soenneker.HighLevel.OpenApiClient.Models.RaiseChargeBodyDTO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.HighLevel.OpenApiClient.Models.Charge_400.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.HighLevel.OpenApiClient.Models.Charge_201>(requestInfo, global::Soenneker.HighLevel.OpenApiClient.Models.Charge_201.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get all wallet charges
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.ChargesRequestBuilder.ChargesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.ChargesRequestBuilder.ChargesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new wallet charge
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.HighLevel.OpenApiClient.Models.RaiseChargeBodyDTO body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.HighLevel.OpenApiClient.Models.RaiseChargeBodyDTO body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.ChargesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.ChargesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.HighLevel.OpenApiClient.Marketplace.Billing.Charges.ChargesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get all wallet charges
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ChargesRequestBuilderGetQueryParameters 
        {
            /// <summary>Filter results BEFORE a specific date. Use this in combination with startDate to filter results in a specific time window.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("endDate")]
            public string? EndDate { get; set; }
#nullable restore
#else
            [QueryParameter("endDate")]
            public string EndDate { get; set; }
#endif
            /// <summary>Event ID / Transaction ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("eventId")]
            public string? EventId { get; set; }
#nullable restore
#else
            [QueryParameter("eventId")]
            public string EventId { get; set; }
#endif
            /// <summary>Maximum number of records to return</summary>
            [QueryParameter("limit")]
            public double? Limit { get; set; }
            /// <summary>Billing Meter ID (you can find this on your app&apos;s pricing page on the developer portal)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("meterId")]
            public string? MeterId { get; set; }
#nullable restore
#else
            [QueryParameter("meterId")]
            public string MeterId { get; set; }
#endif
            /// <summary>Number of records to skip</summary>
            [QueryParameter("skip")]
            public double? Skip { get; set; }
            /// <summary>Filter results AFTER a specific date. Use this in combination with endDate to filter results in a specific time window.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("startDate")]
            public string? StartDate { get; set; }
#nullable restore
#else
            [QueryParameter("startDate")]
            public string StartDate { get; set; }
#endif
            /// <summary>Filter results by User ID that your server passed via API when the charge was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("userId")]
            public string? UserId { get; set; }
#nullable restore
#else
            [QueryParameter("userId")]
            public string UserId { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
