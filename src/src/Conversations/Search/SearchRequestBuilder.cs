// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.HighLevel.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Conversations.Search
{
    /// <summary>
    /// Builds and executes requests for operations under \conversations\search
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SearchRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.SearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/conversations/search?locationId={locationId}{&assignedTo*,contactId*,followers*,id*,lastMessageAction*,lastMessageDirection*,lastMessageType*,limit*,mentions*,query*,scoreProfile*,scoreProfileMax*,scoreProfileMin*,sort*,sortBy*,sortScoreProfile*,startAfterDate*,status*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.SearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/conversations/search?locationId={locationId}{&assignedTo*,contactId*,followers*,id*,lastMessageAction*,lastMessageDirection*,lastMessageType*,limit*,mentions*,query*,scoreProfile*,scoreProfileMax*,scoreProfileMin*,sort*,sortBy*,sortScoreProfile*,startAfterDate*,status*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of all conversations matching the search criteria along with the sort and filter options selected.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.SendConversationResponseDto"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO">When receiving a 400 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.SendConversationResponseDto?> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.SendConversationResponseDto> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO.CreateFromDiscriminatorValue },
                { "401", global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.HighLevel.OpenApiClient.Models.SendConversationResponseDto>(requestInfo, global::Soenneker.HighLevel.OpenApiClient.Models.SendConversationResponseDto.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of all conversations matching the search criteria along with the sort and filter options selected.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.SearchRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.SearchRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.SearchRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of all conversations matching the search criteria along with the sort and filter options selected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SearchRequestBuilderGetQueryParameters 
        {
            /// <summary>User IDs that conversations are assigned to. Multiple IDs can be provided as comma-separated values. Use &quot;unassigned&quot; to fetch conversations not assigned to any user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("assignedTo")]
            public string? AssignedTo { get; set; }
#nullable restore
#else
            [QueryParameter("assignedTo")]
            public string AssignedTo { get; set; }
#endif
            /// <summary>Contact Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("contactId")]
            public string? ContactId { get; set; }
#nullable restore
#else
            [QueryParameter("contactId")]
            public string ContactId { get; set; }
#endif
            /// <summary>User IDs of followers to filter conversations by. Multiple IDs can be provided as comma-separated values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("followers")]
            public string? Followers { get; set; }
#nullable restore
#else
            [QueryParameter("followers")]
            public string Followers { get; set; }
#endif
            /// <summary>Id of the conversation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("id")]
            public string? Id { get; set; }
#nullable restore
#else
            [QueryParameter("id")]
            public string Id { get; set; }
#endif
            /// <summary>Action of the last outbound message in the conversation as string.</summary>
            [QueryParameter("lastMessageAction")]
            public global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.GetLastMessageActionQueryParameterType? LastMessageAction { get; set; }
            /// <summary>Direction of the last message in the conversation as string.</summary>
            [QueryParameter("lastMessageDirection")]
            public global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.GetLastMessageDirectionQueryParameterType? LastMessageDirection { get; set; }
            /// <summary>Type of the last message in the conversation as a string</summary>
            [QueryParameter("lastMessageType")]
            public global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.GetLastMessageTypeQueryParameterType? LastMessageType { get; set; }
            /// <summary>Limit of conversations - Default is 20</summary>
            [QueryParameter("limit")]
            public double? Limit { get; set; }
            /// <summary>Location Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("locationId")]
            public string? LocationId { get; set; }
#nullable restore
#else
            [QueryParameter("locationId")]
            public string LocationId { get; set; }
#endif
            /// <summary>User Id of the mention. Multiple values are comma separated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("mentions")]
            public string? Mentions { get; set; }
#nullable restore
#else
            [QueryParameter("mentions")]
            public string Mentions { get; set; }
#endif
            /// <summary>Search paramater as a string</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("query")]
            public string? Query { get; set; }
#nullable restore
#else
            [QueryParameter("query")]
            public string Query { get; set; }
#endif
            /// <summary>Id of score profile on which conversations should get filtered out, works with scoreProfileMin &amp; scoreProfileMax</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("scoreProfile")]
            public string? ScoreProfile { get; set; }
#nullable restore
#else
            [QueryParameter("scoreProfile")]
            public string ScoreProfile { get; set; }
#endif
            /// <summary>Maximum value for score</summary>
            [QueryParameter("scoreProfileMax")]
            public double? ScoreProfileMax { get; set; }
            /// <summary>Minimum value for score</summary>
            [QueryParameter("scoreProfileMin")]
            public double? ScoreProfileMin { get; set; }
            /// <summary>Sort paramater - asc or desc</summary>
            [QueryParameter("sort")]
            public global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.GetSortQueryParameterType? Sort { get; set; }
            /// <summary>The sorting of the conversation to be filtered as - manual messages or all messages</summary>
            [QueryParameter("sortBy")]
            public global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.GetSortByQueryParameterType? SortBy { get; set; }
            /// <summary>Id of score profile on which sortBy.ScoreProfile should sort on</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortScoreProfile")]
            public string? SortScoreProfile { get; set; }
#nullable restore
#else
            [QueryParameter("sortScoreProfile")]
            public string SortScoreProfile { get; set; }
#endif
            /// <summary>Search to begin after the specified date - should contain the sort value of the last document</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("startAfterDate")]
            public string? StartAfterDate { get; set; }
#nullable restore
#else
            [QueryParameter("startAfterDate")]
            public string StartAfterDate { get; set; }
#endif
            /// <summary>The status of the conversation to be filtered - all, read, unread, starred </summary>
            [QueryParameter("status")]
            public global::Soenneker.HighLevel.OpenApiClient.Conversations.Search.GetStatusQueryParameterType? Status { get; set; }
        }
    }
}
#pragma warning restore CS0618
