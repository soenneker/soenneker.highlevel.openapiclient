// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.HighLevel.OpenApiClient.Locations.Item.CustomFields;
using Soenneker.HighLevel.OpenApiClient.Locations.Item.CustomValues;
using Soenneker.HighLevel.OpenApiClient.Locations.Item.RecurringTasks;
using Soenneker.HighLevel.OpenApiClient.Locations.Item.Tags;
using Soenneker.HighLevel.OpenApiClient.Locations.Item.Tasks;
using Soenneker.HighLevel.OpenApiClient.Locations.Item.Templates;
using Soenneker.HighLevel.OpenApiClient.Locations.Item.Timezones;
using Soenneker.HighLevel.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Locations.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \locations\{locationId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithLocationItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The customFields property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Locations.Item.CustomFields.CustomFieldsRequestBuilder CustomFields
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Locations.Item.CustomFields.CustomFieldsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The customValues property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Locations.Item.CustomValues.CustomValuesRequestBuilder CustomValues
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Locations.Item.CustomValues.CustomValuesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recurringTasks property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Locations.Item.RecurringTasks.RecurringTasksRequestBuilder RecurringTasks
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Locations.Item.RecurringTasks.RecurringTasksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tags property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Locations.Item.Tags.TagsRequestBuilder Tags
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Locations.Item.Tags.TagsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tasks property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Locations.Item.Tasks.TasksRequestBuilder Tasks
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Locations.Item.Tasks.TasksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The templates property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Locations.Item.Templates.TemplatesRequestBuilder Templates
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Locations.Item.Templates.TemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The timezones property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Locations.Item.Timezones.TimezonesRequestBuilder Timezones
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Locations.Item.Timezones.TimezonesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Locations.Item.WithLocationItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithLocationItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/locations/{locationId}?deleteTwilioAccount={deleteTwilioAccount}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Locations.Item.WithLocationItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithLocationItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/locations/{locationId}?deleteTwilioAccount={deleteTwilioAccount}", rawUrl)
        {
        }
        /// <summary>
        /// Delete a Sub-Account (Formerly Location) from the Agency
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.LocationDeletedSuccessfulResponseDto"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO">When receiving a 400 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.LocationDeletedSuccessfulResponseDto?> DeleteAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Locations.Item.WithLocationItemRequestBuilder.WithLocationItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.LocationDeletedSuccessfulResponseDto> DeleteAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Locations.Item.WithLocationItemRequestBuilder.WithLocationItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO.CreateFromDiscriminatorValue },
                { "401", global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.HighLevel.OpenApiClient.Models.LocationDeletedSuccessfulResponseDto>(requestInfo, global::Soenneker.HighLevel.OpenApiClient.Models.LocationDeletedSuccessfulResponseDto.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get details of a Sub-Account (Formerly Location) by passing the sub-account id
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.GetLocationByIdSuccessfulResponseDto"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO">When receiving a 400 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.GetLocationByIdSuccessfulResponseDto?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.GetLocationByIdSuccessfulResponseDto> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO.CreateFromDiscriminatorValue },
                { "401", global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.HighLevel.OpenApiClient.Models.GetLocationByIdSuccessfulResponseDto>(requestInfo, global::Soenneker.HighLevel.OpenApiClient.Models.GetLocationByIdSuccessfulResponseDto.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update a Sub-Account (Formerly Location) based on the data provided
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.CreateLocationSuccessfulResponseDto"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO">When receiving a 400 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.CreateLocationSuccessfulResponseDto?> PutAsync(global::Soenneker.HighLevel.OpenApiClient.Models.UpdateLocationDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.CreateLocationSuccessfulResponseDto> PutAsync(global::Soenneker.HighLevel.OpenApiClient.Models.UpdateLocationDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO.CreateFromDiscriminatorValue },
                { "401", global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.HighLevel.OpenApiClient.Models.CreateLocationSuccessfulResponseDto>(requestInfo, global::Soenneker.HighLevel.OpenApiClient.Models.CreateLocationSuccessfulResponseDto.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete a Sub-Account (Formerly Location) from the Agency
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Locations.Item.WithLocationItemRequestBuilder.WithLocationItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Locations.Item.WithLocationItemRequestBuilder.WithLocationItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get details of a Sub-Account (Formerly Location) by passing the sub-account id
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, "{+baseurl}/locations/{locationId}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update a Sub-Account (Formerly Location) based on the data provided
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Soenneker.HighLevel.OpenApiClient.Models.UpdateLocationDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Soenneker.HighLevel.OpenApiClient.Models.UpdateLocationDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, "{+baseurl}/locations/{locationId}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Locations.Item.WithLocationItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.HighLevel.OpenApiClient.Locations.Item.WithLocationItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.HighLevel.OpenApiClient.Locations.Item.WithLocationItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Delete a Sub-Account (Formerly Location) from the Agency
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLocationItemRequestBuilderDeleteQueryParameters 
        {
            /// <summary>Boolean value to indicate whether to delete Twilio Account or not</summary>
            [QueryParameter("deleteTwilioAccount")]
            public bool? DeleteTwilioAccount { get; set; }
        }
    }
}
#pragma warning restore CS0618
