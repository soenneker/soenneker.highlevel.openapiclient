// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.HighLevel.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start
{
    /// <summary>
    /// Builds and executes requests for operations under \social-media-posting\oauth\facebook\start
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StartRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start.StartRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StartRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/social-media-posting/oauth/facebook/start?locationId={locationId}&userId={userId}{&page*,reconnect*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start.StartRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StartRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/social-media-posting/oauth/facebook/start?locationId={locationId}&userId={userId}{&page*,reconnect*}", rawUrl)
        {
        }
        /// <summary>
        /// Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Facebook login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function.   ### Sample code to listen to event data:    window.addEventListener(&apos;message&apos;,       function(e) {        if (e.data &amp;&amp; e.data.page === &apos;social_media_posting&apos;) {        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data        }      },    false)  ### Event Data Response:    {      actionType: string,            Ex: &quot;close&quot;       page: string,                  Ex: &quot;social-media-posting&quot;       platform: string,              Ex: &quot;facebook&quot;       placement: string,             Ex: &quot;placement&quot;       accountId: string,             Ex: &quot;658a9b6833b91e0ecb8f3958&quot;       reconnectAccounts: string[]]   Ex: [&quot;658a9b6833b91e0ecb834acd&quot;, &quot;efd2daa9b6833b91e0ecb8f3511&quot;]     }  ### The accountId retrieved from above data can be used to fetch Facebook account details using below API -  API: &apos;/social-media-posting/oauth/facebook/accounts/:accountId&apos;   Method: GET
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO">When receiving a 400 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start.StartRequestBuilder.StartRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start.StartRequestBuilder.StartRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO.CreateFromDiscriminatorValue },
                { "401", global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Facebook login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function.   ### Sample code to listen to event data:    window.addEventListener(&apos;message&apos;,       function(e) {        if (e.data &amp;&amp; e.data.page === &apos;social_media_posting&apos;) {        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data        }      },    false)  ### Event Data Response:    {      actionType: string,            Ex: &quot;close&quot;       page: string,                  Ex: &quot;social-media-posting&quot;       platform: string,              Ex: &quot;facebook&quot;       placement: string,             Ex: &quot;placement&quot;       accountId: string,             Ex: &quot;658a9b6833b91e0ecb8f3958&quot;       reconnectAccounts: string[]]   Ex: [&quot;658a9b6833b91e0ecb834acd&quot;, &quot;efd2daa9b6833b91e0ecb8f3511&quot;]     }  ### The accountId retrieved from above data can be used to fetch Facebook account details using below API -  API: &apos;/social-media-posting/oauth/facebook/accounts/:accountId&apos;   Method: GET
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start.StartRequestBuilder.StartRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start.StartRequestBuilder.StartRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start.StartRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start.StartRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.HighLevel.OpenApiClient.SocialMediaPosting.Oauth.Facebook.Start.StartRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Facebook login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function.   ### Sample code to listen to event data:    window.addEventListener(&apos;message&apos;,       function(e) {        if (e.data &amp;&amp; e.data.page === &apos;social_media_posting&apos;) {        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data        }      },    false)  ### Event Data Response:    {      actionType: string,            Ex: &quot;close&quot;       page: string,                  Ex: &quot;social-media-posting&quot;       platform: string,              Ex: &quot;facebook&quot;       placement: string,             Ex: &quot;placement&quot;       accountId: string,             Ex: &quot;658a9b6833b91e0ecb8f3958&quot;       reconnectAccounts: string[]]   Ex: [&quot;658a9b6833b91e0ecb834acd&quot;, &quot;efd2daa9b6833b91e0ecb8f3511&quot;]     }  ### The accountId retrieved from above data can be used to fetch Facebook account details using below API -  API: &apos;/social-media-posting/oauth/facebook/accounts/:accountId&apos;   Method: GET
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StartRequestBuilderGetQueryParameters 
        {
            /// <summary>Account Location Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("locationId")]
            public string? LocationId { get; set; }
#nullable restore
#else
            [QueryParameter("locationId")]
            public string LocationId { get; set; }
#endif
            /// <summary>Facebook Page</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("page")]
            public string? Page { get; set; }
#nullable restore
#else
            [QueryParameter("page")]
            public string Page { get; set; }
#endif
            /// <summary>Reconnect boolean as string</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("reconnect")]
            public string? Reconnect { get; set; }
#nullable restore
#else
            [QueryParameter("reconnect")]
            public string Reconnect { get; set; }
#endif
            /// <summary>User ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("userId")]
            public string? UserId { get; set; }
#nullable restore
#else
            [QueryParameter("userId")]
            public string UserId { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
