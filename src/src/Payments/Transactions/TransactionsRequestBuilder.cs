// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.HighLevel.OpenApiClient.Models;
using Soenneker.HighLevel.OpenApiClient.Payments.Transactions.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Payments.Transactions
{
    /// <summary>
    /// Builds and executes requests for operations under \payments\transactions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TransactionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Soenneker.HighLevel.OpenApiClient.payments.transactions.item collection</summary>
        /// <param name="position">ID of the transaction that needs to be returned</param>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.Item.WithTransactionItemRequestBuilder"/></returns>
        public global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.Item.WithTransactionItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("transactionId", position);
                return new global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.Item.WithTransactionItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.TransactionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TransactionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/payments/transactions?altId={altId}&altType={altType}{&contactId*,endAt*,entityId*,entitySourceSubType*,entitySourceType*,limit*,locationId*,offset*,paymentMode*,search*,startAt*,subscriptionId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.TransactionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TransactionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/payments/transactions?altId={altId}&altType={altType}{&contactId*,endAt*,entityId*,entitySourceSubType*,entitySourceType*,limit*,locationId*,offset*,paymentMode*,search*,startAt*,subscriptionId*}", rawUrl)
        {
        }
        /// <summary>
        /// The &quot;List Transactions&quot; API allows to retrieve a paginated list of transactions. Customize your results by filtering transactions based on name, alt type, transaction status, payment mode, date range, type of source, contact, subscription id, entity id or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve transaction information.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.ListTxnsResponseDto"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO">When receiving a 400 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.ListTxnsResponseDto?> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.TransactionsRequestBuilder.TransactionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.ListTxnsResponseDto> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.TransactionsRequestBuilder.TransactionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO.CreateFromDiscriminatorValue },
                { "401", global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.HighLevel.OpenApiClient.Models.ListTxnsResponseDto>(requestInfo, global::Soenneker.HighLevel.OpenApiClient.Models.ListTxnsResponseDto.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The &quot;List Transactions&quot; API allows to retrieve a paginated list of transactions. Customize your results by filtering transactions based on name, alt type, transaction status, payment mode, date range, type of source, contact, subscription id, entity id or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve transaction information.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.TransactionsRequestBuilder.TransactionsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.TransactionsRequestBuilder.TransactionsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.TransactionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.TransactionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.HighLevel.OpenApiClient.Payments.Transactions.TransactionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// The &quot;List Transactions&quot; API allows to retrieve a paginated list of transactions. Customize your results by filtering transactions based on name, alt type, transaction status, payment mode, date range, type of source, contact, subscription id, entity id or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve transaction information.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TransactionsRequestBuilderGetQueryParameters 
        {
            /// <summary>AltId is the unique identifier e.g: location id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("altId")]
            public string? AltId { get; set; }
#nullable restore
#else
            [QueryParameter("altId")]
            public string AltId { get; set; }
#endif
            /// <summary>AltType is the type of identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("altType")]
            public string? AltType { get; set; }
#nullable restore
#else
            [QueryParameter("altType")]
            public string AltType { get; set; }
#endif
            /// <summary>Contact id for filtering of transactions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("contactId")]
            public string? ContactId { get; set; }
#nullable restore
#else
            [QueryParameter("contactId")]
            public string ContactId { get; set; }
#endif
            /// <summary>Closing interval of transactions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("endAt")]
            public string? EndAt { get; set; }
#nullable restore
#else
            [QueryParameter("endAt")]
            public string EndAt { get; set; }
#endif
            /// <summary>Entity id for filtering of transactions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("entityId")]
            public string? EntityId { get; set; }
#nullable restore
#else
            [QueryParameter("entityId")]
            public string EntityId { get; set; }
#endif
            /// <summary>Source sub-type of the transactions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("entitySourceSubType")]
            public string? EntitySourceSubType { get; set; }
#nullable restore
#else
            [QueryParameter("entitySourceSubType")]
            public string EntitySourceSubType { get; set; }
#endif
            /// <summary>Source of the transactions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("entitySourceType")]
            public string? EntitySourceType { get; set; }
#nullable restore
#else
            [QueryParameter("entitySourceType")]
            public string EntitySourceType { get; set; }
#endif
            /// <summary>The maximum number of items to be included in a single page of results</summary>
            [QueryParameter("limit")]
            public double? Limit { get; set; }
            /// <summary>LocationId is the id of the sub-account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("locationId")]
            public string? LocationId { get; set; }
#nullable restore
#else
            [QueryParameter("locationId")]
            public string LocationId { get; set; }
#endif
            /// <summary>The starting index of the page, indicating the position from which the results should be retrieved.</summary>
            [QueryParameter("offset")]
            public double? Offset { get; set; }
            /// <summary>Mode of payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("paymentMode")]
            public string? PaymentMode { get; set; }
#nullable restore
#else
            [QueryParameter("paymentMode")]
            public string PaymentMode { get; set; }
#endif
            /// <summary>The name of the transaction for searching.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            /// <summary>Starting interval of transactions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("startAt")]
            public string? StartAt { get; set; }
#nullable restore
#else
            [QueryParameter("startAt")]
            public string StartAt { get; set; }
#endif
            /// <summary>Subscription id for filtering of transactions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("subscriptionId")]
            public string? SubscriptionId { get; set; }
#nullable restore
#else
            [QueryParameter("subscriptionId")]
            public string SubscriptionId { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
